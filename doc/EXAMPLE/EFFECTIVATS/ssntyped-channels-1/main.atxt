%{
#include "./../ATEXT/atextfun.hats"
%}

<!DOCTYPE html>
<html>

<head>
<meta
 http-equiv="content-type"
 content="text/html; charset=UTF-8" />
#langeng("
<title>EFFECTIVATS-ssntyped-channels-introduction</title>
")
#langja("
<title>EFFECTIVATS: セッション型チャネル入門</title>
")
#patscode_style()
#patspage_style()
</head>

<body>

<h1>
#langeng("
Effective ATS:<br>
Session-typed Channels:<br>
A Brief Introduction
")
#langja("
Effective ATS:<br>
セッション型チャネル:<br>
概要入門
")
</h1>

<p>
#langeng("
In this article, I present a brief introduction to session types.
")
#langja("
この記事では、セッション型に対する簡単な入門を示します。
")
</p>

<h2>
#langeng("
Basics on session-typed channels
")
#langja("
セッション型チャネルの基礎
")
</h2>

#langeng("
<p>
In broad terms, a (dyadic) session is a sequence of interactions between
two concurrently running processes, and a session type is a form of type
for specifying (or classifying) such interactions. As an example, let us
assume that two processes P and Q are connected via a bidirectional
channel. From the perspective of P, the channel may be specified by a term
sequence of the following form: </p>
")
#langja("
<p>
広義の用語では、(動的な)セッションとは2つの並行実行されたプロセスの間における相互作用の列です。
またセッション型とはそのような相互作用を特定する(もしくは分類する)型です。
例えば、2つのプロセス P と Q が双方向チャネルによって接続されていると仮定してみましょう。
P の視点から見ると、そのチャネルは次のような項の列によって特定できます: </p>
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef P_ssn = chsnd(int)::chsnd(int)::chrcv(bool)::chnil
')</pre>

#langeng("
<p>
which means that an integer is to be sent, another integer is to be
sent, a boolean is to be received, and finally the channel is to be
closed.  Clearly, from the perspective of Q, the channel should be
specified by the following term sequence:
</p>
")
#langja("
<p>
これは、1つの整数が送信しと、もう1つの整数が送信し、真理値が受信し、そして最後にそのチャネルが閉じることを意味しています。
Q の視点から見ると、次の項の列によってそのチャネルが特定されるべきであることは明確です:
</p>
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef Q_ssn = chrcv(int)::chrcv(int)::chsnd(bool)::chnil
')</pre>

#langeng("
<p>
which means precisely the dual of what the previous term sequence
does.  We may think of P as a client who sends two integers to the
server Q and then receives from Q either true or false depending on
whether or not the first sent integer is less than the second one.
</p>
")
#langja("
<p>
これは前の項の列が行なっていたことと正確に対 (dual) になっていることを意味しています。
P を、サーバ Q へ2つの整数を送信し、Q から最初に送られた整数が二番目の整数より小さいかどうかに依存して真もしくは偽を受信するような、クライアントであると考えることもできます。
</p>
")

#langeng("
<p>
There are two endpoints in a channel: a positive end and a negative end;
the end held by the server is positive and the end held by the client is
negative. We introduce two abstract types #stacode("chanpos") and
#stacode("channeg") for positive channels and negative channels,
respectively, where a positive (negative) channel refers to the positive
(negative) end of a channel:
</p>
")
#langja("
<p>
チャネルには2つの終点 (endpoints) があり: それは正の終端 (positive end) と負の終端 (negative end) です;
サーバによって保持される終端は正であり、クライアントによって保持される終端は負です。
正のチャネルと負のチャネルを表わすような、2つの抽象型 #stacode("chanpos") と #stacode("channeg") をそれぞれ導入しましょう。
このとき正の(負の)チャネルは、チャネルの正の(負の)終端を参照しています:
</p>
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
absvtype chanpos(ssn:type) // absvtype means linear abstype in ATS
absvtype channeg(ssn:type) // absvtype means linear abstype in ATS
')</pre>

#langeng("
<p>
For instance, the end of the channel held by P is assigned the
type #stacode("channeg(Q_ssn)") (not #stacode("channeg(P_ssn)")) and
the end of the channel held by Q is assigned the type #stacode("chanpos(Q_ssn)").
So the interpretation of a session type is given based on the view of the
positive end (that is, the server).
</p>
")
#langja("
<p>
例えば、P によって保持されたチャネルの終端には型 #stacode("channeg(Q_ssn)") (#stacode("channeg(P_ssn)") ではありません) が割り当てられ、Q によって保持されたチャネルの終端には型 #stacode("chanpos(Q_ssn)") が割り当てられます。
セッション型の相互作用は、正の終端 (すなわちサーバになります) の観 (view) に基づいて与えられます。
</p>
")

#langeng("
<p>
The functions for sending data on channels are given the following types:
</p>
")
#langja("
<p>
チャネル上にデータを送る関数は次のような型になります:
</p>
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
fun
chanpos_send
  {a:vt0p}{ss:type}
(
  chp: !chanpos(chsnd(a)::ss) >> chanpos(ss), x: a
) : void // end-of-function
//
fun
channeg_recv
  {a:vt0p}{ss:type}
(
  chn: !channeg(chrcv(a)::ss) >> channeg(ss), x: a
) : void // end-of-function
//
overload channel_send with chanpos_send
overload channel_send with channeg_recv
//
')</pre>

#langeng("
<p>
Note that #dyncode("chanpos_send") is for sending a value on a positive
channel while #dyncode("channeg_recv") is for sending a value on a
negative channel. For convenience, the symbol #dyncode("channel_send") is
overloaded with both of these functions.
</p>
")
#langja("
<p>
#dyncode("chanpos_send") は正のチャネルに値を送るための関数であり、#dyncode("channeg_recv") は負のチャネルに値を送るための関数であることに注意してください。
便宜上、#dyncode("channel_send") シンボルがこれらの2つの関数でオーバロードされています。
</p>
")

#langeng("
<p>
The functions for receiving data sent on channels are given the following types:
</p>
")
#langja("
<p>
チャネル上に送信されたデータを受信する関数は次の型になります:
</p>
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
fun
chanpos_recv
  {a:vt0p}{ss:type}
  (!chanpos(chrcv(a)::ss) >> chanpos(ss)): a
//
fun
channeg_send
  {a:vt0p}{ss:type}
  (!channeg(chsnd(a)::ss) >> channeg(ss)): a
//
overload channel_recv with chanpos_recv
overload channel_recv with channeg_send
//
')</pre>

#langeng("
<p>
Note that #dyncode("chanpos_recv") is for receiving a value on a positive
channel while #dyncode("channeg_send") is for receiving a value on a
negative channel. For convenience, the symbol #dyncode("channel_recv") is
overloaded with both of these functions.
</p>
")
#langja("
<p>
#dyncode("chanpos_recv") は正のチャネルからの値の受信を表わし、#dyncode("channeg_send") は負のチャネルからの値の受信を表わすことに注意してください。
便宜上、#dyncode("channel_recv") シンボルがこれらの2つの関数でオーバロードされています。
</p>
")

#langeng("
<p>
The functions for closing channels are given the following types:
</p>
")
#langja("
<p>
チャネルを閉じる関数は次の型になりります:
</p>
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
fun
chanpos_nil_wait (chp: chanpos(chnil)): void
fun
channeg_nil_close (chn: channeg(chnil)): void
//
overload channel_close with chanpos_nil_wait
overload channel_close with channeg_nil_close
//
')</pre>

#langeng("
<p>
Note that #dyncode("chanpos_nil_wait") is for closing a positive
channel while #dyncode("channeg_nil_close") is for closing a negative
channel. More specifically, a call to #dyncode("chanpos_nil_wait") on
(the positive end of) a channel waits until a message sent by a call
to #dyncode("channeg_nil_close") on (the negative end of) the same
channel arrives.  For convenience, the symbol #dyncode("channel_close")
is overloaded with both of these functions.
</p>
")
#langja("
<p>
#dyncode("chanpos_nil_wait") は正のチャネルを閉じ、#dyncode("channeg_nil_close") は負のチャネルを閉じることに注意してください。
さらに具体的に言うと、チャネルの正の終端に #dyncode("chanpos_nil_wait") を呼び出すと、同じチャネルの負の終端に #dyncode("channeg_nil_close") を呼び出しによるメッセージの到着を待ち合わせます。
便宜上、#dyncode("channel_close") シンボルがこれらの2つの関数でオーバロードされています。
</p>
")

#langeng("
<p>
The functions for sending and receiving can be based
on either synchronous or asynchronous communication. Calling these
functions may result in the caller to be blocked. For instance,
calling #dyncode("channpos_recv") blocks the caller if there is no
value available for the call to return. For asynchronous communication,
calling #dyncode("channpos_send") may block the caller if there is no
more room available for buffering.
</p>
")
#langja("
<p>
送受信のための関数は同期もしくは非同期どちらの通信にも基づくことができます。
これらの関数呼び出しは呼び出し元のブロックを引き起すかもしれません。
例えば、#dyncode("channpos_recv") 呼び出しは、その呼び出しが返す値がなければ、ブロックするでしょう。
非同期通信では、#dyncode("channpos_send") 呼び出しは、バッファに空きがなければ、呼び出し元をブロックするかもしれなせん。
</p>
")

#langeng("
<p>
The programs for the processes P and Q can be implemented as follows:
</p>
")
#langja("
<p>
プロセス P と Q を表わすプログラムは次のように実装できます:
</p>
")

<pre
class="patsyntax">
#pats2xhtml_dats('\
(* ****** ****** *)

fun
P (
  i1: int, i2: int
, chn: channeg(Q_ssn)
) : bool = lt where
{
  val () = channel_send(chn, i1)
  val () = channel_send(chn, i2)
  val lt = channel_recv(chn)
  val () = channel_close(chn)
}

(* ****** ****** *)

fun
Q (
  chp: chanpos(Q_ssn)
) : void =
{
  val i1 = channel_recv(chp)
  val i2 = channel_recv(chp)
  val () = channel_send(chp, i1 < i2)
  val () = channel_close(chp)
}

(* ****** ****** *)
')</pre>

#langeng("
<p>
But how a channel can be created in the first place? The answer
to this question depends on the underlying support for distributed
programming. For instance, we may be able to introduce the following
function #dyncode("channel_create") for creating a channel:
")
#langja("
<p>
しかしそもそもチャネルはどうやって作れば良いのでしょうか？
その答は分散プログラミングをどのようにサポートするかに依存しています。
例えば、チャネルの生成に次のような関数 #dyncode("channel_create") を導入できるでしょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun
channeg_create{ss:type}
  (fserv: chanpos(ss) -<lincloptr1> void): channeg(ss)
')</pre>

#langeng("
The basic idea here is to spawn a thread (by executing the linear
closure-function #dyncode("fserv")) that works on the postive end of
the newly created channel and then returns the negative end of the
channel to the caller.
</p>
")
#langja("
ここでの基本的なアイデアは(線形クロージャ関数 #dyncode("fserv") の実行で)スレッドを生成することです。
そのスレッドは新たに生成されたチャネルの正の終端で動作し、それからそのチャネルの負の終端が呼び出し元に返されます。
</p>
")

<h2>
#langeng("
Session-typed channels based on web-workers
")
#langja("
web-workerに基づいたセッション型チャネル
")
</h2>

#langeng("
<p>
In the rest of this article, I will give a concrete presentation of
session-typed channels that are implemented based on web-workers.  For
those who are not yet familiar with web-workers, it can be a good idea
to first study some programming examples involving them before reading
on. Essentially, a web-worker is a thread running in the background
that can communicate with the browser via message-passing.  The ATS
code presented as follows is intended to be compiled into JS code (via
Patsopt and Atscc2js) for running in the browser (client) and a
web-worker (server). As JS (or, more precisely, its run-time) is
single-threaded, we cannot support a function (e.g.,
#dyncode("chanpos_recv")) that may block its caller indefinitely. We
address this issue by building an interface for programming
session-typed channels that is of CPS-style (where CPS stands for
continuation-passing style).
</p>
")
#langja("
<p>
この記事の残りでは、web-workerに基づいて実装されたセッション型チャネルの具体例を示します。
web-workerに馴染みのない読者にとって、読む前に何らかのプログラミングの例を学ぶのは良いアイデアかもしれません。
本質的に、web-workerはメッセージパッシングによってウェブブラウザと通信する、バックグランド実行されたスレッドです。
次に示す ATS コードは (Patsopt と Atscc2js で) JS コードにコンパイルされ、ウェブブラウザ (クライアント) と web-worker (サーバ) で実行するように意図されています。
JS (より正確にはそのランタイム) はシングルスレッドなので、無期限に呼び出し元をブロックさせるような関数 (例: #dyncode("chanpos_recv")) をサポートできません。
この問題に対処するために、継続渡し (CPS: Continuation-passing) スタイルのセッション型チャネルをプログラミングするためのインターフェイスを構築します。
</p>
")

#langeng("
<p>
Let us first see the types assigned to the functions for closing
channels:
")
#langja("
<p>
はじめにチャネルを閉じる関数に割り当てられた型を見てみましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
vtypedef
chanpos_nil = chanpos(chnil)
vtypedef
channeg_nil = channeg(chnil)
//
fun chanpos1_close(chanpos_nil): void
fun channeg1_close(channeg_nil): void
//
')</pre>

#langeng("
Clearly, everything is standard here, and there is really no surprise at all.

</p>
")
#langja("
明確に、全ては一般的なもので、おどろくべきことはありません。

</p>
")

#langeng("
<p>

Let us next see the types assigned to the functions for sending and receiving
on channels:
")
#langja("
<p>

次にチャネルに対する送受信を行なう関数に割り当てられた型を見てみましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
typedef
chpcont0(ss:type) = (chanpos(ss)) -<cloref1> void
typedef
chncont0(ss:type) = (channeg(ss)) -<cloref1> void
//
typedef
chpcont1(ss:type, a:t0p) = (chanpos(ss), a) -<cloref1> void
typedef
chncont1(ss:type, a:t0p) = (channeg(ss), a) -<cloref1> void
//
typedef chpcont0_nil = chpcont0(chnil)
typedef chncont0_nil = chncont0(chnil)
//
fun
chanpos1_send
  {a:t0p}{ss:type}
(
  chanpos(chsnd(a)::ss), x0: a, k0: chpcont0(ss)
) : void // end-of-fun
//
fun
chanpos1_recv
  {a:t0p}{ss:type}
(
  chanpos(chrcv(a)::ss), k0: chpcont1(ss, chmsg(a))
) : void // end-of-fun
//
fun
channeg1_recv
  {a:t0p}{ss:type}
(
  channeg(chrcv(a)::ss), x0: a, k0: chncont0(ss)
) : void // end-of-fun
//
fun
channeg1_send
  {a:t0p}{ss:type}
(
  channeg(chsnd(a)::ss), k0: chncont1(ss, chmsg(a))
) : void // end-of-fun
//
')</pre>

#langeng("
Given a type T, the type #stacode("chmsg(T)") is for the marshalled
representation of a value of the type T. The type assigned to the
function #dyncode("chanpos1_send") indicates that the function takes
three arguments: a positive channel, a value (to be sent), and a
continuation; the channel is passed to the continuation after the
value is sent onto the channel. Also, the type assigned to the
function #dyncode("chanpos1_recv") indicates that the function takes
two arguments: a positive channel and a continuation; the channel and
the marshalled representation of a value are passed to the
continutation after the representation is received. The types assigned
to the functions #dyncode("channeg1_send") and
#dyncode("channeg1_recv") can be explained similarly.

</p>
")
#langja("
型 T が与えられたとき、型 #stacode("chmsg(T)") は型 T の値のマーシャル化 (marshalled) された表現を表わします。
関数 #dyncode("chanpos1_send") に割り当てられた型はその関数が次の3つの引数を取ることを示しています:
それらは正のチャネル、(送信される)値、そして継続です;
その値がそのチャネルに渡された後、そのチャネルには継続が渡されます。
また、関数 #dyncode("chanpos1_recv") に割り当てられた型はその関数が次の2つの引数を取ることを示しています:
それらは正のチャネルと継続です;
その値のマーシャル化された表現を受信した後、そのチャネルとマーシャル化された表現は継続に渡されます。
関数 #dyncode("channeg1_send") と #dyncode("channeg1_recv") に割り当てられた型は同様に説明できます。

</p>
")

#langeng("
<p>

The above functions #dyncode("P") and #dyncode("Q") can now be implemented
as follows:
")
#langja("
<p>

上記の関数 #dyncode("P") と #dyncode("Q") は次のように実装できます:
")

<pre
class="patsyntax">
#pats2xhtml_dats('\
(* ****** ****** *)

fun
P (
  i1: int, i2: int
, chn: channeg(Q_ssn)
) : void = (
//
channeg1_recv
( chn, i1
, lam(chn) =>
  channeg1_recv
  ( chn, i2
  , lam(chn) =>
    channeg1_send
    ( chn
    , lam(chn, lt) => let
      val lt = chmsg_parse<bool>(lt)
      (*
      // Some code for processing [lt]
      *)
      in
        channeg1_close(chn)
      end
    )
  ) 
)
//
) (* end of [P] *)

(* ****** ****** *)

fun
Q (
  chp: chanpos(Q_ssn)
) : void = (
//
chanpos1_recv
( chp
, lam(chp, i1) => let
  val i1 = chmsg_parse<int>(i1) in
  chanpos1_recv
  ( chp
  , lam(chp, i2) => let
    val i2 = chmsg_parse<int>(i2) in
    chanpos1_send
    ( chp, i1 < i2
    , lam(chp) => chanpos1_close(chp)
    )
    end // end-of-let // end-of-lam
  )
  end // end-of-let // end-of-lam
)
//
) (* end of [Q] *)

(* ****** ****** *)
')</pre>

#langeng("
Note that #dyncode("chmsg_parse") is a function template for
unmarshalling: It is called to turn the marshalled representation of a
value into the value itself.

</p>
")
#langja("
#dyncode("chmsg_parse") はアンマーシャル化 (unmarshalling) を表わす関数テンプレートであることに注意してください:
それは値のマーシャル化された表現をその値自身に戻すために呼び出されます。

</p>
")

#langeng("
<p>
A simple demo based on the code for #dyncode("P") and #dyncode("Q") is
available <a href=\"./introxmpl1_demo.html\">on-line</a>. The entirety
of the code for this demo can be found in four files of the following
names:
")
#langja("
<p>
#dyncode("P") と #dyncode("Q") のコードを使った単純なデモが <a href=\"http://ats-lang.sourceforge.net/EXAMPLE/EFFECTIVATS/ssntyped-channels-1/introxmpl1_demo.html\">オンライン</a> から入手できます。
このデモコードの全体は次の名前の4つのファイルから成り立ちます:
")

<pre>
introxmpl1_demo.html
introxmpl1_prctl.sats
introxmpl1_client.dats
introxmpl1_server.dats
</pre>

#langeng("
In the file #filename("introxmpl1_prctl.sats"), the protocol for
communincations between the client (browser) and the server
(web-worker) is formally represented as a session type. As can be
expected, this file is statically loaded in both
#filename("introxmpl1_client.dats") and
#filename("introxmpl1_server.dats").  The client code (in
#filename("introxmpl1_client.dats")) is based on the code for
#dyncode("P") but contains various significant modifications, and it
makes use of Bacon.js in its handling GUI issues. On the other hand,
the server code (in #filename("introxmpl1_client.dats")) is directly
based on the code for #dyncode("Q") with virtually no modifications. I
strongly encourage the reader to use the provided Makefile to build
the demo on his/her own.

</p>
")
#langja("
ファイル #filename("introxmpl1_prctl.sats") では、クライアント(ブラウザ)とサーバ(web-worker)の間における通信プロトコルがセッション型を用いて形式的に表現されています。
予想されるように、このファイルは #filename("introxmpl1_client.dats") と #filename("introxmpl1_server.dats") の両方に静的にロードされます。
(#filename("introxmpl1_client.dats") における) クライアントコードは #dyncode("P") のコードに基づいていますが、いくつかの有意な修正を含んでおり、GUI を扱うために Bacon.js を使います。
他方では、(#filename("introxmpl1_client.dats") における) サーバコードは #dyncode("Q") のコードに直接基づいており、事実上修正はありません。
与えられた Makefile を使って独自のデモを作ることを読者に勧めます。

</p>
")

<hr size="2">

#langeng("
This article is written by <a href=\"http://www.cs.bu.edu/~hwxi/\">Hongwei Xi</a>.
")
#langja("
この記事は
<a href=\"http://www.cs.bu.edu/~hwxi/\">Hongwei Xi</a>
によって書かれ、
<a href=\"http://jats-ug.metasepi.org/\">Japan ATS User Group</a>
によって翻訳されています。
")

#patspage_script()
</body>
</html>

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
