%{
#include "./../ATEXT/atextfun.hats"
%}

<!DOCTYPE html>
<html>

<head>
<meta
 http-equiv="content-type"
 content="text/html; charset=UTF-8" />
#langeng("
<title>EFFECTIVATS-ssntyped-channels-session-combinators</title>
")
#langja("
<title>EFFECTIVATS: セッションの合成</title>
")
#patscode_style()
</head>

<body>

<h1>
#langeng("
Effective ATS:<br>
Session-typed Channels:<br>
Let us combine sessions together!
")
#langja("
Effective ATS:<br>
セッション型チャネル:<br>
セッションを合成しよう!
")
</h1>

<p>
#langeng("
In this article, I present several session combinators
for combining existing sessions together to form new sessions.
In this regard, session combinators are similar to parsing combinators,
which combine existing parsers to form new parsers.
")
#langja("
この記事では、既存のセッションを合成して新しいセッションを作るセッションコンビネータを示します。
この点では、セッションコンビネータは既存のパーサを合成して新しいパーサを作るパーサコンビネータと似ています。
")
</p>

<h2>
#langeng("
Sessions in CPS-style
")
#langja("
CPS スタイルのセッション
")
</h2>

<p>
#langeng("
In the following presentation, sessions are represented as
closure-functions in CPS-style. Let us first see two abstract
types:
")
#langja("
次に示すのは、CPS スタイルのクロージャ関数として表わされたセッションです。
はじめに2つの抽象型を見てみましょう:
")
</p>

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
abstype chanpos_session(ss:type)
abstype channeg_session(ss:type)
//
')</pre>

<p>
#langeng("
The abstract types #stacode("chanpos_session") and
#stacode("channeg_session") are actually defined as
#stacode("chanpos_nullify") and #stacode("channeg_nullify"),
respectively:
")
#langja("
実施には、抽象型 #stacode("chanpos_session") と #stacode("channeg_session") はそれぞれ #stacode("chanpos_nullify") と #stacode("channeg_nullify") として定義されます:
")
</p>

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
typedef
chanpos_nullify(ss:type) =
  (chanpos(ss), chpcont0_nil) -<cloref1> void
typedef
channeg_nullify(ss:type) =
  (channeg(ss), chncont0_nil) -<cloref1> void
//
')</pre>

#langeng("
<p> A server-session of the type #stacode("chanpos_session(ss)") takes
as its two arguments a positive channel of the type
#stacode("chanpos(ss)") and a continuation; it turns the positive
channel into one of the type #stacode("chanpos(chnil)") and then
passes it to the continuation. The meaning of a client-session of the
type #stacode("channeg_session(ss)") can be similarly construed.  </p>
")
#langja("
<p> 型 #stacode("chanpos_session(ss)") のサーバセッションは、2つの引数として型 #stacode("chanpos(ss)") の正のチャネルと継続を取ります;
そのセッションは正のチャネルを型 #stacode("chanpos(chnil)") に変化させて、それからそれを継続に渡します。
型 #stacode("channeg_session(ss)") のセーバセッションの意味は同様に解釈できるでしょう。  </p>
")

<p>
#langeng("
Let us now recall the implementation of the server process in a
<a href=\"./../ssntyped-channels-1/index.html\">previous article</a> 
on session-typed channels:
")
#langja("
ここで、セッション型チャネルの <a href=\"./../ssntyped-channels-1/main.html\">前の記事</a> におけるサーバプロセスの実装を思い出してみましょう:
")
</p>

<pre
class="patsyntax">
#pats2xhtml_dats('\
//
typedef
Q_ssn =
chrcv(int)::chrcv(int)::chsnd(bool)::chnil
//
fun
Q (
  chp: chanpos(Q_ssn)
) : void = (
//
chanpos1_recv
( chp
, lam(chp, i1) => let
  val i1 = chmsg_parse<int>(i1) in
  chanpos1_recv
  ( chp
  , lam(chp, i2) => let
    val i2 = chmsg_parse<int>(i2) in
    chanpos1_send
    ( chp, i1 < i2
    , lam(chp) => chanpos1_close(chp)
    )
    end // end-of-let // end-of-lam
  )
  end // end-of-let // end-of-lam
)
//
) (* end of [Q] *)
')</pre>

<p>
#langeng("
A server-session corresponding to #dyncode("Q") can be implemented
as follows by making use of certain session combinators:
")
#langja("
#dyncode("Q") に相当するサーバセッションは、サーバコンビネータを使うことで次のように実装できます:
")
</p>

<pre
class="patsyntax">
#pats2xhtml_dats('\
//
overload :: with chanpos1_session_cons
//
fun
Q_session(): chanpos_session(Q_ssn) = let
//
val i1_ref = ref{int}(0)
val i2_ref = ref{int}(0)
//
val ss1 =
  chanpos1_session_recv<int>(lam(i) => i1_ref[] := i)
val ss2 =
  chanpos1_session_recv<int>(lam(i) => i2_ref[] := i)
val ss3 =
  chanpos1_session_send<bool>(lam() => i1_ref[] < i2_ref[])
//
in
  ss1 :: ss2 :: ss3 :: chanpos1_session_nil()
end // end of [Q_session]
//
')</pre>

<p>
#langeng("
The session combinator #dyncode("chanpos1_session_send") is
called to form a single-action session which only sends a message on
a given positive channel before passing the channel to a continuation.
Note that I may also refer to such a session as a singleton session.
Similarly, the session combinator #dyncode("chanpos1_session_recv")
is called to form a single-action session which only receives a
message on a given positive channel before passing the channel to a
continuation.
")
#langja("
セッションコンビネータ #dyncode("chanpos1_session_send") は、継続にチャネルが渡される前に与えられた正のチャネルへメッセージを送信するだけの単一のアクションを持つセッションを作るために呼び出されます。
そのようなセッションをシングルトンセッションと呼ぶことにします。
同様に、セッションコンビネータ #dyncode("chanpos1_session_recv") は、継続にチャネルが渡される前に正のチャネルからメッセージを受信するだけの単一のアクションを持つセッションを作るために呼び出されます。
")
</p>


<pre
class="patsyntax">
#pats2xhtml_sats('\
//
fun{
a:t@ype
} chanpos1_session_send
  (cfun0(a)): chanpos_session(chsnd(a)::chnil)
fun{
a:t@ype
} chanpos1_session_recv
  (cfun1(a, void)): chanpos_session(chrcv(a)::chnil)
//
')</pre>

<p>
#langeng("
The session combinators #dyncode("chanpos1_session_nil") and
#dyncode("chanpos1_session_cons") should remind one of the standard
list constructors:
")
#langja("
セッションコンビネータ #dyncode("chanpos1_session_nil") と #dyncode("chanpos1_session_cons") は次のような標準のコンストラクタになります:
")
</p>

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
fun
chanpos1_session_nil(): chanpos_session(chnil)
//
fun{}
chanpos1_session_cons
  {a:type}{ss:type}
(
  chanpos_session(chcons(a, chnil)), chanpos_session(ss)
) : chanpos_session(a::ss)
//
')</pre>

#langeng("
<p>
As indicated by the types, #dyncode("chanpos1_session_nil") is
called to form an empty session and #dyncode("chanpos1_session_cons")
to combine a singleton session with a (general) session.  </p>
")
#langja("
<p>
型の示すところでは、#dyncode("chanpos1_session_nil") は空のセッションを作るために呼び出され、#dyncode("chanpos1_session_cons") はシングルトンセッションと(一般の)セッションを合成するために呼び出されます。  </p>
")

#langeng("
<p> Please study the code in #filename("introxmpl1_server.dats") to
see how the session constructed by calling #dyncode("Q_session") can
be executed. The following code implements a client-session
#dyncode("P_session") that corresponds to the server-session
#dyncode("Q_session"): </p>
")
#langja("
<p> #dyncode("Q_session") を呼び出して構築されたセッションがどのように実行されるのか、#filename("introxmpl1_server.dats") のコードを読んでください。
次のコードは、サーバセッション #dyncode("Q_session") に対応するクライアントセッション #dyncode("P_session") を実装しています: </p>
")

<pre
class="patsyntax">
#pats2xhtml_dats('\
//
fun
P_session
(
// argless
) : channeg_session(Q_ssn) = let
//
fun
theResult_process
  (lt: bool): void = let
  val () = Start_output("Session over!")
in
  theResult_set(if lt then "true" else "false")
end // end of [theResult_process]
//
val ss1 =
  channeg1_session_recv<int>(lam() => theArg1_get())
val ss2 =
  channeg1_session_recv<int>(lam() => theArg2_get())
val ss3 =
  channeg1_session_send<bool>(lam(lt) => theResult_process(lt))
//
in
  ss1 :: ss2 :: ss3 :: channeg1_session_nil((*void*))
end // end of [P_session]
//
')</pre>

<p>
#langeng("
However, the session constructed by calling #dyncode("P_session") is
not suitable for being used directly as it ignores GUI issues. Please
study the code in #filename("introxmpl1_client.dats") for details on
handling GUI issues.
")
#langja("
けれども、#dyncode("P_session") を呼び出して構築されたセッションは、GUI の課題を無視しているので、直接の使用には適しません。
GUI に関する課題の扱いの詳細については、#filename("introxmpl1_client.dats") のコードを読んでください。
")
</p>

<p>
#langeng("
A simple demo based on the code for #dyncode("P_session") and
#dyncode("Q_session") is available
<a href=\"./introxmpl1.html\">on-line</a>. The entirety of the code
for this demo can be found in four files of the following names:
")
#langja("
#dyncode("P_session") と #dyncode("Q_session") のコードに基づいた単純なデモが <a href=\"http://ats-lang.sourceforge.net/EXAMPLE/EFFECTIVATS/ssntyped-channels-2/introxmpl1.html\">オンライン</a> から入手できます。
このデモのコード全体は次の名前の4つのファイルから成っています:
")

<pre>
introxmpl1.html
introxmpl1_prctl.sats
introxmpl1_client.dats
introxmpl1_server.dats
</pre>

#langeng("
I strongly encourage the reader to use the provided Makefile to build
the demo on his/her own.
")
#langja("
与えられた Makefile を使って独自のデモを作ることを、読者に強くおすすめします。
")
</p>

<h2>
#langeng("
Various Session Combinators
")
#langja("
様々なセッションコンビネータ
")
</h2>

#langeng("
Some commonly used session combinators are briefly mentioned as follows.
")
#langja("
一般に使われるセッションコンビネータを次に示します。
")

<h3>
#langeng("
Joining Sessions: ssappend
")
#langja("
セッションの合流: ssappend
")
</h3>

<p>
#langeng("
Given two session types #stacode("ss1") and #stacode("ss2"),
#stacode("ssappend(ss1, ss2)") is a session type for specifying a
session that is the concatenation of one specified by #stacode("ss1")
and another one by #stacode("ss2"). The following functions
#dyncode("chanpos1_session_append") and
#dyncode("channeg1_session_append") can be called to join
server-sessions and client-sessions, respectively:
")
#langja("
2つのセッション型 #stacode("ss1") と #stacode("ss2") が与えられたとき、#stacode("ssappend(ss1, ss2)") は #stacode("ss1") と #stacode("ss2") の連結を表わすセッション型です。
サーバセッションとクライアントセッションを合成するためには、それぞれ次の関数 #dyncode("chanpos1_session_append") と #dyncode("channeg1_session_append") を呼び出します:
")
</p>

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
fun{}
chanpos1_session_append
  {ss1,ss2:type}
(
  ssp1: chanpos_session(ss1)
, ssp2: chanpos_session(ss2)
) : chanpos_session(ssappend(ss1, ss2))
//
fun{}
channeg1_session_append
  {ss1,ss2:type}
(
  ssn1: channeg_session(ss1)
, ssn2: channeg_session(ss2)
) : channeg_session(ssappend(ss1, ss2))
//
')</pre>

<h3>
#langeng("
Server-selected Session : sschoose_disj
")
#langja("
選択されたサーバセッション : sschoose_disj
")
</h3>

<p>
#langeng("
Given two session types #stacode("ss0") and #stacode("ss1") the
session type #stacode("sschoose_disj(ss0,ss1)") is for classifying a
session that can behave like one classified by either #stacode("ss0")
or #stacode("ss1"); the choice as to whether it is classified by
#stacode("ss0") or #stacode("ss1") is determined by the server.
")
#langja("
2つのセッション型 #stacode("ss0") と #stacode("ss1") が与えられたとき、セッション型 #stacode("sschoose_disj(ss0,ss1)") は #stacode("ss0") もしくは #stacode("ss1") によって分類されるようなセッションを分類します;
#stacode("ss0") もしくは #stacode("ss1") の選択はサーバによって決定されます。
")
</p>

<h3>
#langeng("
Client-selected Session : sschoose_conj
")
#langja("
選択されたクライアントセッション : sschoose_conj
")
</h3>

<p>
#langeng("
Given two session types #stacode("ss0") and #stacode("ss1") the
session type #stacode("sschoose_conj(ss0,ss1)") is for classifying a
session that can behave like one classified by either #stacode("ss0")
or #stacode("ss1"); the choice as to whether it is classified by
#stacode("ss0") or #stacode("ss1") is determined by the client.
")
#langja("
2つのセッション型 #stacode("ss0") と #stacode("ss1") が与えられたとき、セッション型 #stacode("sschoose_conj(ss0,ss1)") は #stacode("ss0") もしくは #stacode("ss1") によって分類されるようなセッションを分類します;
#stacode("ss0") もしくは #stacode("ss1") の選択はクライアントによって決定されます。 
")
</p>

<h3>
#langeng("
Server-Optional Session : ssoption_disj
")
#langja("
オプショナルなサーバセッション : ssoption_disj
")
</h3>

<p>
#langeng("
Given a session type #stacode("ss"), the session type
#stacode("ssoption_disj(ss)") is essentially the same as
#stacode("sschoose_disj(ss, chnil)").
")
#langja("
セッション型 #stacode("ss") が与えられたとき、セッション型 #stacode("ssoption_disj(ss)") は #stacode("sschoose_disj(ss, chnil)") と本質的に同じです。
")
</p>

<h3>
#langeng("
Client-Optional Session : ssoption_conj
")
#langja("
オプショナルなクライアントセッション : ssoption_conj
")
</h3>

<p>
#langeng("
Given a session type #stacode("ss"), the session type
#stacode("ssoption_conj(ss)") is essentially the same as
#stacode("sschoose_conj(ss, chnil)").
")
#langja("
セッション型 #stacode("ss") が与えられたとき、セッション型 #stacode("ssoption_conj(ss)") は #stacode("sschoose_conj(ss, chnil)") と本質的に同じです。
")
</p>

<h3>
#langeng("
Server-Repeated Session : ssrepeat_disj
")
#langja("
繰り返されたサーバセッション : ssrepeat_disj
")
</h3>

<p>
#langeng("
Given a session type #stacode("ss"), the session type
#stacode("ssrepeat_disj(ss)") is for classifying one that repeats a
session classified by #stacode("ss"); the choice is made by the
server as to whether repetition should continue.
")
#langja("
セッション型 #stacode("ss") が与えられたとき、セッション型 #stacode("ssrepeat_disj(ss)") はセッション #stacode("ss") を繰り返すようなセッションを分類します;
繰り返しが続くかどうかはサーバによって選択されます。
")
</p>

<h3>
#langeng("
Client-Repeated Session : ssrepeat_conj
")
#langja("
繰り返されたクライントセッション : ssrepeat_conj
")
</h3>

<p>
#langeng("
Given a session type #stacode("ss"), the session type
#stacode("ssrepeat_conj(ss)") is for classifying one that repeats a
session classified by #stacode("ss"); the choice is made by the
client as to whether repetition should continue.
")
#langja("
セッション型 #stacode("ss") が与えられたとき、セッション型 #stacode("ssrepeat_conj(ss)") はセッション #stacode("ss") を繰り返すようなセッションを分類します;
繰り返しが続くかどうかはクライアントによって選択されます。
")
</p>

<h2>
#langeng("
A Service for Multiplication Test
")
#langja("
乗算テストのサービス
")
</h2>

<p>
#langeng("
As an example for demonstrating certain typical use of session
combinators, I present as follows the construction of a service for
testing one's ability to do multiplication mentally.  Please click <a
href=\"./multest.html\">here</a> to give the service a try.  </p>
")
#langja("
セッションコンビネータを使った典型的なデモとして、乗算を行なう能力をテストするサービスを次に示します。
このサービスを試すには <a href=\"http://ats-lang.sourceforge.net/EXAMPLE/EFFECTIVATS/ssntyped-channels-2/multest.html\">ここ</a> をクリックしてください。  </p>
")

<h3>
#langeng("
Login Session
")
#langja("
ログインセッション
")
</h3>

<p>
#langeng("
To use the service, one needs to first perform login.
The session type for classifying the login session is
given as follows:
")
#langja("
このサービスを使うためには、最初にログインする必要があります。
ログインセッションを分類するセンション型は次のようになります:
")
<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef
ss_login = chrcv(string)::ss_pass_try
')</pre>

#langeng("
where the session type #stacode("ss_pass_try") is defined
below:
")
#langja("
このとき、セッション型 #stacode("ss_pass_try") は以下のように定義されます:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef
ss_pass =
chrcv(string)::chsnd(bool)::chnil
typedef
ss_pass_try = ssrepeat_disj(ss_pass)
')</pre>

#langeng("
During the login session, the server receives a string (representing
the ID of the user) and enters a session for password-checking; one
round of password-checking involves receiving a string (password) from
the user and sending the result of checking to the user; the service
may initiate another round of password-checking if the current round
fails (that is, the boolean value #dyncode("false") is sent to the
user).
")
#langja("
ログインセッションの最中では、サーバは (ユーザのIDを表わす) 文字列を受け取り、パスワードチェックするセッションに入ります;
パスワードチェックではユーザから (パスワードである) 文字列を受け取り、チェックした結果をユーザに送信します;
もし現在の試行が失敗したら (つまり真理値 #dyncode("false") がユーザに送信されます) 、このサービスはもう一つのパスワードチェックをはじめるでしょう。
")
</p>

<h3>
#langeng("
Answer-Checking Session
")
#langja("
応答チェックセッション
")
</h3>

<p>
#langeng("
Checking the received answer to a given question is essentially the
same as password-checking, and the session type #stacode("ss_answer_try")
is for classifying such a session is given as follows:
")
#langja("
受信した与えらえた質問への応答をチェックするのは、本質的にパスワードチェックと同じです。
セッション型 #stacode("ss_answer_try") は次のようなセッションです:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef
ss_answer =
chrcv(int)::chsnd(bool)::chnil
typedef
ss_answer_try = ssrepeat_disj(ss_answer)
')</pre>

#langeng("
Like password-checking, the server may request the user to send another
answer if the current given answer is incorrect.
")
#langja("
パスワードチェックのように、もし現状の応答が正しくない場合サーバは別の応答を送信するようにユーザに要請します。
")
</p>


<h3>
#langeng("
Session for a Single Test
")
#langja("
1つのテストを表わすセッション
")
</h3>

<p>
#langeng("
The session type for a single round of test is given as follows:
")
#langja("
一度のテスト試行を表わすセッション型は次のようになります:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef
ss_test_one =
chsnd(int)::chsnd(int)::ss_answer_try
')</pre>

#langeng("
Essentially, the server sends two integers (generated randomly) to the
client and then enters the answer-checking session described above.
")
#langja("
本質的に、このサーバは (ランダムに生成された) 2つの整数をクライアントに送信し、それから上記で説明した応答チェックセッションに入ります。
")
</p>

<h3>
#langeng("
Session for Repeated Tests
")
#langja("
繰り返されたテストを表わすセッション
")
</h3>

<p>
#langeng("
The session type for repeated rounds of tests is given as follows:
")
#langja("
テスト試行の繰り返しを表わすセッション型は次のようになります:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef
ss_test_loop = ssrepeat_conj(ss_test_one)
')</pre>

#langeng("
Notice that the client decides wether a fresh round of test should
take place.
")
#langja("
このクライアントはフレッシュなテスト試行が行なわれなければならないことを表わしていることに注意してください。
")
</p>

<h3>
#langeng("
Session for Multiplication Test
")
#langja("
乗算テストのセッション
")
</h3>

<p>
#langeng("
Finally, the session type #stacode("ss_multest") for the overall session
is given as follows:
")
#langja("
最後に、全体のセッションを表わすセッション型 #stacode("ss_multest") は次のようになります:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef
ss_multest =
ssappend(ss_login, ss_test_loop_opt)
')</pre>

#langeng("
where the session type #stacode("ss_test_loop_opt") (for a server-optional
session) is given below:
")
#langja("
このとき、(オプショナルなサーバセッションを表わす) セッション型 #stacode("ss_test_loop_opt") は以下のようになります:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
typedef
ss_test_loop_opt = ssoption_disj(ss_test_loop)
')</pre>

#langeng("
Essentially, the overall session starts with the login session
described above; whether the session for repeated tests follows
depends on whether the login session succeeds or fails.
")
#langja("
本質的に全体のセッションは上記で解説したログインセッションから開始します;
繰り返されたテストを表わすセッションが続くかどうかは、ログインセッションの成否に依存しています。
")
</p>

<h3>
Implementing State-carrying Sessions
</h3>

<p>
A state-carrying session carries a state represented as a (possibly
extensible) record with mutable fields, and the carried state is meant
to be updated during the execution of the session. Let us see a concrete
example given as follows:

<pre
class="patsyntax">
#pats2xhtml_dats('\
extern
fun
f_ss_pass
  (state: state)
: chanpos_session(ss_pass)
//
implement
f_ss_pass
  (state) = let
//
val
pass = ref{string}("")
//
fun
pass_check
(
  x: string
) : bool = passed where
{
//
val
passed = 
(
  if x = "multest" then true else false
) : bool
//
val ((*void*)) =
  if passed then state.pass_result(true)
//
} (* pass-check *)
//
typedef str = string
//
val ss1 =
  chanpos1_session_recv<str>(lam(x) => pass[] := x)
val ss2 =
  chanpos1_session_send<bool>(lam() => pass_check(pass[]))
//
in
  ss1 :: ss2 :: chanpos1_session_nil()
end // end of [f_ss_pass]
')</pre>

Applying to a state (which is just a reference to a record), the
function #dyncode("f_ss_pass") returns a state-carrying server-session
classified by the session type #stacode("ss_pass").  Note that
#dyncode("pass_check") sets the field #dyncode("pass_result") of the
carried state to #dyncode("true") if the received password passes
checking.
</p>

<p>
The following function #dyncode("f_ss_pass_try") builds on the top of #dyncode("f_ss_pass"):

<pre
class="patsyntax">
#pats2xhtml_dats('\
extern
fun
f_ss_pass_try
  (state: state)
: chanpos_session(ss_pass_try)
implement
f_ss_pass_try
  (state) = let
//
val mtry = 3
val ntry = ref{int}(0)
//
val ((*void*)) =
  state.pass_result(false)
//
implement
chanpos1_repeat_disj$choose<>() = let
  val n0 = ntry[]
  val () = ntry[] := n0 + 1
in
//
if state.pass_result()
  then 0 else (if (n0 >= mtry) then 0 else 1)
//
end // end of [chanpos1_repeat_disj$choose]
//
in
  chanpos1_session_repeat_disj(f_ss_pass(state))
end // end of [f_ss_pass_try]
')</pre>

The session returned by a call to #dyncode("f_ss_pass_try") allows the
client to try at most 3 times to supply a valid password. Note that
the function template #dyncode("chanpos1_repeat_disj$choose") is
called inside the session combinator
#dyncode("chanpos1_session_repeat_disj") to determine whether the given
session needs to be repeated.
</p>


<p>
The entire code for this <a href="./multest.html">demo</a> can be found
in four files of the following names:

<pre>
multest.html
multest_prctl.sats // protocol
multest_client.dats // client-session
multest_server.dats // server-session
</pre>

The implementation of server-session in
#filename("multest_server.dats") is largely straightforward while the
implementation of client-session in #filename("multest_client.dats")
is more involved due to the need for handling certain GUI issues.  For
those interested in studying session types and session combinators
in more depth, the following links should be helpful:

<ul>
<li>
<a href="https://github.com/githwxi/ATS-Postiats-contrib/tree/master/contrib/libatscc/libatscc2js/SATS/Worker">Interface</a>
</li>
<li>
<a href="https://github.com/githwxi/ATS-Postiats-contrib/tree/master/contrib/libatscc/libatscc2js/DATS/Worker">Implementation</a>
</li>
</ul>

Naturally, one should expect that session combinators can be further lifted to higher forms of
combinators (e.g., those for combining services together conveniently).

</p>

<hr size="2">

#langeng("
This article is written by <a href=\"http://www.cs.bu.edu/~hwxi/\">Hongwei Xi</a>.
")
#langja("
この記事は
<a href=\"http://www.cs.bu.edu/~hwxi/\">Hongwei Xi</a>
によって書かれ、
<a href=\"http://jats-ug.metasepi.org/\">Japan ATS User Group</a>
によって翻訳されています。
")

</body>
</html>

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
