%{
#include "./../ATEXT/atextfun.hats"
%}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
#langeng("
<title>EFFECTIVATS-file-copying</title>
")
#langja("
<title>EFFECTIVATS: ファイルコピー</title>
")
#patscode_style()
</head>

<body>

<h1>
#langeng("
Effective ATS: Copying Files
")
#langja("
Effective ATS: ファイルコピー
")
</h1>

#langeng("
While the task of copying files is conceptually simple, it can still be
quite interesting to implement it in ATS.
")
#langja("
ファイルコピーは概念的には単純ですが、にもかかわらず ATS
で実装するのは実際興味深いかもしれません。
")

<h2>
#langeng("
Attempt One
")
#langja("
最初の試み
")
</h2>

#langeng("
In order to copy the content of one file into another, we need a means to
refer to the involved files. In Linux, the notion of file descriptor serves
precisely this purpose. Although we know that a file descriptor is
represented as an integer, it seems appropriate to make it abstract as is
done in the following declaration:
")
#langja("
1つのファイルの内容物を別のファイルにコピーするために、関連するファイル群を参照する手段が必要になります。
Linux では、ファイルディスクリプタの概念がこの目的のために役立ちます。
私達はファイルディスクリプタが整数で表現されることを知っていますが、次のような宣言でそれを抽象化するのは適切でしょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
abst@ype fildes = int
")</pre>

#langeng("
Often it is a good practice to give a name to an abstract type that is
less likely to cause collision and then introduce a short alias for the name.
For instance, the following declarations demonstrate such a practice:
")
#langja("
抽象型に衝突を引き起こしそうにない名前をつけるのはしばしば良い習慣です。
そしてその名前に短かい別名を導入するのです。
例えば、次の宣言はそのような習慣を示しています:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
abst@ype fildes_t0ype = int
stadef fildes: t@ype = fildes_t0ype
")</pre>

#langeng("
My naming convention uses the special identifier [t0ype] to indicate
a type of the sort t@ype, that is, a type of unknown size. Note that
the stadef-declaration can also be replaced with the following one:
")
#langja("
私の命名規約では、種 t@ype の型、すなわちサイズが不明な型を表わすのに特殊な識別子 [t0ype] を使います。
stadef 宣言は次のようにも置き換え可能であることに注意してください:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
typedef fildes = fildes_t0ype
")</pre>

#langeng("
Now let us name the file-copying function [fcopy1] and give it
the following interface:
")
#langja("
さて、ファイルコピー関数を [fcopy1] と名付けて、次のインターフェイスを与えましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
fun fcopy1 (src: fildes, dst: fildes): void
")</pre>

#langeng("
How should we implement [fcopy1]? For the moment, let us try to answer this
question in a somewhat abstract manner.
")
#langja("
[fcopy1] をどのように実装すべきでしょうか？
差し当たり、幾分抽象的な作法でこの問に答えることにしましょう。
")

<p>

#langeng("
Clearly, we should be able to read chars from [src] and also write chars
into [dst]. So let us assume that the following two functions are available
for use:
")
#langja("
[src] から文字を読み出し、[dst] へ文字を書き込めるべきであることは明確です。
そこで、次の2つの関数が使えると仮定しましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
fun readch (src: fildes): char
fun writech (src: fildes, c: char): void
")</pre>

#langeng("
There is yet one more thing: We should be able to tell whether we have
finished reading all the chars from a given file. One simple way to do
this is to require that [readch] return a special value to indicate the
end of a file being reached. For this purpose, we modify the interface
of [readch] as follows:
")
#langja("
またもう一つあります:
与えられたファイルから全ての文字を読み終わったかどうか分からなければなりません。
簡単な方法は、[readch] がファイルの最後に達したことを示す特別な値を返すようにすることです。
この目的のために、[readch] のインターフェイスを次のように修正します:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
fun readch (src: fildes): int
")</pre>

#langeng("
We use natural numbers, that is, non-negative integers for valid chars and
a negative integer (e.g., -1) for the special value (indicating that the
end of [src] is reached). We can now readily implement [fcopy1] as follows:
")
#langja("
非負の整数は有効な文字を、負の整数 (例えば -1) は
([src] の最後に達したことを示す) 特別な値とします。
これで [fcopy1] を次のようにたやすく実装することができます:
")

<pre
class="patsyntax">
#pats2xhtml_dats("\
implement
fcopy1 (src, dst) = let
  val c = readch (src)
in
//
if c >= 0 then
  (writech (dst, c); fcopy1 (src, dst))
// end of [if]
//
end (* end of [fcopy1] *)
")</pre>

#langeng("
At this point, the obviously question is: How can functions [readch] and
[writech] be implemented? They can be implemented based on the system calls
[read] and [write]. Please find a completed running implementation of
file-copying based on [fcopy1] in fcopy1.dats, where [readch] and [writech]
are implemented in C directly.
")
#langja("
ここで当然次のような疑問がわくでしょう:
関数 [readch] と [writech] はどうすれば実装できるでしょうか？
それらはシステムコール [read] と [write] に基づいて実装できます。
[fcopy1] に基づいたファイルコピーの実行可能な実装は fcopy1.dats から入手できます。
このとき [readch] と [writech] はC言語で直接実装されています。
")

<p>

#langeng("
Of course, there is a lot of criticism that can be laid upon the above
implementation of file-copying. For instance, it is terribly inefficient;
it does not support any error-handling at all; etc. I will attempt to
address these issues in the following presentation. However, one thing that
is extremely positive about this implementation is the introduction of
functions [readch] and [writech], which adds a layer to shield system calls
[read] and [write] from being used directly. This is a programming style I
would recommend highly and repeatedly. What seems really unfortunate to me
is that popular books on systems programming
(e.g.
<a href=\"http://www.apuebook.com/\">APUE</a>
) often do very little, if at all, to advocate this very useful programming style!
")
#langja("
もちろん、上記のファイルコピー実装には多くの批判があるでしょう。
例えば、エラー処理のようなものを全くサポートしないため、ほとんど役に立ちません。
これらの課題については次の試みで解決しようと思います。
けれども、この実装において建設的だったのは関数 [readch] と [writech] を導入したことです。
これらの関数はシステムコール [read] と [write] を直接使うことを防ぐレイヤーになっています。
このプログラミングスタイルを私は何度も繰り返し強く提言してきました。
私にとって非常に残念なことですが、たとえシステムプログラミングに関する著名な本
(例:
<a href=\"http://www.apuebook.com/\">APUE</a>
)
がこの有用なプログラミングスタイルを推奨していなかったとしてもです!
")

<h2>
#langeng("
Attempt Two
")
#langja("
2番目の試み
")
</h2>

#langeng("
Obviously, [fcopy1] is very inefficient for copying files as it calls
[read] and [write] each time to read and write only one char, respectively.
If multiple chars are to be read at once, then a buffer (that is, some
memory) must be made available to store them. As it is largely
straightforward to handle only cases where such a buffer is statically
allocated, I will focus on a solution that can also cope with dynamically
allocated buffers.

Let us first introduce an abstract type for buffers:
")
#langja("
[fcopy1] は [read] と [write] をそれぞれいちいち1文字ずつ読み書きするファイルコピーであるために、全く役に立たないことは明確です。
もし一度に複数文字読み出すのあれば、それらを保管するためのバッファ (つまりなんらかのメモリ) が必要になります。
そのようなバッファを静的に確保する場合のみを使うことはとても簡単なので、動的に確保されたバッファも扱えるような解決策にに集中することにします。

はじめにバッファを表わす抽象型を導入しましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
absvtype buffer_vtype = ptr
vtypedef buffer = buffer_vtype
")</pre>

#langeng("
Actually, [buffer_vtype] is introduced as a viewtype, that is, a linear
type, and the following functions are for creating and destroying a buffer,
respectively:
")
#langja("
[buffer_vtype] が viewtype、つまり線形型として導入されています。
そして次はそれぞれバッファを生成/削除するための関数です:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
fun buffer_create (m: size_t): buffer
fun buffer_destroy (buf: buffer): void
")</pre>

#langeng("
As we also need to test whether a buffer contains any data or not, let us
introduce the following function for this purpose:
")
#langja("
また、バッファがデータを含むか否か検査する必要があります。
この目的のために次の関数を導入しましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
fun buffer_isnot_empty (buf: !buffer): bool
")</pre>

#langeng("
In addition, let us use the names [readbuf] and [writebuf] for functions
reading and writing multiple chars, respectively, and assign to them the
following types:
")
#langja("
さらに、[readbuf] と [writebuf]
をそれぞれ複数文字を読み書きする関数として作り、それらに次の型を割り当てましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
fun readbuf (src: fildes, buf: !buffer): void
fun writebuf (dst: fildes, buf: !buffer): void
")</pre>

#langeng("
Let [fcopy2] be given the same interface as [fcopy1].  The following code
gives a straightforward implementation of [fcopy2] based on [readbuf] and
[writebuf]:
")
#langja("
[fcopy2] には [fcopy1] と同じインターフェイスを与えることにしましょう。
次のコードは [readbuf] と [writebuf] を用いた [fcopy2] の率直な実装です:
")

<pre
class="patsyntax">
#pats2xhtml_dats("\
implement
fcopy2 (src, dst) = let
//
fun loop
(
  src: fildes, dst: fildes, buf: !buffer
) : void = let
  val () = readbuf (src, buf)
  val isnot = buffer_isnot_empty (buf)
in
  if isnot then let
    val () = writebuf (dst, buf) in loop (src, dst, buf)
  end else () // end of [if]
//
end // end of [loop]
//
val buf =
  buffer_create (i2sz(BUFSZ))
val () = loop (src, dst, buf)
val () = buffer_destroy (buf)
//
in
  // nothing
end (* end of [fcopy2] *)
")</pre>

#langeng("
Note that [BUFSZ] is a compile-time integer constant and [i2sz] is a
cast-function for casting an integer of the type [int] to one of the type
[size_t].  Please find the code of a completed running implementation of
file-copying based on [fcopy2] in fcopy2.dats, where [readbuf] and
[writebuf] are implemented in C directly.
")
#langja("
[BUFSZ] はコンパイル時定数の整数、[i2sz] は型 [int] の整数から [size_t]
の値へのキャスト関数であることに注意してください。
[fcopy2] を用いたファイルコピーの実行可能な実装は fcopy2.dats から入手できます。
このとき [readbuf] と [writebuf] はC言語で直接実装されています。
")

<h2>
3番目の試み
</h2>

#langeng("
While the inefficiency of [fcopy1] is addressed in the implementation of
[fcopy2], the absence of error-handling is not. I now give another
implementation of file-copying and address the issue of error-handling in
this implementation.
")
#langja("
[fcopy1] の非能率は [fcopy2] の実装で解決されましたが、エラー処理がありません。
この試みでは、ファイルコピーに別の実装を与えることで、エラー処理の問題を解決します。
")

<p>

#langeng("
Clearly, a call to [read] or [write] can fail due to a variety of reasons.
If such a failure occurs, we should probably stop file-copying and report
an error. Let us introduce another file-copying function [fcopy3] as follows:
")
#langja("
[read] もしくは [write] の呼び出しは様々な要因で失敗する可能性があることは明白です。
もしそのような失敗が起きたら、おそらくファイルコピーを停止してエラー報告をすべきでしょう。
次のような別のファイルコピー関数 [fcopy3] を導入してみましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
fun fcopy3 (src: fildes, dst: fildes, nerr: &int): void
")</pre>

#langeng("
The third argument [nerr] of [fcopy3] is a call-by-reference integer. In
other words, what is passed as the third argument of [fcopy3] is the
address of a left-value. If an error caused by [read] or [write] occurs
during file-copying, then the value of the integer stored in [nerr] should
be increased. To achieve this, we can modify the types of [readbuf] and
[writebuf] as follows:
")
#langja("
[fcopy3] の3番目の引数 [nerr] は参照渡し (call-by-reference) の整数です。
別の言い方をすると、[fcopy3] の 3番目の引数として渡されるのは、左辺値のアドレスです。
もしファイルコピーの最中に [read] もしくは [write]
に起因するエラーが発生したら、[nerr] に保管されている整数値を増やすべきです。
これを実現するために、[readbuf] と [writebuf] の方を次のように変更します:
")

<pre
class="patsyntax">
#pats2xhtml_sats("\
fun readbuf (src: fildes, buf: !buffer, nerr: &int): void
fun writebuf (dst: fildes, buf: !buffer, nerr: &int): void
")</pre>

#langeng("
The function [readbuf] calls [read]; if this call reports an error, then
[readbuf] should increase the value of the integer stored in its third
argument. The function [writebuf] does the same with [write].  The
following code gives an implementation of [fcopy3] similar to that of
[fcopy2]:
")
#langja("
関数 [readbuf] が [read] を呼び出すと;
もしこの呼び出しがエラーを報告したら、[readbuf] はその3番目の引数に保管されている整数値を増やします。
関数 [writebuf] も [write] について同じ動作をします。
次のコードは [fcopy2] と同じように [fcopy3] を実装しています:
")

<pre
class="patsyntax">
#pats2xhtml_dats("\
implement
fcopy3 (src, dst, nerr) = let
//
fun loop
(
  src: fildes, dst: fildes, buf: !buffer, nerr: &int
) : void = let
  val nerr0 = nerr
  val () = readbuf (src, buf, nerr)
  val isnot = buffer_isnot_empty (buf)
in
  if isnot then let
    val () = writebuf (dst, buf, nerr)
  in
    if nerr = nerr0 then loop (src, dst, buf, nerr) else ((*error*))
  end else () // end of [if]
//
end // end of [loop]
//
val buf = buffer_create (i2sz(BUFSZ))
val ((*void*)) = loop (src, dst, buf, nerr)
val ((*void*)) = buffer_destroy (buf)
//
in
  // nothing
end (* end of [fcopy3] *)
")</pre>

#langeng("
Note that the loop function exits whenever an error due to [read] or
[write] is reported.  Please find the code of a completed running
implementation of file-copying based on [fcopy3] in fcopy3.dats, where
[readbuf] and [writebuf] are implemented in C directly.
")
#langja("
[read] もしくは [write] に起因するエラーが報告されると
loop 関数が終了することに注意してください。
[fcopy3] を用いたファイルコピーの実行可能な実装は fcopy3.dats から入手できます。
このとき [readbuf] と [writebuf] はC言語で直接実装されています。
")

<hr size="2">

#langeng("
This article is written by
<a href=\"http://www.cs.bu.edu/~hwxi/\">Hongwei Xi</a>.
")
#langja("
この記事は
<a href=\"http://www.cs.bu.edu/~hwxi/\">Hongwei Xi</a>
によって書かれ、
<a href=\"http://jats-ug.metasepi.org/\">Japan ATS User Group</a>
によって翻訳されています。
")

</body>
</html>

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
