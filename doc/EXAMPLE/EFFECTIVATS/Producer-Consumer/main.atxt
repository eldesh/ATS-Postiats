%{
#include "./../ATEXT/atextfun.hats"
%}

<!DOCTYPE html>
<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
#langeng("
<title>EFFECTIVATS-Producer-Consumer</title>
")
#langja("
<title>EFFECTIVATS: 生産者/消費者問題</title>
")
#patscode_style()
#patspage_style()
</head>

<body>

<h1>
#langeng("
Effective ATS:<br>
Producer-Consumer
")
#langja("
Effective ATS:<br>
生産者/消費者問題
")
</h1>

#langeng("
The Producer-Consumer problem is a classical one in concurrent programming.
In this article, I present an implementation of this problem that makes
highly effective use of dependent types and linear types.  Due to great
difficulty in debugging concurrent programs, relying on static checking to
detect and fix bugs is of much more significance in concurrent programing
than in sequential programming.  While the style of programming I employ
here may take time for one to master, the great advantages it brings can be
readily appreciated. In general, ATS shines much more brightly in contexts
where dynamic testing becomes more difficult to perform and/or control.
")
#langja("
生産者/消費者問題は並行プログラミングにおける古典的な問題です。
この記事では、依存型と線形型を効果的に使った、この問題に対する実装を紹介しようと思います。
並行プログラムをデバッグすることがとてつもなく困難なため、バグの検出と修正を静的な検査に頼ることは、逐次実行プログラミングよりも並行プログラミングにおいてさらに重要になります。
ここで紹介するプログラミングのスタイルは習得するのに時間がかかるかもしれませんが、その大きな利点はすぐに評価できるでしょう。
一般的に、動的なテストが難しい文脈において、ATS はより異彩を放っています。
")

<h2>
#langeng("
Description of the Problem 
")
#langja("
この問題についての解説
")
</h2>

#langeng("
Given a buffer of finite capacity, there are multiple producers who insert
items into the buffer and also multiple consumers who take out items from
the buffer. If a producer wants to insert an item but the buffer is full,
the producer is blocked until the buffer becomes not full. If a consumer
wants to take out an item but the buffer is empty, then the consumer is
blocked until the buffer is not empty.
")
#langja("
有限容量のバッファが与えられたとき、そのバッファに要素を挿入する複数の生産者と、そのバッファから要素を取り出す複数の消費者がいます。
もし生産者が要素を挿入しようとしたけれどバッファが満杯であったなら、バッファが満杯でなくなるまでその生産者はブロックします。
もし消費者が要素を取り出そうとしたけれどバッファが空であったなら、バッファが空でなくなるまでその消費者はブロックします。
")

<h2>
#langeng("
Interface for Linear Buffer
")
#langja("
線形バッファのインターフェイス
")
</h2>

#langeng("
Let us first declare as follows a linear abstract type for buffers:
")
#langja("
はじめに次のようにバッファを表わす線形抽象型を宣言しましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
absvtype
buffer_vtype (a:vt@ype+, m:int, n: int) = ptr
//
vtypedef
buffer (a:vt0p) = [m,n:int] buffer_vtype (a, m, n)
vtypedef
buffer (a:vt0p, m:int, n:int) = buffer_vtype (a, m, n)
//
')</pre>

#langeng("
Given a type T and two integers M and N, the type [buffer(T, M, N)] is for
a buffer of capacity M in which N elements of the type T are stored.  The
following lemma can be used to establish the property that M >= N and N >=
0 (for the purpose of constraint-solving):
")
#langja("
型 T と2つの整数 M, N が与えられたとき、型 [buffer(T, M, N)]
は型 T の要素が N 個保存された容量 M のバッファを表わします。
次の補題 (lemma) は (制約解決を目的として) M >= N かつ N >= 0
という特性を成立させるために使うことができます:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
praxi
lemma_buffer_param{a:vt0p}
  {m,n:int}(!buffer (INV(a), m, n)): [m >= n; n >= 0] void
')</pre>

#langeng("
The function [buffer_make_nil] can be called to create a linear buffer of a
given capacity that contains no elements:
")
#langja("
関数 [buffer_make_nil] は要素を含まない与えられた容量の線形バッファを生成することができます:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun{a:vt0p}
buffer_make_nil{m:pos} (cap: int m): buffer (a, m, 0)
')</pre>

#langeng("
The functions [buffer_isnil] and [buffer_isful] can be called to test
whether a given buffer is empty and full, respectively:
")
#langja("
関数 [buffer_isnil] と [buffer_isful] は与えられたバッファがそれぞれ空なのか、満杯なのかを判定できます:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun buffer_isnil{a:vt0p}
  {m,n:int} (!buffer (INV(a), m, n)): bool (n==0)
fun buffer_isful{a:vt0p}
  {m,n:int} (!buffer (INV(a), m, n)): bool (m==n)
')</pre>

#langeng("
The function [buffer_insert] is for inserting an element into
a buffer that is not full:
")
#langja("
関数 [buffer_insert] は満杯でないバッファに要素を挿入します:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun{a:vt0p}
buffer_insert{m,n:int | n < m}
(
  !buffer (INV(a), m, n) >> buffer (a, m, n+1), x: a
) : void // end of [buffer_insert]
')</pre>

#langeng("
The function [buffer_insert] is for taking out an element from
a buffer that is not empty:
")
#langja("
関数 [buffer_takeout] は空でないバッファから要素を取り出します:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun{a:vt0p}
buffer_takeout{m,n:int | n > 0}
  (buf: !buffer (INV(a), m, n) >> buffer (a, m, n-1)): (a)
')</pre>

<h2>
#langeng("
Interface for Shared Buffer
")
#langja("
共有バッファのインターフェイス
")
</h2>

#langeng("
In terms of implementation, a shared buffer wraps a protection mechanism
around a linear buffer that consists of a mutex and two conditional
variables. The mutex is for protecting the linear buffer and the
conditional variables are introduced to avoid busy-waiting. I will present
more details on the protection mechanism later.
")
#langja("
実装の観点から、共有バッファは保護メカニズムで線形バッファを包みます。
このメカニズムは1つの mutex と2つの条件変数から成り立っています。
この mutex は線形バッファを保護するために、この条件変数はビジーウェイトを回避するために導入されています。
この保護メカニズムについて後でより詳細に説明します。
")

<p>

#langeng("
Let us now introduce an abstract type for shared buffers:
")
#langja("
ここで、共有バッファを表わす抽象型を導入してみましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
abstype
sbuffer_type (a:vt@ype) = ptr
//
typedef sbuffer (a:vt0p) = sbuffer_type (a)
//
')</pre>

#langeng("
Please note that [sbuffer] is a non-linear type. This means that a shared
buffer cannot be freed explicitly after its creation. It is also possible
to make [sbuffer] a reference-counted linear type so that a shared buffer
can be freed. The interested reader is encouraged to give this alternative
design a try, which should only lead to slightly more involved implementation.
")
#langja("
[sbuffer] は非線形の型であることに注意してください。
これは、共有バッファは生成された後では明示的に解放することができないことを意味しています。
共有バッファを解放できるように、参照カウントの線形型で [sbuffer] を作ることも可能です。
興味のある読者にはこの別設計に挑戦してみることをおすすめします。
これはわずかに複雑な実装になるはずです。
")

<p>

#langeng("
Given a linear buffer, [sbuffer_make_buffer] turns it into a shared buffer
(by wrapping a protection mechanism around it):
")
#langja("
線形バッファが与えられたとき、[sbuffer_make_buffer] は
(保護メカニズムで包むことで) それを共有バッファに変えます:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun{a:vt0p}
sbuffer_make_buffer (buffer(a)): sbuffer (a)
')</pre>

#langeng("
The function [sbuffer_insert] inserts an element into
a shared buffer:
")
#langja("
関数 [sbuffer_insert] は共有バッファへ要素を挿入にします:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun{a:vt0p}
sbuffer_insert (sbuffer(a), x: a): void // called by producer
')</pre>

#langeng("
Note that a call to [sbuffer_insert] may be blocked due to the linear
buffer inside the shared buffer being full.
")
#langja("
[sbuffer_insert] 呼び出しは、共有バッファ中の線形バッファが満杯であるためにブロックする可能性があることに注意してください。
")

<p>

#langeng("
The function [sbuffer_takeout] takes out an element from
a shared buffer:
")
#langja("
関数 [sbuffer_takeout] は共有バッファから要素を取り出します:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun{a:vt0p}
sbuffer_takeout (sbuf: sbuffer(a)): (a) // called by consumer
')</pre>

#langeng("
Note that a call to [sbuffer_takeout] may be blocked due to the linear
buffer inside the shared buffer being empty.
")
#langja("
[sbuffer_takeout] 呼び出しは、共有バッファ中の線形バッファが空であるためにブロックする可能性があることに注意してください。
")

<h2>
#langeng("
Implementation of Shared Buffer
")
#langja("
共有バッファの実装
")
</h2>

#langeng("
The linear buffer inside a shared buffer is protected by a mutex.
")
#langja("
共有バッファ中の線形バッファは mutex によって保護されています。
")

<p>

#langeng("
The function [sbuffer_acquire] is for acquiring the linear buffer inside a
given shared buffer:
")
#langja("
関数 [sbuffer_acquire] は与えられた共有バッファ中の線形バッファを獲得します:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun sbuffer_acquire{a:vt0p} (sbuf: sbuffer(a)): buffer (a)
')</pre>

#langeng("
The function [sbuffer_release] is for releasing a linear buffer (to the
same shared buffer from which the linear buffer was previously acquired):
")
#langja("
関数 [sbuffer_release] は
(線形バッファを獲得したときと同じ共有バッファに)
線形バッファを手放します:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun
sbuffer_release{a:vt0p} (sbuf: sbuffer(a), buf: buffer(a)): void
')</pre>

#langeng("
Let us now declare two functions as follows:
")
#langja("
ここで、次のような2つの関数を宣言しましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun{a:vt0p}
sbuffer_insert2 (sbuffer(a), !buffer(INV(a)) >> _, x: a): void
fun{a:vt0p}
sbuffer_takeout2 (sbf: sbuffer(a), buf: !buffer (INV(a)) >> _): (a)
')</pre>

#langeng("
A call to the function [sbuffer_insert2] tries to insert an element into a
given linear buffer. In the case where the linear buffer is full, the
caller is blocked to wait on some conditional variable until it is notified
that the linear buffer is no longer full.
")
#langja("
関数 [sbuffer_insert2] を呼び出すと、与えられた線形バッファに要素を挿入しようと試みます。
線形バッファが満杯であった場合、線形バッファが満杯でなくなるまで条件変数を待ち合わせるために呼び出し元はブロックします。
")

<p>

#langeng("
A call to the function [sbuffer_takeout2] tries to take out an element from
a given linear buffer. In the case where the linear buffer is empty, the
caller is blocked to wait on some conditional variable until it is notified
that the linear buffer is no longer empty.
")
#langja("
関数 [sbuffer_takeout2] を呼び出すと、与えられた線形バッファから要素を取り出そうと試みます。
線形バッファが空であった場合、線形バッファが空でなくなるまで条件変数を待ち合わせるために呼び出し元はブロックします。
")

<p>

#langeng("
It is straightforward to implement [sbuffer_insert] and [sbuffer_takeout]
based on [sbuffer_insert2] and [sbuffer_takeout2], respectively:
")
#langja("
[sbuffer_insert] と [sbuffer_takeout] はそれぞれ [sbuffer_insert2] と [sbuffer_takeout2] を用いて素直に実装できます:
")

<pre
class="patsyntax">
#pats2xhtml_dats('\
implement{a}
sbuffer_insert (sbuf, x) =
{
  val buf = sbuffer_acquire (sbuf)
  val ((*void*)) = sbuffer_insert2 (sbuf, buf, x)
  val ((*void*)) = sbuffer_release (sbuf, buf)
}

implement{a}
sbuffer_takeout (sbuf) = x where
{
  val buf = sbuffer_acquire (sbuf)
  val x(*a*) = sbuffer_takeout2 (sbuf, buf)
  val ((*void*)) = sbuffer_release (sbuf, buf)
}
')</pre>

#langeng("
There are two conditional variables (CVs) inside a shared buffer.  One of
them is for handling the condition of the linear buffer (inside the shared
buffer) being empty, and the other CV is for handling the condition of the
linear buffer being full. The following functions are implemented directly
based on these two conditional variables:
")
#langja("
共有バッファの中には2つの条件変数があります。
それらの1つは (共有バッファ中の) 線形バッファが空である条件を扱うためのものです。
もう1つは線形バッファが満杯である条件を扱うためのものです。
次の関数群はこれら2つの条件変数を直接用いて実装されています:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
//
fun
sbuffer_wait_isnil
  {a:vt0p}{m:int}
  (sbuffer(a), !buffer(a, m, 0) >> buffer(a)): void
fun
sbuffer_signal_isnil{a:vt0p}{m,n:int} (sbuf: sbuffer(a)): void
//
fun
sbuffer_wait_isful
  {a:vt0p}{m:int}
  (sbuffer(a), !buffer(a, m, m) >> buffer(a)): void
fun
sbuffer_signal_isful{a:vt0p}{m,n:int} (sbuf: sbuffer(a)): void
//
')</pre>

#langeng("
The type assigned to the function [sbuffer_wait_isnil] means that its
caller must have possession of a linear buffer when calling it and the
caller should still have possession of the linear buffer, which may be
empty, when the call returns. The reason for the linear buffer being still
empty at the moment when a call to [sbuffer_wait_isnil] returns is
that other callers (consumers) may have gained access to the linear buffer
earlier.
")
#langja("
関数 [sbuffer_wait_isnil] に割り当てられた型は、呼び出す時に呼び出し元が線形バッファの所有者でなければならないこと、呼び出しが返る時にやはりその呼び出し元が空の可能性がある線形バッファの所有者でなければならないこと、を意味しています。
[sbuffer_wait_isnil] 呼び出しが返る時にも線形バッファを所有すべき理由は、
他の呼び出し元 (消費者) がより早くその線形バッファへのアクセス権を獲得してしまう可能性があるためです。
")

<p>

#langeng("
The type assigned to the function [sbuffer_wait_isful] can be
explained similarly.
")
#langja("
関数 [sbuffer_wait_isful] に割り当てられた型も同様に説明できます。
")

<p>

<h4>
#langeng("
Implementing [sbuffer_insert2]
")
#langja("
[sbuffer_insert2] を実装する
")
</h4>

#langeng("
An implementation of [sbuffer_insert2] is given as follows:
")
#langja("
[sbuffer_insert2] の実装は次のようになります:
")

<pre
class="patsyntax">
#pats2xhtml_dats('\
implement{a}
sbuffer_insert2
  (sbuf, buf, x) = let
//
val isful = buffer_isful (buf)
//
prval () = lemma_buffer_param (buf)
//
in
//
if isful
  then let
    val () =
      sbuffer_wait_isful (sbuf, buf)
    // end of [val]
  in
    sbuffer_insert2 (sbuf, buf, x)
  end // end of [then]
  else let
    val isnil = buffer_isnil (buf)
    val ((*void*)) = buffer_insert (buf, x)
    val ((*void*)) = if isnil then sbuffer_signal_isnil (sbuf)
  in
    // nothing
  end // end of [else]
//  
end // end of [sbuffer_insert2]
')</pre>

#langeng("
The code should be self-explaining. Please note that inserting an element
into an empty buffer requires a signal to be sent to the CV handling the
condition of buffer being empty. If this is not done, then a deadlock may
occur as the consumers waiting on the CV can never be awakened.
")
#langja("
このコードは自明でしょう。
空のバッファに要素を挿入するには、バッファが空である条件を扱う条件変数にシグナルを送る必要があることに注意してください。
もしこれを行なわないと、決して起こされない条件変数をを待ち合わせる消費者によってデッドロックが発生する可能性があります。
")

<h4>
#langeng("
Implementing [sbuffer_takeout2]
")
#langja("
[sbuffer_takeout2] を実装する
")
</h4>

<pre
class="patsyntax">
#pats2xhtml_dats('\
implement{a}
sbuffer_takeout2
  (sbuf, buf) = let
//
val isnil = buffer_isnil (buf)
prval () = lemma_buffer_param (buf)
//
in
//
if isnil
  then let
    val () =
      sbuffer_wait_isnil (sbuf, buf)
    // end of [val]
  in
    sbuffer_takeout2 (sbuf, buf)
  end // end of [then]
  else x where
  {
    val isful = buffer_isful (buf)
    val x(*a*) = buffer_takeout (buf)
    val ((*void*)) = if isful then sbuffer_signal_isful (sbuf)
  } (* end of [else] *)
//  
end // end of [sbuffer_takeout2]
')</pre>

#langeng("
The code should be self-explaining. Please note that taking out an element
from a full buffer requires a signal to be sent to the CV handling the
condition of buffer being full. If this is not done, then a deadlock may
occur as the producers waiting on the CV can never be awakened.
")
#langja("
このコードも自明でしょう。
満杯のバッファから要素を取り出すには、バッファが満杯である条件を扱う条件変数にシグナルを送る必要があることに注意してください。
もしこれを行なわないと、決して起こされない条件変数をを待ち合わせる生産者によってデッドロックが発生する可能性があります。
")

<h4>
#langeng("
Summary of the Remaining Implementation
")
#langja("
残りの実装について
")
</h4>

#langeng("
The remaining implementation of the producer-consumer problem can be
readily done in C (based on pthread support for mutexes and conditional
variables). For instance, [sbuffer] can be represented as a pointer to
a value of the following struct type:
")
#langja("
生産者/消費者問題の残りの実装は
(pthread がサポートしている mutex と条件変数を用いて)
C言語によってすぐに作ることができます。
例えば、[sbuffer] は次の構造体型の値へのポインタとして表現できます:
")

<pre>
struct
{
  void *buffer ;
  mutex_t mutex ;
  cond_t CVisnil ;
  cond_t CVisful ;
}
</pre>

#langeng("
Instead of being coded in C directly, the rest of my implementation is also
written in ATS but it makes pervasive use of some unsafe programming
features. Please find the entirety of the code in the files sbuffer.sats
and sbuffer.dats. There is no testing code in my implementation as I feel
highly confident about its correctness. A primary reason for programming in
ATS is that one can make effective use of types in ATS so as to convince
oneself that his or her code should perform as expected. I feel that I have
done it in this case.
")
#langja("
直接C言語でコーディングする代わりに、私の実装の残りを ATS
で書くこともできますが、安全でないプログラミングの機能を全面的に使うことになります。
このコードの全体はファイル sbuffer.sats と sbuffer.dats から入手できます。
実装の正確さに自信があるので、私の実装にはテストコードがありません。
ATS でプログラミングをする主要な理由は、意図通りにコードが実行されるのか自分を納得させるために ATS の型を効果的に使えることです。
今回の場合はそれができたと感じています。
")

<h2>
#langeng("
Safe Programming with Shared Resources
")
#langja("
共有リソースを共なう安全なプログラミング
")
</h2>

#langeng("
In the rest of the article, I would like to outline a general approach
to safe programming with shared resources that can be seen as a generalization
of the implementation of the producer-consumer problem presented above.
")
#langja("
この記事の残りでは、上記で説明した生産者/消費者問題を一般化したような、共有リソースを共なう安全なプログラミングに対する一般的なアプローチの要点を説明しようと思います。
")

<p>

#langeng("
Suppose we have a linear type [Resource] for values that we want to share:
")
#langja("
共有しようとしている値のために線形型 [Resource] を想像してみましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
absvtype Resource
')</pre>

#langeng("
Let us introduce a (non-linear) type [SharedResource] for values that are
formed by wrapping some kind of protection mechnism around linear values of
the type [Resource]:
")
#langja("
なんらかの保護メカニズムで型 [Resource] の線形値を包んで作られる値のために (非線形な) 型 [SharedResource] を導入してみましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
abstype SharedResource
')</pre>

#langeng("
The function that does the wrapping can be given the following type:
")
#langja("
その包む行為をする関数は次のような型になるでしょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun SharedResource_create (R: Resource): SharedResource
')</pre>

#langeng("
The linear resource inside a shared resource is protected by a lock,
and the following two functions are for taking out the linear resource
and returning it back:
")
#langja("
共有リソースの中にある線形なリソースはロックによって保護されています。
そして次の2つは線形リソースを取り出す関数と、それを戻す関数です:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun SharedResource_acquire (SR: SharedResource): Resource
fun SharedResource_release (SR: SharedResource, R: Resource): void
')</pre>

#langeng("
Let us now assume that we have the following function for processing
a linear resource:
")
#langja("
ここで、線形リソースを処理する次の関数があると仮定してみましょう:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun Resource_process (R: !Resource >> _): bool
')</pre>

#langeng("
If a call to [Resource_process] returns true, then the resource has been
processed properly. Otherwise, it is an indication that the state of the
resource needs to be changed before it is suitable for processing.
")
#langja("
[Resource_process] 呼び出しが true を返したら、そのリソースは適切に処理されています。
そうでなければ、処理する前にそのリソースの状態を変更する必要があることを示していることになります。
")

<p>

#langeng("
What we want to implement is the following function:
")
#langja("
私達が実装したいのは次の関数です:
")

<pre
class="patsyntax">
#pats2xhtml_sats('\
fun SharedResource_process (SR: SharedResource): void
')</pre>

#langeng("
When called on a shared resource, [SharedResource_process] tries to process
the linear resource inside it by calling [Resource_process].
")
#langja("
共有リソースに対して呼び出されると、[SharedResource_process] は [Resource_process]
を呼び出して、その内にある線形リソースを処理しようと試みます。
")

<p>

#langeng("
An implementation of [SharedResource_process] is sketched as follows:
")
#langja("
[SharedResource_process] の実装は次のような概略になります:
")

<pre
class="patsyntax">
#pats2xhtml_dats('\
//
extern
fun
SharedResource_wait
  (SR: SharedResource, R: !Resource >> _): void
extern
fun
SharedResource_process2
  (SR: SharedResource, R: !Resource >> _): void
//
implement
SharedResource_process
  (SR) = () where
{
  val R = SharedResource_acquire (SR)
  val () = SharedResource_process2 (SR, R)
  val () = SharedResource_release (SR, R)
}
//
implement
SharedResource_process2
  (SR, R) = let
  val ans = Resource_process (R)
in
//
if ans
  then
  (
    // processing is done properly
    // there may be a need to send signals
    // to some conditional variables
  )
  else let
    val () =
      SharedResource_wait (SR, R)
    // end of [val]
  in
    SharedResource_process2 (SR, R)
  end // end of [else]
//
end // end of [SharedResource_process2]
//
')</pre>

#langeng("
A call to [SharedResource_wait] puts the caller on the waiting-list
of some conditional variable to avoid busy-waiting. Whenever the condition
needed for [Resource_process] to do proper processing is met, a signal should
be sent to the conditional variable (by another caller).
")
#langja("
[SharedResource_wait] 呼び出しは、ビジーウェイトを回避するなんらかの条件変数の待ち行列にその呼び出し元を置きます。
処理を行なう [Resource_process] に必要な条件が満たされた時はいつでも、その条件変数に
(別の呼び出し元によって) シグナルを送らねければなりません。
")

<p>

#langeng("
Please find in the file SharedResource.dats the entirety of the code
presented in this section.
")
#langja("
この記事で示したコードの全体はファイル SharedResource.dats から入手できます。
")

<hr size="2">

#langeng("
This article is written by
<a href=\"http://www.cs.bu.edu/~hwxi/\">Hongwei Xi</a>.
")
#langja("
この記事は
<a href=\"http://www.cs.bu.edu/~hwxi/\">Hongwei Xi</a>
によって書かれ、
<a href=\"http://jats-ug.metasepi.org/\">Japan ATS User Group</a>
によって翻訳されています。
")

#patspage_script()
</body>
</html>

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
