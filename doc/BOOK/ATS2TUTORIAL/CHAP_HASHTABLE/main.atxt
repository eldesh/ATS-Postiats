%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from CHAP_HASHTABLE/main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="hashtable">
#langeng("
#title("Persistent Hashtables")
")
#langja("
#title("永続化ハッシュテーブル")
")

#langeng("
#para("\

Hashtables are commonly used to implement finite maps. In ATSLIB/libats,
there are hashtable implementations based on linear chaining and linear
probing. There is also support for linear hashtables as well as persistent
hashtables. The linear ones can be safely freed by the programmer, and the
persistent ones (which are directly based on linear ones) can only be
safely reclaimed through garbage collection (GC). In this chapter, I show
how persistent hashtables can be created and operated on.\

")
")
#langja("
#para("\

ハッシュテーブルは有限写像の実装でよく使われます。
ATSLIB/libats には、linear chaining と linear probing を用いたハッシュテーブル実装があります。
永続化ハッシュテーブルだけでなく線形ハッシュテーブルのサポートもあります。
線形ハッシュテーブルはプログラマの手で安全に解放できます。
(線形ハッシュテーブルを用いた) 永続化ハッシュテーブルはガベージコレクション (GC) によって安全に回収されます。
この章では、永続化ハッシュテーブルの生成と操作方法を示します。\

")
")

#langeng("
#para("\

Suppose that a map is needed for mapping keys of type
#stacode("key_t") to items of type #stacode("itm_t"). The following code
essentially sets up an interface for creating and operating on such a map
based on a hashtable implementation in ATSLIB/libats:

#dats2xhtml('\
local

typedef
key = key_t and itm = itm_t

in (* in-of-local *)

\#include "libats/ML/HATS/myhashtblref.hats"

end // end of [local]
')

Please find #myatscodelink("libats/ML/HATS/myhashtblref.hats", "on-line")
the HATS file mentioned in the code, which is just a convenience wrapper
made to simplify programming with hashtables.

")#comment("para")
")
#langja("
#para("\

型 #stacode("key_t") のキーから型 #stacode("itm_t") の要素へマップする写像が必要だと考えます。
次のコードは本質的に、ATSLIB/libats でのハッシュテーブル実装を用いて、写像の生成と操作を表わすインターフェイスを作っています:

#dats2xhtml('\
local

typedef
key = key_t and itm = itm_t

in (* in-of-local *)

\#include "libats/ML/HATS/myhashtblref.hats"

end // end of [local]
')

ハッシュテーブルを用いたプログラミングを単純化するためのラッパーである HATS ファイルは
#myatscodelink("libats/ML/HATS/myhashtblref.hats", "オンライン")
から入手できます。

")#comment("para")
")

#langeng("
#para("\

Assume that #stacode("key_t") is #stacode("string") and #stacode("itm_t")
is #stacode("int"). The following line of code creates a hashtable with its
initial capacity set to be 1000:

#dats2xhtml('\
val mymap = myhashtbl_make_nil(1000)
')

Note that the capacity in this case is the size of the array associated
with the created hashtable. The underlying hashtable implementation is
based on linear chaining, and this hashtable can store up to 5000 (5*1000)
items without need for resizing. When resizing is indeed needed, it is done
automatically. The following few lines insert some key/item pairs into
#dyncode("mymap"):

#dats2xhtml('\
//
val-~None_vt() = mymap.insert("a", 0)
val-~Some_vt(0) = mymap.insert("a", 1)
//
val-~None_vt() = mymap.insert("b", 1)
val-~Some_vt(1) = mymap.insert("b", 2)
//
val-~None_vt() = mymap.insert("c", 2)
val-~Some_vt(2) = mymap.insert("c", 3)
//
')

The dot-symbol #dyncode(".insert") is overloaded with a function of the
name #dyncode("myhashtbl_insert"). Given a key and an item,
#dyncode("mymap.insert") inserts the key/item pair into #dyncode("mymap").
If the key is in the domain of the map represented by #dyncode("mymap")
before insertion, then the original item associated with the key is
returned. Otherwise, no item is returned. As can be expected, the size
of #dyncode("mymap") is 3 at this point:

#dats2xhtml('\
val () = assertloc (mymap.size() = 3)
')

The dot-symbol #dyncode(".size") is overloaded with a function of the name
#dyncode("myhashtbl_get_size"), which returns the number of key/item pairs
stored in a given hashtable.  During the course of debugging, one may want
to print out the key/item pairs in a given hashtable:

#dats2xhtml('\
//
val () =
  fprintln! (stdout_ref, "mymap = ", mymap)
//
')

where the symbol #dyncode("fprint") is overloaded with
#dyncode("fprint_myhashtbl"). The next two lines of code show how search
with a given key operates on a hashtable:

#dats2xhtml('\
val-~None_vt() = mymap.search("")
val-~Some_vt(1) = mymap.search("a")
')

The dot-symbol #dyncode(".search") is overloaded with a function of the
name #dyncode("myhashtbl_search"), which returns the item associated with a
given key if it is found. The next few lines of code remove some key/item
pairs from #dyncode("mymap"):

#dats2xhtml('\
//
val-true = mymap.remove("a")
val-false = mymap.remove("a")
//
val-~Some_vt(2) = mymap.takeout("b")
val-~Some_vt(3) = mymap.takeout("c")
//
')

The dot-symbol #dyncode(".remove") is overloaded with a function of the
name #dyncode("myhashtbl_remove") for removing a key/item pair of a given
key. If a key/item pair is removed, then the function returns
true. Otherwise, it returns false to indicates that no key/item pair of the
given key is stored in the hashtable being operated on.  The dot-symbol
#dyncode(".takeout") is overloaded with a function of the name
#dyncode("myhashtbl_takeout"), which is similar to
#dyncode("myhashtbl_remove") excepting for returning the removed item.
The next few lines of code make use of several less commonly used functions
on hashtables:

#dats2xhtml('\
//
val () = mymap.insert_any("a", 0)
val () = mymap.insert_any("b", 1)
val () = mymap.insert_any("c", 2)
val kxs = mymap.listize1((*void*))
val ((*void*)) = fprintln! (stdout_ref, "kxs = ", kxs)
val kxs = mymap.takeout_all((*void*))
val ((*void*)) = fprintln! (stdout_ref, "kxs = ", kxs)
//
val () = assertloc (mymap.size() = 0)
//
')

The dot-symbol #dyncode(".insert_any") is overloaded with a function of the
name #dyncode("myhashtbl_insert_any"), which #emphasis("always") inserts a
given key/item pair regardless whether the key is already in use. One
should really avoid using this function or only call it when it is
absolutely sure that the given key is not already in use for otherwise the
involved hashtable would be corrupted.  The dot-symbols
#dyncode(".listize1") and #dyncode(".takeout_all") are overloaded with two
functions of the names #dyncode("myhashtbl_listize1") and
#dyncode("myhashtbl_takeout_all"), respectively. Both of them return a list
consisting of all the key/item pairs in a given hashtable; the former keeps
the hashtable unchanged while the latter empties it. Last, I present as follows the
interface for an iterator going over all the key/item pairs in a given hashtable:

#dats2xhtml('\
//
extern
fun
myhashtbl_foreach_cloref
(
  tbl: myhashtbl
, fwork: (key, &(itm) >> _) -<cloref1> void
) : void // end-of-function
//
')

As an example, the following code prints out all the key/item
pairs in a given hashtable:

#dats2xhtml('\
//
val () =
myhashtbl_foreach_cloref
(
  mymap
, lam (k, x) => fprintln! (stdout_ref, "k=", k, " and ", "x=", x)
) (* myhashtbl_foreach_cloref *)
//
')

")
")
#langja("
#para("\

#stacode("key_t") は #stacode("string")、 #stacode("itm_t") は #stacode("int") であると仮定します。
次のコードの行は初期容量が 1000 のハッシュテーブルを生成しています:

#dats2xhtml('\
val mymap = myhashtbl_make_nil(1000)
')

この場合の容量とは、生成されたハッシュテーブルに関連する配列のサイズであることに注意してください。
ハッシュテーブル実装の根底は linear chaining に基づいていて、このハッシュテーブルは
5000 (5*1000) 要素までリサイズなしに格納できます。
実際にリサイズが必要な場合も、自動的に行なわれます。
次の数行では、いくつかのキー/要素ペアを #dyncode("mymap") に挿入します:

#dats2xhtml('\
//
val-~None_vt() = mymap.insert("a", 0)
val-~Some_vt(0) = mymap.insert("a", 1)
//
val-~None_vt() = mymap.insert("b", 1)
val-~Some_vt(1) = mymap.insert("b", 2)
//
val-~None_vt() = mymap.insert("c", 2)
val-~Some_vt(2) = mymap.insert("c", 3)
//
')

ドット表記 #dyncode(".insert") は関数 #dyncode("myhashtbl_insert") でオーバーロードされています。
キーと要素が与えられたとき、#dyncode("mymap.insert") はそのキー/要素ペアを #dyncode("mymap") に挿入します。
もし、そのキーが挿入前の写像 #dyncode("mymap") の定義域内である場合、そのキーに関連した元の要素が返ります。
そうでない場合、要素は何も返りません。
予想されることですが、#dyncode("mymap") のサイズはこの時点で 3 になります:

#dats2xhtml('\
val () = assertloc (mymap.size = 3)
')

ドット表記 #dyncode(".size") は関数 #dyncode("myhashtbl_get_size") によってオーバーロードされており、
この関数は与えれられたハッシュテーブル内に保管されているキー/要素ペアの個数をを返します。
デバッグのために、与えられたハッシュテーブル中のキー/要素ペアを印字したいと思うかもしれません:

#dats2xhtml('\
//
val () =
  fprintln! (stdout_ref, "mymap = ", mymap)
//
')

このとき、シンボル #dyncode("fprint") は #dyncode("fprint_myhashtbl") でオーバーロードされています。
次の2行のコードは、ハッシュテーブルに対して与えられたキーを検索する方法を示しています:

#dats2xhtml('\
val-~None_vt() = mymap.search("")
val-~Some_vt(1) = mymap.search("a")
')

ドット表記 #dyncode(".search") は関数 #dyncode("myhashtbl_search") でオーバーロードされていて、この関数はもし見つかれば与えられたキーに関連した要素を返します。
次の数行のコードは #dyncode("mymap") からキー/要素を削除しています:

#dats2xhtml('\
//
val-true = mymap.remove("a")
val-false = mymap.remove("a")
//
val-~Some_vt(2) = mymap.takeout("b")
val-~Some_vt(3) = mymap.takeout("c")
//
')

ドット表記 #dyncode(".remove") は、与えられたキーのキー/要素ペアを削除する関数 #dyncode("myhashtbl_remove") でオーバーロードされています。
もしキー/要素ペアが削除された場合、この関数は true を返します。
そうでない場合、この関数は false を返し、これは与えられたキーに対応するキー/要素ペアが操作するハッシュテーブルに保管されていないことを示しています。
ドット表記 #dyncode(".takeout") は関数 #dyncode("myhashtbl_takeout")
でオーバーロードされていて、この関数は削除した要素を返すことを除いて #dyncode("myhashtbl_remove") と同じです。
次の数行のコードは、ハッシュテーブルに対するあまり一般的に使われない関数の使用例です:

#dats2xhtml('\
//
val () = mymap.insert_any("a", 0)
val () = mymap.insert_any("b", 1)
val () = mymap.insert_any("c", 2)
val kxs = mymap.listize1((*void*))
val ((*void*)) = fprintln! (stdout_ref, "kxs = ", kxs)
val kxs = mymap.takeout_all((*void*))
val ((*void*)) = fprintln! (stdout_ref, "kxs = ", kxs)
//
val () = assertloc (mymap.size = 0)
//
')

ドット表記 #dyncode(".insert_any") は関数 #dyncode("myhashtbl_insert_any")
でオーバーロードされていて、この関数は、キーが使用中かどうかにかかわらず、与えられたキー/要素ペアを #emphasis("常に") 挿入します。
この関数は使用をさけるか、与えられたキーが使用中でない確証があるときのみ呼び出すべきでしょう。
そうでなければ、ハッシュテーブルが破損してしまうかもしれません。
ドット表記 #dyncode(".listize1") と #dyncode(".takeout_all") はそれぞれ2つの関数 #dyncode("myhashtbl_listize1") と #dyncode("myhashtbl_takeout_all") でオーバーロードされています。
これらは両方とも、与えられたハッシュテーブル中の全てのキー/要素ペアから成るリストを返します;
前者はハッシュテーブルを無変更で保持するのに対して、後者はハッシュテーブルを空にします。
最後に、与えられたハッシュテーブル内の全てのキー/要素ペアに対するイテレータのインターフェイスを次に示します:

#dats2xhtml('\
//
extern
fun
myhashtbl_foreach_cloref
(
  tbl: myhashtbl
, fwork: (key, &(itm) >> _) -<cloref1> void
) : void // end-of-function
//
')

例として、次のコードは与えられたハッシュテーブル内のキー/要素ペア全てを印字します:

#dats2xhtml('\
//
val () =
myhashtbl_foreach_cloref
(
  mymap
, lam (k, x) => fprintln! (stdout_ref, "k=", k, " and ", "x=", x)
) (* myhashtbl_foreach_cloref *)
//
')

")
")

#langeng("
#para("\

Please find the entirety of the code used in this chapter
#mycodelink("chap_hashtable.dats", "on-line"). Also, there is a
hashtable-based implementation of symbol table available
#mycodelink("chap_hashtable2.dats", "on-line").

")#comment("para")
")
#langja("
#para("\

この章で示したコード全体は
#mycodelink("chap_hashtable.dats", "オンライン")
から入手できます。
また、ハッシュテーブルを用いた symbol table の実装も
#mycodelink("chap_hashtable2.dats", "オンライン")
から入手できます。

")#comment("para")
")

</chapter><!--"hashtable"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
implement main () = {
//
val filr =
  $STDIO.fopen_ref_exn ("../TEMP/chap_hashtable.dats", file_mode_w)
val () = fprint_theCodeLst (filr)
val () = $STDIO.fclose_exn (filr)
//
val () = fprint_filsub (stdout_ref, "main_atxt.txt")
//
} // end of [main]
%}
