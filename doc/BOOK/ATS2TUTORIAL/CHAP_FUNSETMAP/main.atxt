%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from CHAP_FUNSETMAP/main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="funsetmap">
#langeng("
#title("Functional Sets and Maps")
")
#langja("
#title("関数的な集合と写像")
")

#langeng("
#para("\

Both (finite) sets and (finite) maps are commonly used data structures.
Functional sets and maps are immutable after their construction.  Insertion
into or removal from a functional set/map results in the construction of a
new set/map while the original is kept intact. Usually the newly
constructed set/map and the original one share a lot of underlying
representation. Note that a functional set/map cannot be safely freed
explicitly and the memory for representing it can only be reclaimed through
garbage collection (GC).

")
")
#langja("
#para("\

(有限) 集合と (有限) 写像は一般的に使われるデータ構造です。
関数的な集合と写像は、それらを生成した後では不変です。
関数的な集合/写像への挿入や削除は、元の構造を変更せずに、新しい集合/写像をコンストラクトして返します。
一般に、新しくコンストラクトされた集合/写像とその元は、中身の多くを共有しています。
関数的な集合/写像は安全に明示的な解放をすることはできず、その表現におけるメモリの回収にはガベージコレクション
(GC) を使うしかないことに注意してください。

")
")

<sect1
 id="funsetmap_set">
#langeng("
#title("Functional Sets")
")
#langja("
#title("関数的な集合")
")

#langeng("
#para("\

Suppose that a set is needed for collecting values of type
#stacode("elt_t"). The following code essentially sets up an interface for
creating and operating on such a set based on a balanced-tree
implementation in ATSLIB/libats:

#dats2xhtml('\
local
//
typedef elt = elt_t
//
staload
FS = "libats/ML/SATS/funset.sats"
implement
$FS.compare_elt_elt<elt>(x, y) = compare(x, y)
//
in (* in-of-local *)

\#include "libats/ML/HATS/myfunset.hats"

end // end of [local]
')

Please find #myatscodelink("libats/ML/HATS/myfunset.hats", "on-line") the
HATS file mentioned in the code, which is just a convenience wrapper made
to simplify programming with functional sets. Note that it is assumed here
that there is a comparison function on values of the type #stacode("elt_t")
that overloads the symbol #dyncode("compare"). If this is not the case, one
needs to implement such a function.

")
")
#langja("
#para("\

型  #stacode("elt_t") の値を収集したいとしましょう。
次のコードは、ATSLIB/libats での平衡木を用いた集合に対する生成と操作を表わすインターフェイスを本質的に作っています:

#atscode('\
staload
FS = "libats/ML/SATS/funset.sats"
//
local
//
typedef elt = elt_t
//
implement
$FS.compare_elt_elt<elt_t>(x, y) = compare(x, y)
//
in (* in-of-local *)

\#include "libats/ML/HATS/myfunset.hats"

end // end of [local]
')

関数的な集合を用いたプログラミングを単純化するためのラッパーである HATS ファイルは
#myatscodelink("libats/ML/HATS/myfunset.hats", "オンライン") から入手できます。
シンボル #dyncode("compare") をオーバーロードする型 #stacode("elt_t") の値に対する比較関数があることを、ここでは仮定していることに注意してください。
存在しない場合、そのような関数を実装する必要があります。

")
")

#langeng("
#para("\

Assume that #stacode("elt_t") is #stacode("int"). The following line
of code creates a functional set (of integers) containing no elements:

#dats2xhtml('\
val myset = myfunset_nil()
')

The function for inserting an element into a given set is assigned the
following type:

#sats2xhtml('\
//
fun myfunset_insert(xs: &myset >> _, x0: elt): bool
//
')

The dot-symbol #dyncode(".insert") is overloaded with the function
#dyncode("myfunset_insert"). Note that the first argument of
#dyncode("myfunset_insert") is call-by-reference. If the given element is
inserted into the given set, then the newly created set is stored into the
call-by-reference argument and #dyncode("false") is returned (to indicate
no error).  Otherwise, #dyncode("true") is returned (to indicate a
failure). The following few lines of code shows how insertion can be
operated on a functional set:

#dats2xhtml('\
//
var myset = myset
//
val-false = myset.insert(0) // inserted
val-(true) = myset.insert(0) // not actually inserted
val-false = myset.insert(1) // inserted
val-(true) = myset.insert(1) // not actually inserted
//
')

The first line in the above code may seem puzzling:
Its sole purpose is to create a left-value to be passed as the first
argument to #dyncode("myfunset_insert").

During the course of debugging, one may want to print out the values
contained in a given set:

#dats2xhtml('\
//
val () = fprintln! (stdout_ref, "myset = ", myset)
//
')

where the symbol #dyncode("fprint") is overloaded with
#dyncode("fprint_myset"). The function for removing an element from a
given set is assigned the following type:

#sats2xhtml('\
//
fun myfunset_remove(xs: &myset >> _, x0: elt): bool
//
')

The dot-symbol #dyncode(".remove") is overloaded with the function
#dyncode("myfunset_remove"). Note that the first argument of
#dyncode("myfunset_remove") is call-by-reference. If the given element is
removed from the given set, then the newly created set is stored into the
call-by-reference argument and #dyncode("true") is returned.  Otherwise,
#dyncode("false") is returned.  The following few lines of code shows how
removal can be operated on a functional set:

#dats2xhtml('\
val-true = myset.remove(0) // removed
val-false = myset.remove(0) // not actually removed
val-true = myset.remove(1) // removed
val-false = myset.remove(1) // not actually removed
')

")
")
#langja("
#para("\

#stacode("elt_t") が #stacode("int") であると仮定します。
コードの次の行では、要素を含まない (整数の) 関数的な集合を生成しています:

#atscode('\
val myset = myfunset_nil()
')

与えられた集合に要素を挿入する関数には次の型が割り当てられます:

#atscode('\
//
fun myfunset_insert(xs: &myset >> _, x0: elt): bool
//
')

ドット表記 #dyncode(".insert") は関数 #dyncode("myfunset_insert") でオーバーロードされています。
#dyncode("myfunset_insert") の最初の引数が参照呼び出しであることに注意してください。
与えられた要素が与えられた集合に挿入される場合、新しく生成された集合が参照呼び出しの引数に保管され、(エラーが発生していないことを表わす)
#dyncode("false") が返ります。
そうでない場合、(失敗を表わす) #dyncode("true") が返ります。
次の数行のコードは、関数的な集合に対する挿入操作を示しています:

#atscode('\
//
var myset = myset
//
val-false = myset.insert(0) // inserted
val-(true) = myset.insert(0) // not actually inserted
val-false = myset.insert(1) // inserted
val-(true) = myset.insert(1) // not actually inserted
//
')

上記コードの最初の行は謎めいて見えるかもしれません:
その唯一の目的は、#dyncode("myfunset_insert") への最初の引数として渡される左辺値を生成することです。

デバッグのために、与えられた集合中の値を印字したいと思うかもしれません:

#atscode('\
//
val () = fprintln! (stdout_ref, "myset = ", myset)
//
')

このとき、シンボル #dyncode("fprint") は #dyncode("fprint_myset") でオーバーロードされています。
与えられた集合から要素を削除する関数には次の型が割り当てられます:

#atscode('\
//
fun myfunset_remove(xs: &myset >> _, x0: elt): bool
//
')

ドット表記 #dyncode(".remove") は関数 #dyncode("myfunset_remove") でオーバーロードされています。
#dyncode("myfunset_remove") の最初の引数は参照呼び出しであることに注意してください。
与えられた集合から与えられた要素を削除する場合、新しく生成された集合が参照呼び出しの引数に保管され、#dyncode("true") が返ります。
そうでない場合、#dyncode("false") が返ります。
次の数行のコードは、関数的な集合に対する削除操作を示しています:

#atscode('\
val-true = myset.remove(0) // removed
val-false = myset.remove(0) // not actually removed
val-true = myset.remove(1) // removed
val-false = myset.remove(1) // not actually removed
')

")
")

#langeng("
#para('\

Various common set operations can be found in
#myatscodelink("libats/ML/HATS/myfunset.hats",
"libats/ML/HATS/myfunset.hats").  By following the types assigned to these
operations, one should have no difficulty in figuring out how they are
supposed to be called.  Please find the entirety of the code used in this
section #mycodelink("chap_funsetmap_set.dats", "on-line").

')
")
#langja("
#para('\

一般的な各種の集合操作は
#myatscodelink("libats/ML/HATS/myfunset.hats", "libats/ML/HATS/myfunset.hats")
に見つかります。
これらの操作に割り当てられた型を見れば、それらをどのように呼び出すべきなのか理解するのは難しくないでしょう。
この章で紹介したコード全体は #mycodelink("chap_funsetmap_set.dats", "オンライン") から入手できます。

')
")

</sect1><!--"funsetmap_set"-->

<sect1
 id="funsetmap_map">
#langeng("
#title("Functional Maps")
")
#langja("
#title("関数的な写像")
")

#langeng("
#para("\

Suppose that a map is needed for mapping keys of type
#stacode("key_t") to items of type #stacode("itm_t"). The following code
essentially sets up an interface for creating and operating on such a map
based on a balanced-tree implementation in ATSLIB/libats:

#dats2xhtml('\
local
//
typedef
key = key_t and itm = itm_t
//
staload
FM = "libats/ML/SATS/funmap.sats"
implement
$FM.compare_key_key<key>(x, y) = compare(x, y)
//
in (* in-of-local *)

\#include "libats/ML/HATS/myfunmap.hats"

end // end of [local]
')

Please find #myatscodelink("libats/ML/HATS/myfunmap.hats", "on-line") the
HATS file mentioned in the code, which is just a convenience wrapper made
to simplify programming with functional maps. Note that it is assumed here
that there is a comparison function on values of the type #stacode("key_t")
that overloads the symbol #dyncode("compare"). If this is not the case, one
needs to implement such a function.

")
")
#langja("
#para("\

型 #stacode("key_t") のキーから型 #stacode("itm_t") の要素へマップを表わすのに、写像が必要だと考えます。
次のコードは本質的に、ATSLIB/libats にて平衡木で実装された写像に対する生成と操作のインターフェイスを作っています:

#atscode('\
staload
FM = "libats/ML/SATS/funmap.sats"
//
local
//
typedef
key = key_t and itm = itm_t
//
implement
$FM.compare_key_key<key_t>(x, y) = compare(x, y)
//
in (* in-of-local *)

\#include "libats/ML/HATS/myfunmap.hats"

end // end of [local]
')

関数的な写像を用いたプログラミングを単純化するためのラッパーである HATS ファイルは
#myatscodelink("libats/ML/HATS/myfunmap.hats", "オンライン") から入手できます。
シンボル #dyncode("compare") をオーバーロードする型 #stacode("key_t")の値に対する比較関数があることを、ここでは仮定していることに注意してください。
存在しない場合、そのような関数を実装する必要があります。

")
")

#langeng("
#para("\

Assume that #stacode("key_t") is #stacode("string") and #stacode("itm_t")
is #stacode("int"). The following line of code creates an empty functional map:

#dats2xhtml('\
val mymap = myfunmap_nil()
')

The following few lines insert some key/item pairs into
#dyncode("mymap"):

#dats2xhtml('\
//
var mymap = mymap
//
val-~None_vt() = mymap.insert("a", 0)
val-~Some_vt(0) = mymap.insert("a", 1)
//
val-~None_vt() = mymap.insert("b", 1)
val-~Some_vt(1) = mymap.insert("b", 2)
//
val-~None_vt() = mymap.insert("c", 2)
val-~Some_vt(2) = mymap.insert("c", 3)
//
')

The dot-symbol #dyncode(".insert") is overloaded with a function of the
name #dyncode("myfunmap_insert").  The first line in the above code may
seem puzzling: Its sole purpose is to create a left-value to be passed as
the first argument to #dyncode("myfunmap_insert").  Given a key and an
item, #dyncode("mymap.insert") inserts the key/item pair into
#dyncode("mymap").  If the key is in the domain of the map represented by
#dyncode("mymap") before insertion, then the original item associated with
the key is returned. Otherwise, no item is returned. As can be expected,
the size of #dyncode("mymap") is 3 at this point:

#dats2xhtml('\
val () = assertloc (mymap.size() = 3)
')

The dot-symbol #dyncode(".size") is overloaded with a function of the name
#dyncode("myfunmap_size"), which returns the number of key/item pairs
stored in a given map.  During the course of debugging, one may want to
print out the key/item pairs in a given map:

#dats2xhtml('\
//
val () = fprintln! (stdout_ref, "mymap = ", mymap)
//
')

where the symbol #dyncode("fprint") is overloaded with
#dyncode("fprint_mymap"). The next two lines of code show how search with a
given key operates on a map:

#dats2xhtml('\
val-~None_vt() = mymap.search("")
val-~Some_vt(1) = mymap.search("a")
')

The dot-symbol #dyncode(".search") is overloaded with a function of the
name #dyncode("myfunmap_search"), which returns the item associated with a
given key if it is found. The next few lines of code remove some key/item
pairs from #dyncode("mymap"):

#dats2xhtml('\
//
val-true = mymap.remove("a")
val-false = mymap.remove("a")
//
val-~Some_vt(2) = mymap.takeout("b")
val-~Some_vt(3) = mymap.takeout("c")
//
')

The dot-symbol #dyncode(".remove") is overloaded with a function of the
name #dyncode("myfunmap_remove") for removing a key/item pair of a given
key. If a key/item pair is removed, then the function returns
true. Otherwise, it returns false to indicates that no key/item pair of the
given key is stored in the map being operated on.  The dot-symbol
#dyncode(".takeout") is overloaded with a function of the name
#dyncode("myfunmap_takeout"), which is similar to #dyncode("myfunmap_remove")
excepting for returning the removed item.

")
")
#langja("
#para("\

#stacode("key_t") が #stacode("string") で #stacode("itm_t") が #stacode("int") であると仮定します。
コードの次の行では、要素を含まない (整数の) 関数的な写像を生成しています:

#atscode('\
val mymap = myfunmap_nil()
')

次の数行では、キー/要素のペアを #dyncode("mymap") に挿入しています:

#atscode('\
//
var mymap = mymap
//
val-~None_vt() = mymap.insert("a", 0)
val-~Some_vt(0) = mymap.insert("a", 1)
//
val-~None_vt() = mymap.insert("b", 1)
val-~Some_vt(1) = mymap.insert("b", 2)
//
val-~None_vt() = mymap.insert("c", 2)
val-~Some_vt(2) = mymap.insert("c", 3)
//
')

ドット表記 #dyncode(".insert") は関数 #dyncode("myfunmap_insert") によってオーバーロードされています。
上記コードの最初の行は謎めいて見えるかもしれません:
その唯一の目的は、#dyncode("myfunmap_insert") への最初の引数として渡される左辺値を生成することです。
キーと要素が与えられたとき、#dyncode("mymap.insert") はキー/要素ペアを #dyncode("mymap") に挿入します。
もしそのキーが挿入前の写像 #dyncode("mymap") の定義域であるなら、そのキーに関連する元の要素が返ります。
そうでない場合、なにも要素は返りません。
予想されることですが、この時点で #dyncode("mymap") のサイズは 3 になります:

#atscode('\
val () = assertloc (mymap.size() = 3)
')

ドット表記 #dyncode(".size") は関数 #dyncode("myfunmap_size") でオーバーロードされています。
この関数は与えられた写像に保管されたキー/要素のペアの数を返します。
デバッグのために、与えられた写像中のキー/要素ペアを印字したいと思うかもしれません:

#atscode('\
//
val () = fprintln! (stdout_ref, "mymap = ", mymap)
//
')

このとき、シンボル #dyncode("fprint") は #dyncode("fprint_mymap") でオーバーロードされています。
次の2行のコードは、与えられたキーで写像を検索する方法を示しています:

#atscode('\
val-~None_vt() = mymap.search("")
val-~Some_vt(1) = mymap.search("a")
')

The dot-symbol #dyncode(".search") is overloaded with a function of the name #dyncode("myfunmap_search"),
which returns the item associated with a given key if it is found.
The next few lines of code remove some key/item pairs from #dyncode("mymap"):

#atscode('\
//
val-true = mymap.remove("a")
val-false = mymap.remove("a")
//
val-~Some_vt(2) = mymap.takeout("b")
val-~Some_vt(3) = mymap.takeout("c")
//
')

ドット表記 #dyncode(".remove") は、与えらえれたキーに対応するキー/要素ペアを削除を表わす関数
#dyncode("myfunmap_remove") でオーバーロードされています。
もし、キー/要素ペアが削除された場合、この関数は true を返します。
そうでない場合、操作を行なった写像には与えられたキーに対応するキー/要素ペアが見つからなかったことを表わす false を返します。
ドット表記 #dyncode(".takeout") は関数 #dyncode("myfunmap_takeout") でオーバーロードされています。
この関数は、削除した要素を返す点を除いて、#dyncode("myfunmap_remove") と同じです。

")
")

#langeng("
#para('\

Various common map operations can be found in
#myatscodelink("libats/ML/HATS/myfunmap.hats",
"libats/ML/HATS/myfunmap.hats").  By following the types assigned to these
operations, one should have no difficulty in figuring out how they are
supposed to be called. Please find the entirety of the code used in this
section #mycodelink("chap_funsetmap_map.dats", "on-line").

')#comment("para")
")
#langja("
#para('\

一般的な各種の写像操作は #myatscodelink("libats/ML/HATS/myfunmap.hats", "libats/ML/HATS/myfunmap.hats") に見つかります。
これらの操作に割り当てられた型を見れば、それらをどのように呼び出すべきなのか理解するのは難しくないでしょう。
この章で紹介したコード全体は #mycodelink("chap_funsetmap_map.dats", "オンライン") から入手できます。

')#comment("para")
")

</sect1><!--"funsetmap_map"-->

</chapter><!--"funsetmap"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
implement main () = {
//
val filr =
  $STDIO.fopen_ref_exn ("../TEMP/chap_funsetmap.dats", file_mode_w)
val () = fprint_theCodeLst (filr)
val () = $STDIO.fclose_exn (filr)
//
val () = fprint_filsub (stdout_ref, "main_atxt.txt")
//
} // end of [main]
%}
