%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="filename-extensions">
#langeng("
#title("Filename Extensions")
")
#langja("
#title("拡張子")
")

#langeng("
#para("\

In ATS, the filename extensions #emphasis(".sats") and #emphasis(".dats")
are reserved to indicate static and dynamic files, respectively. As these
two extensions have some special meaning attached to them, which can be
interpreted by the command #command("atscc"), they should not be replaced
arbitrarily.\

")
")
#langja("
#para("\

ATS では、拡張子 #emphasis(".sats") と #emphasis(".dats")
がそれぞれ静的と動的なファイルを表わすために予約されています。
これら2つの拡張子が付いたファイルは #command("atscc")
によって解釈される特別な意味をもっていて、
それらを任意の拡張子に置き換えてはいけません。\

")
")

#langeng("
#para("\

A static file may contain sort definitions, datasort declarations, static
definitions, abstract type declarations, exception declarations, datatype
declarations, macro definitions, interfaces for dynamic values and
functions, etc.  In terms of functionality, a static file in ATS is
somewhat similar to a header file (with the extension #emphasis(".h")) in C
or an interface file (with the extension #emphasis(".mli")) in OCaml.\

")
")
#langja("
#para("\

静的なファイルは次の要素を含みます:
種 (sort) 定義, データ種 (datasort) 宣言, 静的な定義,
抽象型 (abstract type) 宣言, 例外宣言, データ型 (datatype) 宣言,
マクロ定義, 動的な値と関数のインターフェイス, などです。
機能的な観点では、ATS の静的なファイルは (拡張子 #emphasis(".h") を持つ) C言語のヘッダファイルや
(拡張子 #emphasis(".mli") を持つ) OCaml のインターフェイスファイルに幾分似ています。\

")
")

#langeng("
#para("\

A dynamic file may contain everything in a static file. In addition, it may
also contain definitions for dynamic values and functions. However,
interfaces for functions and values in a dynamic file should follow the
keyword #dyncode("extern"), which on the other hand should not be present when
such interfaces are declared in a static file. For instance, the following
syntax declares interfaces (or types) in a static file for a value named
#dyncode("pi") and a function named #dyncode("area_of_circle"):

#sats2xhtml("\
val pi : double
fun area_of_circle (radius: double): double
")

When the same interfaces are declared in a #emphasis("dynamic") file, the
following slightly different syntax should be used:

#dats2xhtml("\
extern val pi : double
extern fun area_of_circle (radius: double): double
")

Please note that a static file is essentially a special case of a dynamic
file. It is entirely possible to replace a static file with a dynamic one.

")#comment("para")
")
#langja("
#para("\

動的なファイルは静的なファイルの持ちうる全ての要素を含むことができます。
さらに、動的な値と関数の定義を含むこともできます。
けれども、動的なファイルにおける関数と値のインターフェイスにはキーワード
#dyncode("extern") を付ける必要があります。
一方で、静的なファイルにおいてそのようなインターフェイスを宣言する時にはこのキーワードは不要です。
例えば、次の構文では静的なファイルにおいて #dyncode("pi") という名前の値と
#dyncode("area_of_circle") という名前の関数のインターフェイスと型を宣言しています:

#sats2xhtml("\
val pi : double
fun area_of_circle (radius: double): double
")

#emphasis("動的な")
ファイルにおいて同じインターフェイスを宣言する際には、次のような少し異なる構文が用いられます:

#dats2xhtml("\
extern val pi : double
extern fun area_of_circle (radius: double): double
")

本質的に、静的なファイルは動的なファイルの特殊形であることに注意してください。
静的なファイルを動的なファイルによって完全に置換することは可能です。

")#comment("para")
")

#langeng("
#para("\

As a convention, we often use the filename extension #emphasis(".cats") to
indicate that a file contains some C code that is supposed to be combined
with ATS code in certain manner. There is also the filename extension
#emphasis(".hats"), which we occassionally use for a file that should be
included in ATS code stored in another file.  However, the use of these two
filename extensions are not mandatory, that is, they can be replaced if
needed or wanted.\

")
")
#langja("
#para("\

慣習的に、ある作法で ATS コードと結合することを想定したC言語コードを含むファイルを表わすのに拡張子
#emphasis(".cats") をしばしば使います。
また、他のファイルに含まれる ATS コードをインクルードするために時々用いられる拡張子 #emphasis(".hats") もあります。
けれども、これら2つの拡張子の使用は強制されるものではありません。
必要であれば、それらの拡張子を置き換えることができます。\

")
")

</chapter><!--"filename-extensions"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
