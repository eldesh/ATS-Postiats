%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from CHAP_EXTVAR/main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
id="extvar-declaration">
#langeng("
#title("Extvar-Declaration")
")
#langja("
#title("extvar 宣言")
")

#langeng("
#para('\

ATS puts great emphasis on interacting with other programming
languages.

')
")
#langja("
#para('\

ATS は他のプログラミング言語との相互利用を重要視しています。

')
")

#langeng("
#para('\

Suppose that I have in some C code a (global) integer variable of the name
#dyncode("foo") and I want to increase in some ATS code the value stored in
#dyncode("foo") by 1. This can be done as follows:

#dats2xhtml('\
val x0 = $extval(int, "foo") // get the value of foo
val p_foo = $extval(ptr, "&foo") // get the address of foo
val () = $UNSAFE.ptr_set<int> (p_foo, x0 + 1) // update foo
')

where the address-of operator (&amp;) in C is needed for taking the address
of #dyncode("foo"). If I want to interact in ATS with a language that does
not support the address-of operator (e.g., JavaScript and Python), then I
can do it as follows:

#dats2xhtml('\
extvar "foo" = x0 + 1
')

where the keyword #dyncode("extvar") indicates that the string following it
refers to an external variable (or left-value) that should be updated with
the value of the expression on the right-hand side of the equality symbol
following the string. Of course, this works for languages like C that do
support the address-of operator as well. This so-called extvar-declaration
can also be written as follows:

#dats2xhtml('\
extern var "foo" = x0 + 1
')

where #dyncode("extvar") expands into #dyncode("extern var").

')#comment("para")
")
#langja("
#para('\

C言語コード中に #dyncode("foo") という名前の (グローバルの) 整数変数を持ち、ATS コード中で #dyncode("foo") に保管された値を 1 増加させたいとします。これは次のように書けます:

#atscode('\
val x0 = $extval(int, "foo") // get the value of foo
val p_foo = $extval(ptr, "&foo") // get the address of foo
val () = $UNSAFE.ptr_set<int> (p_foo, x0 + 1) // update foo
')

このとき #dyncode("foo") のアドレスを得るためにC言語のアドレス演算子 (&amp;) が必要です。もしアドレス演算子をサポートしていない言語 (例: JavaScript や Python) と ATS を相互利用するのであれば、次のように書くことができます:

#atscode('\
extvar "foo" = x0 + 1
')

このときキーワード #dyncode("extvar") は続く文字列が外部の変数 (もしくは左辺値) を参照していることを示しています。その変数は、その文字列に続く等式記号の右辺の式の値で更新されます。このいわゆる extvar 宣言は次のように書くこともできます:

#atscode('\
extern var "foo" = x0 + 1
')

このとき #dyncode("extvar") は #dyncode("extern var") に展開されています。

')#comment("para")
")

#langeng("
#para('\

As for another example, let us suppose that #dyncode("foo2") is a record
variable that contains two integer fields named #dyncode("first") and
#dyncode("second"). Then the following code assigns integers 1 and 2 to
these two fields of #dyncode("foo2"):

#dats2xhtml('\
extvar "foo2.first" = 1
extvar "foo2.second" = 2
')

By its very nature, the feature of extvar-declaration is inherently
unsafe, and it should only be used with caution.

')#comment("para")
")
#langja("
#para('\

もう1つの例として、#dyncode("foo2") が #dyncode("first") と #dyncode("second") という名前で2つの整数フィールドを持つレコード変数であるとしてみましょう。すると次のコードは、整数 1 と 2 を #dyncode("foo2") の2つのフィールドに割り当てます:

#atscode('\
extvar "foo2.first" = 1
extvar "foo2.second" = 2
')

ことがことだけに、extvar 宣言の機能は本質的に安全ではなく、慎重に使う必要があります。

')#comment("para")
")

#langeng("
#para("\

Please find #mycodelink("chap_extvar.dats", "on-line") the entirety of the
code presented in this chapter.\

")#comment("para")
")
#langja("
#para("\

この章で紹介したコード全体は #mycodelink("chap_extvar.dats", "オンライン") から入手できます。\

")#comment("para")
")

</chapter><!--"extvar-declaration"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
