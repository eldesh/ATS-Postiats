%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from [CHAP_EXCEPTION/main.atxt].\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
id="exceptions">
#langeng("
#title("Exceptions")
")
#langja("
#title("例外")
")

<!-- ****** ****** -->

#langeng("
#para("

While exceptions can be very useful in practice, it is also very common to
see code that misuses exceptions.

")
")
#langja("
#para("

例外は実用上とても有用ですが、例外を誤用したコードがよく見られることでも知られています。

")
")

#langeng("
#para("\

Generally speaking, there are exceptions that are meant to be raised but
not captured for the purpose of aborting program execution, and there are
also exceptions (often declared locally) that are meant to be raised and
then captured so as to change the flow of program execution.  For instance,
the exception #dyncode("ArraySubscriptExn") is raised when out-of-bounds
array subscripting is detected at run-time.  Once it is raised,
#dyncode("ArraySubscriptExn") is usually not meant to be captured.  While
there is certainly nothing preventing a programer from writing code that
captures a raised #dyncode("ArraySubscriptExn"), a major concern is that
reasoning can become greatly complicated on code that does so.  In the
following presentation, I will soley focus on exceptions that are meant to
be raised and then captured.

")#comment("para")
")
#langja("
#para("\

一般的に言うと、プログラムの実行を中断終了させるために捕捉されないことを意図した例外と、プログラム実行の流れを変えるために
(しばしばローカルで宣言した) 捕捉されることを意図した例外があります。
例えば、例外 #dyncode("ArraySubscriptExn")
は実行時に配列の範囲外を添字指定したことを検出すると発生します。
この例外が発生すると、通常
#dyncode("ArraySubscriptExn") は捕捉されることを意図していません。
プログラマが #dyncode("ArraySubscriptExn")
例外を捕捉するコードを書くことを妨げるものはなにもありませんが、そのコードが非常に複雑になってしまう懸念があります。
次に、発生した後に捕捉されることを意図した例外について説明しようと思います。

")#comment("para")
")

#langeng("
#para('\

Let us now take a look at the following code that implements a function
for finding the rightmost element in a list that satisfies a given predicate:

#atscode('\
extern
fun{a:t@ype}
list_find_rightmost
  (List (a), (a) -<cloref1> bool): Option_vt (a)
//
implement{a}
list_find_rightmost
  (xs, pred) = let
//
fun aux
(
  xs: List(a)
) : Option_vt (a) =
  case+ xs of
  | nil () => None_vt ()
  | cons (x, xs) => let
      val res = aux (xs)
    in
      case+ res of
      | Some_vt _ => res
      | ~None_vt () =>
          if pred (x) then Some_vt (x) else None_vt ()
        // end of [None]
    end (* end of [cons] *)
//
in
  aux (xs)
end // end of [list_find_rightmost]
')

Suppose that #dyncode("list_find_rightmost") is called on a list xs of
length N (for some large natural number N) and a predicate pred. The
evaluation of this call leads to a call to the inner function
#dyncode("aux"), which in turn generates N additional recursive calls to
#dyncode("aux"). Assume that only the last element of xs satisfies the
predicate pred. Then there are still N-1 call frames for #dyncode("aux") on
the call stack when the rightmost element satisfying the given predicate is
found, and these frames need to be unwinded #emphasis("one-by-one") before
the found element can be returned to the original call to
#dyncode("list_find_rightmost"). This form of inefficiency is eliminated in
the following exception-based implementation of
#dyncode("list_find_rightmost"):

#atscode('
implement{a}
list_find_rightmost
  (xs, pred) = let
//
exception Found of (a)
//
fun aux
(
  xs: List(a)
) : void =
  case+ xs of
  | nil () => ()
  | cons (x, xs) => let
      val () = aux (xs)
    in
      if pred (x) then $raise Found(x) else ()
    end (* end of [cons] *)
//
in
//
try let
  val () = aux (xs)
in
  None_vt ()
end with
  | ~Found(x) => Some_vt (x)
//
end // end of [list_find_rightmost]
')

When a try-with-expression is evaluated, a label is created for the portion
of the call stack needed to evaluate the clauses (often referred to as
exception-handlers) following the keyword #keycode("with"), and this label
is then pushed onto a designated global stack.  When an exception is
raised, the labels on the global stack are tried one-by-one until the
raised exception is captured by an exception-handler (that is, the value
representing the exception matches the pattern guard of the
exception-handler) or the current program evaluation aborts. The above
exception-based implementation of #dyncode("list_find_rightmost") uses a
raised exception to carry the element found during a recursive call to
#dyncode("aux") so that this element can be returned in a single jump to
the original call to #dyncode("list_find_rightmost"), bypassing all the
intermediate call frames (for recursive calls to #dyncode("aux")) on the
call stack. In general, the range between the point where an exception
is raised and the point where the raised exception is captured should span
multiple call frames. If not, then the use of exception may be questionable.

')#comment("para")
")
#langja("
#para('\

リストの中から与えられた述語を満たす一番右の要素を見つける関数を実装している次のコードを見てみましょう:

#atscode('\
extern
fun{a:t@ype}
list_find_rightmost
  (List (a), (a) -<cloref1> bool): Option_vt (a)
//
implement{a}
list_find_rightmost
  (xs, pred) = let
//
fun aux
(
  xs: List(a)
) : Option_vt (a) =
  case+ xs of
  | nil () => None_vt ()
  | cons (x, xs) => let
      val res = aux (xs)
    in
      case+ res of
      | Some_vt _ => res
      | ~None_vt () =>
          if pred (x) then Some_vt (x) else None_vt ()
        // end of [None]
    end (* end of [cons] *)
//
in
  aux (xs)
end // end of [list_find_rightmost]
')

#dyncode("list_find_rightmost") が長さ (なんらかの自然数) N のリスト xs
と述語 pred に対して呼び出されたとしましょう。
この呼び出しの評価は内部関数 #dyncode("aux") の呼び出しを引き起こし、
さらに N 回の #dyncode("aux") の再帰呼び出しに変化します。
xs の最後の要素だけが述語 pred を満たすと仮定しましょう。
すると pref を満たす一番右の要素が見つかっているのに、まだ N-1 個の
#dyncode("aux") 呼び出しフレームがコールスタックに残っています。
見つかった要素を大元の #dyncode("list_find_rightmost")
呼び出しへ戻す前に、これらのフレームを#emphasis("一つずつ")ほどいてやらねばなりません。
次の例外を使った実装 #dyncode("list_find_rightmost") ではこの非効率な形を取り除いています:

#atscode('
implement{a}
list_find_rightmost
  (xs, pred) = let
//
exception Found of (a)
//
fun aux
(
  xs: List(a)
) : void =
  case+ xs of
  | nil () => ()
  | cons (x, xs) => let
      val () = aux (xs)
    in
      if pred (x) then $raise Found(x) else ()
    end (* end of [cons] *)
//
in
//
try let
  val () = aux (xs)
in
  None_vt ()
end with
  | ~Found(x) => Some_vt (x)
//
end // end of [list_find_rightmost]
')

try-with 式が評価されると、キーワード #keycode("with")
に続く節 (しばしば例外ハンドラと呼ばれます)
を評価するのに必要なコールスタックの部分へのラベルが生成されます。
それからこのラベルは指定されたグローバルスタックにプッシュされます。
例外が発生すると、例外ハンドラによって発生した例外が捕捉されるまで
(つまり例外を表わす値が例外ハンドラのパターンガードにマッチするまで)
、一つずつグローバルスタック内のそのラベル群が試されます。
もし捕捉されなかった場合は現在のプログラムの評価は中断終了します。
上記の例外を使った実装 #dyncode("list_find_rightmost") では、再帰呼出
#dyncode("aux") で見つかった要素を運搬するために例外を発生させています。
コールスタックにある (#dyncode("aux") への再帰呼出である)
中間の呼び出しフレームを全て迂回して、1回のジャンプでこの要素を大元の
#dyncode("list_find_rightmost") に返すことができるのです。
一般に、例外が発生するポイントとその例外を捕捉するポイントの範囲は複数のコールフレームに及んでいるべきです。
そうでなければ、例外の使用すべきか疑わしいかもしれません。

')#comment("para")
")

#langeng("
#para("\

The implementation of the run-time support for exceptions in ATS makes use
of the function #dyncode("alloca") declared in #filename("alloca.h") and
the functions #dyncode("setjmp") and #dyncode("longjmp") declared in
#filename("setjmp.h"). If #command("gcc") or #command("clang") is used to
compile the C code generated from ATS source, one can pass the flag
-D_GNU_SOURCE so as to make sure that the header file #filename("alloca.h")
is properly included.

")
")
#langja("
#para("\

例外を実行時にサポートする ATS の実装は
#filename("alloca.h") で宣言されている #dyncode("alloca") 関数と
#filename("setjmp.h") で宣言されている #dyncode("setjmp") と #dyncode("longjmp") 関数を使っています。
ATS ソースコードから生成されたC言語ソースコードをコンパイルするのに #command("gcc") もしくは #command("clang") を使う場合、
#filename("alloca.h") ヘッダファイルが確実にインクルードするために -D_GNU_SOURCE フラグを渡すことができます。

")
")

<!-- ****** ****** -->

#langeng("
#para("\

Please find #mycodelink("chap_exception.dats", "on-line") the entirety of the
code used in this chapter.\

")#comment("para")
")
#langja("
#para("\

この章で紹介したコードの全体は
#mycodelink("chap_exception.dats", "オンライン")
から入手できます。\

")#comment("para")
")

</chapter><!--"exceptions"-->

#comment(" ****** ****** ")

#comment(" end of [chap_exception.atxt] ")

%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
implement main () = {
//
val filr =
  $STDIO.fopen_ref_exn ("../TEMP/chap_exception.dats", file_mode_w)
val () = fprint_theCodeLst (filr)
val () = $STDIO.fclose_exn (filr)
//
val () = fprint_filsub (stdout_ref, "main_atxt.txt")
//
} (* end of [main] *)
%}
