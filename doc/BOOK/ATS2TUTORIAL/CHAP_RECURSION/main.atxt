%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from [CHAP_RECURSION/main.atxt].\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
id="recursion"
>
#langeng("
#title("Recursion")
")
#langja("
#title("再帰")
")

<!-- ****** ****** -->

#langeng("
#para('\

The notion of recursion is ubiquitous in ATS.  For instance, there are
recursively defined sorts (datasorts) and types (datatypes) in the statics,
and there are also recursively defined functions in the dynamics.
Literally, the word #emphasis("recurse") means "go back". When an entity is
defined recursively, it means that the entity being defined can appear in
its own definition. In the following presentation, I will show several ways
to define (or implement) recursive functions and non-recursive functions,
where the latter is just a special case of the former.\

')
")
#langja("
#para('\

ATS において再帰の概念はあちこちに現われます。
例えば、静的には再帰的に定義された種 (データ種) や型 (データ型) があり、また動的には再帰的に定義された関数があります。
言葉の上では、単語 #emphasis("再帰") は "戻る (go back)" を意味しています。
あるモノが再帰的に定義されているなら、それ自身の定義中にそのモノを書くことができることを意味しています。
再帰関数と非再帰関数を定義する (もしくは実装する) いくつかの方法を次に示します。
このとき後者は前者の特殊ケースです。\

')
")

#langeng("
#para("\

The keyword #keycode("fun") can be used to initiate the definition of
a recursive function. For instance, following is the definition of a
recursive function:

#dats2xhtml('\
fun
fact(x: int): int =
  if x > 0 then x * fact(x-1) else 1
(* end of [fact] *)
')

A non-recursive function is a special kind of recursive function that
does make use of itself in its own definition. So one can certainly use
#keycode("fun") to initiate the definition of a non-recursive function.
However, if there is a need to indicate explicitly that a non-recursive is being
defined, then one can use the keyword #keycode("fn") to do so. For
instance, the definiton of a non-recursive function is given as follows:

#dats2xhtml('\
fn square(x: int): int = x * x
')

which is directly translated by the compiler into the following binding
between a name and a lambda-expression:

#dats2xhtml('\
val square = lam (x: int): int => x * x
')

As another example, please note that the two occurrences of the
symbol #dyncode("fact") in the following code refer to two distinct
functions:

#dats2xhtml('\
fn
fact(x: int): int =
  if x > 0 then x * fact(x-1) else 1
(* end of [fact] *)
')

While the first #dyncode("fact") (to the left of the equality symbol)
refers to the (non-recursive) function being defined, the second one is
supposed to have been declared previously.

")
")
#langja("
#para("\

キーワード #keycode("fun") は再帰関数定義の開始に使います。
例えば、次のコードは再帰関数の定義です:

#dats2xhtml('\
fun
fact(x: int): int =
  if x > 0 then x * fact(x-1) else 1
(* end of [fact] *)
')

非再帰関数は、それ自身の定義中でそれ自身を使う再帰関数の特殊形です。
そのため、もちろん非再帰関数の定義の開始に #keycode("fun") を使うこともできます。
けれども、非再帰として定義されていることを明示的に示す必要があるのであれば、キーワード #keycode("fn") を使うことができます。
例えば、非再帰関数の定義は次のように与えられます:

#dats2xhtml('\
fn square(x: int): int = x * x
')

上記の関数は次のような名前とラムダ式を繋ぐ束縛にコンパイラによって変換されます:

#dats2xhtml('\
val square = lam (x: int): int => x * x
')

別の例として、次のコードでは #dyncode("fact") が二度現われて、2つの別個の関数を差していることに注意してください:

#dats2xhtml('\
fn
fact(x: int): int =
  if x > 0 then x * fact(x-1) else 1
(* end of [fact] *)
')

最初の (等号の左側にある) #dyncode("fact") 定義済みの (非再帰の)
関数を参照しており、2番目は以前に宣言されたものを参照しています。

")
")

#langeng("
#para("\

A recursive function can also be defined as a recursive value. For
instance, the recursive function #dyncode("fact") defined above can
be defined as follows:

#dats2xhtml('\
val
rec
fact : int -> int =
lam (x) =>
  if x > 0 then x * fact(x-1) else 1
(* end of [fact] *)
')

where the keyword #keycode("rec") indicates that #dyncode("fact") is
defined recursively, that is, it is allowed to appear in its own
definition. In fact, the former definition of #dyncode("fact") is directly
translated into the latter one by the compiler. Of course, one may
also use a reference to implement recursion:

#dats2xhtml('\
val
fact = ref<int->int>($UNSAFE.cast(0))
val () =
!fact :=
(
  lam (x:int):int => if x > 0 then x * !fact(x-1) else 1
) (* end of [val] *)
')

But this is definitely not a style I would like to advocate.
For the sake of completion, I present yet another way to define
#dyncode("fact") as a fixed-point expression:

#dats2xhtml('\
val
fact =
fix f(x: int): int =>
  if x > 0 then x * f(x-1) else 1
(* end of [fact] *)
')

Of course, if one wants to, then one can always replace a lambda-expression
with a fixed-point expression (or simply fix-expression for short). For instance,
#dyncode("lambda(x:int):int => x+x") can be written as #dyncode("fix _(x:int):int => x+x").

")
")
#langja("
#para("\

再帰関数は再帰的な値としても定義できます。
例えば、上記で定義した再帰関数 #dyncode("fact") は次のように定義することもできます:

#dats2xhtml('\
val
rec
fact : int -> int =
lam (x) =>
  if x > 0 then x * fact(x-1) else 1
(* end of [fact] *)
')

このとき、キーワード #keycode("rec") は #dyncode("fact") が再帰的に定義されていることを示しています。
つまり、それはそれ自身の定義中に現われることができます。
実際、#dyncode("fact") の前者の定義は後者にコンパイラによって変換されます。
もちろん、再帰を実装するのに参照を使うこともできます:

#dats2xhtml('\
val
fact = ref<int->int>($UNSAFE.cast(0))
val () =
!fact :=
(
  lam (x:int):int => if x > 0 then x * !fact(x-1) else 1
) (* end of [val] *)
')

しかし、これは私の推奨するスタイルではありません。
不動点式として #dyncode("fact") を定義するまた別の方法を紹介します:

#dats2xhtml('\
val
fact =
fix f(x: int): int =>
  if x > 0 then x * f(x-1) else 1
(* end of [fact] *)
')

もちろん望むなら、不動点式をラムダ式で置き換えることがいつでも可能です。
例えば、#dyncode("lambda(x:int):int => x+x") は #dyncode("fix _(x:int):int => x+x") のように書くこともできます。

")
")

#langeng("
#para("\

For defining mutually recursive functions, one can simply use the
keyword #keycode("and") to concatenate function definitions. For instance,
the following code defines two functions #dyncode("isevn") and #dyncode("isodd")
mutually recursively:

#dats2xhtml('\
fun
isevn(x: int): bool =
  if x > 0 then isodd(x-1) else true
and
isodd(x: int): bool =
  if x > 0 then isevn(x-1) else false
')

The code, as one may have guessed, is translated by the compiler into the
following form (for defining two mutually recursive values):

#dats2xhtml('\
val
rec
isevn : int -> bool =
  lam (x) => if x > 0 then isodd(x-1) else true
and
isodd : int -> bool =
  lam (x) => if x > 0 then isevn(x-1) else false
')

One can certainly use the keyword #keycode("and") to concatenate
definitions of non-recursive functions, but doing so is probably just a
curiosity (instead of a meaningful practice).\

")
")
#langja("
#para("\

相互再帰関数を定義するためには、関数定義の連結にキーワード #keycode("and") を使います。
例えば、次のコードは2つの関数 #dyncode("isevn") と #dyncode("isodd") を相互再帰的に定義しています:

#dats2xhtml('\
fun
isevn(x: int): bool =
  if x > 0 then isodd(x-1) else true
and
isodd(x: int): bool =
  if x > 0 then isevn(x-1) else false
')

読者の推測する通りですが、上記のコードは (2つの相互再帰値を定義するために) 次のような形にコンパイラによって変換されます:

#dats2xhtml('\
val
rec
isevn : int -> bool =
  lam (x) => if x > 0 then isodd(x-1) else true
and
isodd : int -> bool =
  lam (x) => if x > 0 then isevn(x-1) else false
')

もちろん非再帰関数の定義を連結するのに、キーワード #keycode("and") を使うことはできます。
しかし、そのような使用はまれでしょう。\

")
")

#langeng("
#para("\

Even at this point, I have not presented all of the possible ways to define
functions in ATS. For instance, one can also define stack-allocated
closure-functions in ATS, which may be either recursive or non-recursive.
I plan to introduce such functions elsewhere in this tutorial.

")
")
#langja("
#para("\

ここでは、ATS における関数定義の方法全てを紹介しませんでした。
例えば、ATS ではスタックに確保されたクロージャ関数を定義することもできます。
そしてこの関数は再帰的にも非再帰的にも定義できるのです。
このチュートリアルの別の章でそのような関数を紹介するかもしれません。

")
")

#langeng("
#para("\

Often, the interface (that is, type) for a function is declared at one
place and its definition (or implementation) is given at another place.
For instance, one may first introduce the following declaration:

#dats2xhtml('\
extern fun fact (x: int): int
')

Later, one can implement #dyncode("fact") according to the above declaration:

#dats2xhtml('\
implement
fact (x) =
  if x > 0 then x * fact(x-1) else 1
// end of [fact]
')

When #keycode("implement") is used to initiate the definition of a
function, any previously declared symbols (including the one that is
being defined) can appear in the definition. If it is desirable, one
may replace #keycode("implement") with #keycode("implmnt").

")
")
#langja("
#para("\

しばしば、ある場所で関数に対するインターフェイス (すなわち型) を宣言し、そしてその定義 (もしくは実装) を別の場所で与えることがあります。
例えば、はじめに次のような宣言を導入します:

#dats2xhtml('\
extern fun fact (x: int): int
')

その後、上記の宣言に一致する #dyncode("fact") を実装することができます:

#dats2xhtml('\
implement
fact (x) =
  if x > 0 then x * fact(x-1) else 1
// end of [fact]
')

関数定義の開始に #keycode("implement") が使われると、(それ自身を含む) 前に宣言したシンボルがその定義中に現われることができます。
好ましいなら、#keycode("implement") を #keycode("implmnt") に置き換えることもできます。

")
")

#langeng("
#para("\

Please find #mycodelink("chap_recursion.dats", "on-line") the entirety of the
code used in this chapter.\

")#comment("para")
")
#langja("
#para("\

この章で使ったコード全体は #mycodelink("chap_recursion.dats", "オンライン") から入手できます。\

")#comment("para")
")

</chapter><!--"recursion"-->

#comment(" ****** ****** ")

#comment(" end of [chap_recursion.atxt] ")

%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
implement main () = {
//
val filr =
  $STDIO.fopen_ref_exn ("../TEMP/chap_recursion.dats", file_mode_w)
val () = fprint_theCodeLst (filr)
val () = $STDIO.fclose_exn (filr)
//
val () = fprint_filsub (stdout_ref, "main_atxt.txt")
//
} (* end of [main] *)
%}
