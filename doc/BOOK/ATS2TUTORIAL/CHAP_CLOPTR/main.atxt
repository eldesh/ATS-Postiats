%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from [CHAP_CLOPTR/main.atxt].\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="cloptr">
#langeng("
#title("Linear Closure-Functions")
")
#langja("
#title("線形クロージャ関数")
")

<!-- ****** ****** -->

#langeng("
#para("

A closure-function is a boxed record that contains a pointer to an envless
function plus bindings that map certain names in the body of the envless
function to values. In practice, a function argument of a higher-order
function is often a closure-function (instead of an envless function). For
instance, the following higher-order function #dyncode("list_map_cloref")
takes a closure-function as its second argument:

#sats2xhtml('\
fun{
a:t@ype}{b:t@ype
} list_map_cloref{n:int}
  (xs: list (a, n), f: (a) -<cloref> b): list_vt (b, n)
')

")#comment("para")
")
#langja("
#para("

クロージャ関数はボックス化レコードで、無環境関数へのポインタと、その無環境関数内で使われる名前から値をマップする束縛を含んでいます。
実際には、高階関数の関数引数はしばしば (無環境関数の代わりに) クロージャ関数です。
例えば、次の高階関数 #dyncode("list_map_cloref") はその第2引数としてクロージャ関数を取ります:

#atscode('\
fun{
a:t@ype}{b:t@ype
} list_map_cloref{n:int}
  (xs: list (a, n), f: (a) -<cloref> b): list_vt (b, n)
')

")#comment("para")
")

#langeng("
#para("\

Closure-functions can be either linear or non-linear, and linear ones can
be explicitly freed in a safe manner. The keyword
#keycode("-&lt;cloref&gt;") is used to form a type for non-linear
closure-functions. As a variant of #dyncode("list_map_cloref"), the
following higher-order function #dyncode("list_map_cloptr") takes a linear
closure-function as its second argument:

#sats2xhtml('\
fun{
a:t@ype}{b:t@ype
} list_map_cloptr{n:int}
  (xs: list (a, n), f: !(a) -<cloptr> b): list_vt (b, n)
')

As can be easily guessed, the keyword #keycode("-&lt;cloptr&gt;") is used
to form a type for linear closure-functions.  Note that the symbol
#keycode("!") indicates that the second argument is still available after
a call to #dyncode("list_map_cloptr") returns.

")#comment("para")
")
#langja("
#para("\

クロージャ関数は線形にも非線形にも扱うことができ、線形クロージャ関数は安全な作法で明示的に解放することができます。
キーワード #keycode("-&lt;cloref&gt;") は非線形クロージャ関数の型を作るのに使われます。
#dyncode("list_map_cloref") の変形として、次の高階関数 #dyncode("list_map_cloptr")
はその第2引数として線形クロージャ関数を取ります:

#atscode('\
fun{
a:t@ype}{b:t@ype
} list_map_cloptr{n:int}
  (xs: list (a, n), f: !(a) -<cloptr> b): list_vt (b, n)
')

容易に推測できることですが、キーワード #keycode("-&lt;cloptr&gt;")
は線形クロージャ関数の型を作るのに使われます。
記号 #keycode("!") は、#dyncode("list_map_cloptr")
が返った後でも第2引数がまだ有効であることを示すことに注意してください。

")#comment("para")
")

#langeng("
#para('\

A typical example making use of #dyncode("list_map_cloptr") is given as follows:

#dats2xhtml('\
fun foo{n:int}
(
  x0: int, xs: list (int, n)
) : list_vt (int, n) = res where
{
//
val f = lam (x) =<cloptr> x0 + x
val res = list_map_cloptr (xs, f)
val () = cloptr_free ($UNSAFE.cast{cloptr(void)}(f))
//
} (* end of [foo] *)
')

Note that a linear closure is first created in the body of the function
#dyncode("foo"), and it is explicitly freed after its use. The function
#dyncode("cloptr_free") is given the following interface:

#sats2xhtml('\
fun cloptr_free {a:t0p} (pclo: cloptr (a)): void
')

where #stacode("cloptr") is abstract. The cast
#dyncode("$UNSAFE.cast{cloptr(void)}(f)") can certainly be replaced with
something safer but it would make programming more curbersome.

')#comment("para")
")
#langja("
#para('\

#dyncode("list_map_cloptr") の典型的な使用例は次のようになります:

#atscode('\
fun foo{n:int}
(
  x0: int, xs: list (int, n)
) : list_vt (int, n) = res where
{
//
val f = lam (x) =<cloptr> x0 + x
val res = list_map_cloptr (xs, f)
val () = cloptr_free ($UNSAFE.cast{cloptr(void)}(f))
//
} (* end of [foo] *)
')

線形クロージャは、最初に関数 #dyncode("foo")
の本体で生成されて、使用された後に明示的に解放されていることに注意してください。
関数 #dyncode("cloptr_free") は次のようなインターフェイスです:

#atscode('\
fun cloptr_free {a:t0p} (pclo: cloptr (a)): void
')

このとき #stacode("cloptr") は抽象的です。
キャスト #dyncode("$UNSAFE.cast{cloptr(void)}(f)")
は確かにより安全なものに変更できますが、プログラミングがより面倒になるでしょう。

')#comment("para")
")

#langeng("
#para('\

There is also some interesting interaction between currying and linear
closure-functions. In functional programming, currying means turning a
function taking multiple arguments simutaneously into a corresponding one
that takes these arguments sequentially. For instance, the function
#dyncode("acker2") in the following code is a curried version of the
function #dyncode("acker"), which implements the famous Ackermann function
(that is recursive but not primitive recursive):

#dats2xhtml('\
fun
acker(m:int, n:int): int =
(
  case+ (m, n) of
  | (0, _) => n + 1
  | (m, 0) => acker (m-1, 1)
  | (_, _) => acker (m-1, acker (m, n-1))
) (* end of [acker] *)

fun acker2 (m:int) (n:int): int = acker (m, n)
')

Suppose that we apply #dyncode("acker2") to two integers 3 and 4:
#dyncode("acker2(3)(4)"); the application #dyncode("acker2(3)") evaluates
to a (non-linear) closure-function; the application of this
closure-function to 4 evaluates to #dyncode("acker(3,4)"), which further
evaluates to the integer 125. Note that the closure-function generated from
evaluating #dyncode("acker2(3)") becomes a heap-allocated value that is no
longer accessible after the evaluation of #dyncode("acker2(3)(4)")
finishes, and the memory for such a value can only to be safely reclaimed
through garbage collection (GC).

')#comment("para")
")
#langja("
#para('\

また、カリー化と線形クロージャ関数の間にはいくつか興味深い相互作用があります。
関数型プログラミングではカリー化は、複数の引数を同時に取る関数を、それらの引数を連続して取るように変更することを意味します。
例えば、次のコードの関数 #dyncode("acker2") は関数 #dyncode("acker") のカリー化されたバージョンです。
この関数は有名な (原始再帰でない再帰である) アッカーマン関数を実装しています:

#atscode('\
fun
acker(m:int, n:int): int =
(
  case+ (m, n) of
  | (0, _) => n + 1
  | (m, 0) => acker (m-1, 1)
  | (_, _) => acker (m-1, acker (m, n-1))
) (* end of [acker] *)

fun acker2 (m:int) (n:int): int = acker (m, n)
')

#dyncode("acker2") に2つの整数 3 と 4 を適用したとしましょう:
#dyncode("acker2(3)(4)");
適用 #dyncode("acker2(3)") は (非線形な) クロージャ関数に評価されます;
このクロージャ関数に 4 を適用すると #dyncode("acker(3,4)")
に評価され、さらに評価されて整数 125 になります。
#dyncode("acker2(3)") を評価して生成されたクロージャ関数はヒープに確保された値で、#dyncode("acker2(3)(4)")
の評価が完了した後ではもはや利用できないことに注意してください。
そのような値のメモリは GC によって回収される必要があります。

')#comment("para")
")

#langeng("
#para('\

It is also possible to define a curried version of #dyncode("acker") as
follows:

#dats2xhtml('\
fun acker3 (m:int) = lam (n:int): int =<cloptr1> acker (m, n)
')

While the evaluation of #dyncode("acker3(3)(4)") yields the same result as
#dyncode("acker2(3)(4)"), the compiler of ATS (ATS/Postiats) inserts code
that automatically frees the linear closure-function generated from evaluating
#dyncode("acker3(3)") after the evaluation of #dyncode("acker3(3)(4)") finishes.

')#comment("para")
")
#langja("
#para('\

また #dyncode("acker") のカリー化されたバージョンを次のように定義することもできます:

#atscode('\
fun acker3 (m:int) = lam (n:int): int =<cloptr1> acker (m, n)
')

#dyncode("acker3(3)(4)") の評価は #dyncode("acker2(3)(4)") と同じ結果になりますが、ATS (ATS/Postiats)
コンパイラは

#dyncode("acker3(3)") の評価によって生成された線形クロージャ関数を
#dyncode("acker3(3)(4)") の評価が完了した後に自動解放するコードを挿入します。

')#comment("para")
")

#langeng("
#para("\

In ATS1, linear closure-functions play a pivotal role in supporting
programming with higher-order functions in the absence of GC. Due to
advanced support for templates in ATS2, the role played by linear
closure-functions in ATS1 is greatly diminished. However, if
closure-functions need to be stored in a data structure but GC is
unavailable or undesirable, then using linear closure-functions can lead to
a solution that avoids the risk of generatig memory leaks at run-time.

")#comment("para")
")
#langja("
#para("\

ATS1 では、GC
が使えない場面での高階関数利用したプログラミングをサポートするために、線形クロージャ関数は重要な役目を演じます。
ATS2 は高度なテンプレートをサポートするので、ATS1
で線形クロージャ関数が演じた役目は非常に弱まりました。
けれども、もし GC
が使えないもしくは望まれない場面でクロージャ関数をデータ構造に保存する必要があるのであれば、線形クロージャ関数の利用がメモリリークの危険を避ける解決策になるかもしれません。

")#comment("para")
")

#langeng("
#para("\

Please find #mycodelink("chap_cloptr.dats", "on-line") the entirety of the
code used in this chapter.\

")#comment("para")
")
#langja("
#para("\

この章で紹介したコードの全体は
#mycodelink("chap_cloptr.dats", "オンライン")
から入手できます。\

")#comment("para")
")

<!-- ****** ****** -->

</chapter><!--"cloptr"-->

#comment(" ****** ****** ")

#comment(" end of [chap_cloptr.atxt] ")

%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
implement main () = {
//
val filr =
  $STDIO.fopen_ref_exn ("../TEMP/chap_cloptr.dats", file_mode_w)
val () = fprint_theCodeLst (filr)
val () = $STDIO.fclose_exn (filr)
//
val () = fprint_filsub (stdout_ref, "main_atxt.txt")
//
} (* end of [main] *)
%}
