%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/int2proginats.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
id="datatypes">
#langeng("
#title("Datatypes")
")
#langja("
#title("データ型")
")

#langeng("
#para("\
The feature of datatypes in ATS in largely taken from ML.
")
")
#langja("
#para("\
ATS におけるデータ型の機能は ML の影響を強く受けています。
")
")

#langeng("
#para("\
A datatype is
like a tagged union type. For each datatype, there are some constructors
associated with it, and these constructors are needed for constructing
values of the datatype.  As an example, the following syntax declares a
datatype named #stacode("intopt"):

#sats2xhtml("\
datatype intopt =
  | intopt_none of () | intopt_some of (int)
// end of [intopt]
")

There are two constructors associated with #stacode("intopt"):
#dyncode("intopt_none"), which is nullary, and #dyncode("intopt_some"),
which is unary. For instance, #dyncode("intopt_none()") and
#dyncode("intopt_some(1)") are two values of the type #stacode("intopt").
In order for accessing components in such values, a mechanism often
referred to as pattern-matching is provided in ATS. I will demonstrate
through examples that datatypes plus pattern matching can offer not only
great convenience in programming but also clarity in code.\

")#comment("para")
")
#langja("
#para("\
データ型はタグ付きの共用体に似ています。
それぞれのデータ型には関連するコンストラクタがあり、
それらのコンストラクタはデータ型の値をコンストラクトしなければなりません。
例として次の構文は #stacode("intopt") という名前のデータ型を宣言しています:

#atscode("\
datatype intopt =
  | intopt_none of () | intopt_some of (int)
// end of [intopt]
")

#stacode("intopt") に関連した2つのコンストラクタが存在します:
引数のない #dyncode("intopt_none") と1引数の #dyncode("intopt_some") です。
例えば #dyncode("intopt_none()") と #dyncode("intopt_some(1)") は両方とも
#stacode("intopt") 型の値です。
そのような値の中の要素にアクセスするために、パターンマッチと呼ばれる仕組みを ATS では提供しています。
データ型とパターンマッチの組み合わせが、
プログラミングにおいて大変便利であるだけでなくコードを明快にもしてくれることを、
例を通して説明しようと思います。\

")#comment("para")
")

#langeng("
#para("\

The code employed for illustration in this chapter plus some additional
code for testing is available #mycodelink("CHAP_DATATYPE/", "on-line").\

")
")
#langja("
#para("\

この章で示すコードとテストのための追加コードは
#mycodelink("CHAP_DATATYPE/", "オンライン")
から入手できます。\

")
")

<sect1 id="patterns">
#langeng("
<title>Patterns</title>
")
#langja("
<title>パターン</title>
")

#langeng("
#para("\
Patterns in ATS can be defined inductively as follows:

<itemizedlist>

<listitem>
#para("\

Certain constant values such as integers, booleans, chars, floating point
numbers, and strings are patterns.\

")
</listitem>

<listitem>
#para("The void-value () is a pattern.")
</listitem>

<listitem>
#para("\
The underscore symbol #dyncode("_") represents a special wildcard pattern.
")
</listitem>

<listitem>
#para("\
Variables are patterns.
")
</listitem>

<listitem>
#para("
A tuple of patterns, either boxed or unboxed, is a pattern.
")
</listitem>

<listitem>
#para("
A record of patterns, either boxed or unboxed, is a pattern.
")
</listitem>

<listitem>
#para("\

Given a constructor C, a pattern can be formed by applying C to a given
list of patterns.\

")
</listitem>

<listitem>
#para("\

Given a variable x and a pattern pat, (x #dyncode("as") pat) is a
reference-pattern, where #dyncode("as") is a keyword.\

")
</listitem>

<listitem>
#para("
Some other forms of patterns will be introduced elsewhere.
")
</listitem>

</itemizedlist>

Each variable can occur at most once in a given pattern, and this is
referred as the linearity restriction on variables in patterns. For
instance, (x, x) is not a legal pattern as the variable x appears twice in
it. However, this restriction does not apply to the variable #dyncode("_"),
which represents the wildcard pattern.\

")#comment("para")
")
#langja("
#para("\
ATS におけるパターンは次のように帰納的に定義されています:

<itemizedlist>

<listitem>
#para("\

整数, ブール値, 文字, 浮動小数点数, 文字列のような定数の値はパターンです。\

")
</listitem>

<listitem>
#para("void 値はパターンです。")
</listitem>

<listitem>
#para("\
アンダースコア記号 #dyncode("_") は特別なワイルドカードパターンを意味しています。
")
</listitem>

<listitem>
#para("\
変数はパターンです。
")
</listitem>

<listitem>
#para("
ボックス化もしくはアンボックス化されたパターンのタプルはパターンです。
")
</listitem>

<listitem>
#para("
ボックス化もしくはアンボックス化されたパターンのレコードはパターンです。
")
</listitem>

<listitem>
#para("\

コンストラクタ C が与えられた時、与えられたパターンのリストに C を適用してパターンを作ることができます。\

")
</listitem>

<listitem>
#para("\

変数 x とパターン pat が与えられたとき、 (x #dyncode("as") pat) は参照パターンです。
ここで #dyncode("as") はキーワードです。\

")
</listitem>

<listitem>
#para("
その他のパターンの種類は別の章で解説します。
")
</listitem>

</itemizedlist>

与えられたパターンの中でそれぞれの変数は最大で一度までしか登場できません。
これはパターン中の値の線形性制限 (linearity restriction) と呼ばれています。
例えば (x, x) は変数xが二度現われるため、正しいパターンではありません。
けれどもこの制限はワイルドカードパターンである変数 #dyncode("_") にはあてはまりません。\

")#comment("para")
")

</sect1><!--id="patterns"-->

#comment(" ****** ****** ")

<sect1
id="pattern-matching">
#langeng("
<title>Pattern-Matching</title>
")
#langja("
<title>パターンマッチ</title>
")

#langeng("
#para("\

Pattern matching means matching values against patterns. In the case where
a value matches a pattern, a collection of bindings are generated between
the variables in the pattern and certain components in the
value. Pattern-matching is performed according to the following set of
rules:

<itemizedlist>

<listitem>
#para("\

A value that matches a constant pattern must be the same constant, and this
matching generates no bindings.\

")
</listitem>

<listitem>
#para("\

The void-value () only matches the void-pattern (), and this matching
generates no bindings.\

")
</listitem>

<listitem>
#para("\
Any value can match the wildcard pattern, and this matching generates no bindings.
")
</listitem>

<listitem>
#para("\

Any value can match a variable pattern, and this matching generates a
binding between the variable and the value.\

")
</listitem>

<listitem>
#para("\

A tuple-value matches a tuple-pattern if they are of the same length and
each value component in the former matches the corresponding pattern
component in the latter, and this matching generates a collection of
bindings that is the union of the bindings generated from matching the
value components in the tuple-value against the pattern components in the
tuple-pattern.\

")
</listitem>

<listitem>
#para("\

A record-value matches a record-pattern if they have the same field names
and each value component in the former matches the corresponding pattern
component in the latter, and this matching generates a collection of
bindings that is the union of the bindings generated from matching the
value components in the record-value against the pattern components in the
record-pattern.\

")
</listitem>

<listitem>
#para("\

Given a pattern formed by applying a constructor C to some pattern
arguments, a value matches this pattern if the value is formed by applying
C to some value arguments matching the pattern arguments, and this matching
generates a collection of bindings that is the union of the bindings
generated from matching the value arguments against the pattern arguments.\

")
</listitem>

<listitem>
#para("\

Given a referenced pattern (x #dyncode("as") pat), a value matches the
pattern if it matches pat, and this matching generates a collection of
bindings that extends the bindings generated from matching the value
against pat with a binding from x to the value.\

")
</listitem>

</itemizedlist>

Suppose we have a tuple-value (0, 1, 2, 3) and a tuple-pattern (0, _, x,
y). Then the value matches the pattern and this matching yields bindings
from x and y to 2 and 3, respectively.\

")#comment("para")
")
#langja("
#para("\

パターンマッチはパターンに対して値をマッチさせることです。
値がパターンにマッチする場合、
パターンマッチ中の変数と値の中の要素を結びつける束縛群が生成されます。
パターンマッチは次の一連のルールに従って実行されます:

<itemizedlist>

<listitem>
#para("\

定数のパターンにマッチする値は同じく定数でなければなりません。このマッチは束縛を作りません。\

")
</listitem>

<listitem>
#para("\

void 値 () はパターン () にのみマッチします。このマッチは束縛を作りません。\

")
</listitem>

<listitem>
#para("\
全ての値はワイルドカードパターンにマッチします。このマッチは束縛を作りません。
")
</listitem>

<listitem>
#para("\

全ての値は変数パターンにマッチします。このマッチは変数と値の束縛を作ります。\

")
</listitem>

<listitem>
#para("\

タプル値とタプルパターンは、それらが同じ長さで、前者のそれぞれの値要素が後者の対応するパターン要素にマッチする場合にマッチします。
そしてこのマッチは、マッチしたタプル中の値要素からタプルパターン中のパターン要素に対しての束縛集合を作ります。\

")
</listitem>

<listitem>
#para("\

レコード値とレコードパターンは、それらが同じフィールド名を持ち、前者のそれぞれの値要素が後者の対応するパターン要素にマッチする場合にマッチします。
そしてこのマッチは、マッチしたレコード中の値要素からレコードパターン中のパターン要素に対しての束縛集合を作ります。\

")
</listitem>

<listitem>
#para("\

コンストラクタ C をいくつかのパターン引数に適用したパターンが与えられた時、
パターン引数にマッチする値引数に C を適用した値があれば、その値がこのパターンにマッチします。
そしてこのマッチは、
値引数からパターン引数に対しての束縛の集合を作ります。\

")
</listitem>

<listitem>
#para("\

参照パターン (x #dyncode("as") pat) が与えられた時、
値が pat にマッチしたらその値はこのパターンにマッチします。
そしてこのマッチは、値を pat にマッチさせて x から値への束縛を作ります。\

")
</listitem>

</itemizedlist>

タプル値 (0, 1, 2, 3) とタプルパターン (0, _, x, y) があるとします。
するとこの値はこのパターンにマッチして、このマッチによって x と y が 2 と 3 をそれぞれ束縛します。\

")#comment("para")
")

</sect1><!--id="pattern-matching"-->

#comment(" ****** ****** ")

<sect1
id="matching_clauses_and_case-expressions">
#langeng("
<title>Matching Clauses and Case-Expressions</title>
")
#langja("
<title>マッチ節とケース式</title>
")

#langeng("
#para("\
Given a pattern pat and an expression exp, (pat #dyncode("=>") exp) is a
matching clause. The pattern pat and the expression exp are referred to as
the guard and the body of the matching clause.
")
")
#langja("
#para("\
パターン pat と式 exp が与えられた時、(pat #dyncode("=>") exp) はマッチ節です。
このパターン pat と式 exp は、ガードとマッチ節の中身と呼ばれます。
")
")

#langeng("
#para("\

Given an expression exp0 and a sequence of matching clauses clseq, a
case-expression can be formed as such: (#dyncode("case") exp0
#dyncode("of") clseq). To evaluate the case-expression under a given
environment ENV0, we first evaluate exp0 under ENV0 to a value. If this
value does not match the guard of any clause in clseq, then the evaluation
of the case-expression aborts. Otherwise, we choose the first clause in
clseq such that the value matches the guard of the clause. Let ENV1 be the
environment that extends ENV0 with the bindings generated from this
matching, and we evaluate the body of the chosen clause under ENV1. The
value obtained from this evaluation is the value of the case-expression
being evaluated.  ")
")
#langja("
#para("\

式 exp0 とマッチ節の列 clseq が与えられた時、(#dyncode("case") exp0 #dyncode("of") clseq)
のようにケース式を作ることができます。
与えられた環境 ENV0 でケース式を評価すると、
まずはじめに ENV0 において exp0 を評価して値を得ます。
もしこの値が clseq 中のどの節のガードにもマッチしない場合、ケース式の評価は中断されます。
そうでない場合、この値が節のガードにマッチするような clseq の最初の節を選びます。
このマッチによって生成された束縛を ENV0 に追加した新しい環境 ENV1 を作り、
そして ENV1 において選んだ節の中身を評価します。
評価されたケース式の値がこの評価によって得られる値になります。  ")
")

</sect1><!--id="matching_clauses_and_case-expressions"-->

#comment(" ****** ****** ")

<sect1
id="enumerative_datatypes">
#langeng("
<title>Enumerative Datatypes</title>
")
#langja("
<title>列挙データ型</title>
")

#langeng("
#para("\

The simplest form of datatypes is for enumerating a finite number of
constants. For instance, the following concrete syntax introduces a
datatype of the name #stacode("wday"):

#sats2xhtml("\
datatype wday =
  | Monday of ()
  | Tuesday of ()
  | Wednesday of ()
  | Thursday of ()
  | Friday of ()
  | Saturday of ()
  | Sunday of ()
// end of [wday]
")

where the first bar symbol (|) is optional.  There are 7 nullary
constructors introduced in the datatype declaration: #dyncode("Monday")
through #dyncode("Sunday"), which are for constructing values of the type
#stacode("wday"). For instance, #dyncode("Monday()") is a value of the type
#dyncode("wday"). Given a nullary constructor C, we can write C for C() as
a value. For instance, we can write #dyncode("Monday") for
#dyncode("Monday()"). However, one should <emphasis>not</emphasis> assume
that #dyncode("Tuesday") is something like #dyncode("Monday+1").\

")#comment("para")
")
#langja("
#para("\

最も簡単なデータ型は有限個の定数を列挙したものです。
例えば、次の具体的な構文は #stacode("wday") という名前のデータ型を導入します:

#atscode("\
datatype wday =
  | Monday of ()
  | Tuesday of ()
  | Wednesday of ()
  | Thursday of ()
  | Friday of ()
  | Saturday of ()
  | Sunday of ()
// end of [wday]
")

ここで最初の記号 (|) は省略できます。
7つの引数のないコンストラクタがデータ宣言によって作られています:
つまり #stacode("wday") 型の値をコンストラクトする #dyncode("Monday") から #dyncode("Sunday") です。
例えば #dyncode("Monday()") は #dyncode("wday") 型の値です。
引数のないコンストラクタ C が与えられた時、 C() と書くと値になります。
例えば #dyncode("Monday") は #dyncode("Monday()") と書くことができます。
けれども #dyncode("Tuesday") が #dyncode("Monday+1") のような何かであると考えるべきでは<emphasis>ありません</emphasis>。\

")#comment("para")
")

#langeng("
#para("\

The following code implements a function that tests whether a given value
of the type #stacode("wday") is a weekday or not:

#dats2xhtml("\
fun isWeekday
  (x: wday): bool = case x of
  | Monday() => true // the first bar (|) is optional
  | Tuesday() => true
  | Wednesday() => true
  | Thursday() => true
  | Friday() => true
  | Saturday() => false
  | Sunday() => false
// end of [isWeekday]
")

Given a unary constructor C, C() is a pattern that can only match the value
C(). Note that C() <emphasis>cannot</emphasis> be written as C when it is
used as a pattern. If #dyncode("Monday()") is written as #dyncode("Monday") in
the body of the function #dyncode("isWeekday"), then an error message is to be
reported during typechecking, indicating that all the clauses after the
first one are redundant. This is simply due to #dyncode("Monday") being
treated as a variable pattern, which is matched by any value. A likely more
sensible implementation of #dyncode("isWeekday") is given as follows:

#dats2xhtml("\
fun isWeekday
  (x: wday): bool = case x of
  | Saturday() => false | Sunday() => false | _ => true
// end of [isWeekday]
")

This implementation works because pattern-matching is done sequentially at
run-time: If a value of the type #stacode("wday") does not match either of
#dyncode("Saturday()") and #dyncode("Sunday()"), then it must match one of
#dyncode("Monday()") , #dyncode("Tuesday()") , #dyncode("Wednesday()") ,
#dyncode("Thursday()"), and #dyncode("Friday()").\

")#comment("para")
")
#langja("
#para("\

次のコードでは、与えられた #stacode("wday") 型の値が平日かどうか検査する関数を実装しています:

#atscode("\
fun isWeekday
  (x: wday): bool = case x of
  | Monday() => true // the first bar (|) is optional
  | Tuesday() => true
  | Wednesday() => true
  | Thursday() => true
  | Friday() => true
  | Saturday() => false
  | Sunday() => false
// end of [isWeekday]
")

引数のないコンストラクタ C が与えられた時、C() パターンは値 C() にのみマッチします。
パターンとして使う時、C() を C のように書くことが<emphasis>できない</emphasis>ことに注意してください。
もし #dyncode("isWeekday") 関数の中で #dyncode("Monday()") を #dyncode("Monday") のように書くと、
最初の節以降の全ての節が余分であることを示すエラーメッセージが型検査時に出ます。
これは単に #dyncode("Monday") が変数パターンとして解釈されたためで、
このパターンはどのような値にもマッチするからです。
#dyncode("isWeekday") のよりよい実装は次のようなものでしょう:

#atscode("\
fun isWeekday
  (x: wday): bool = case x of
  | Saturday() => false | Sunday() => false | _ => true
// end of [isWeekday]
")

パターンマッチは実行時に順番に処理されるので、この実装はうまく動きます:
#stacode("wday") 型の値が #dyncode("Saturday()") にも #dyncode("Sunday()") にもマッチしなければ、
その値は
#dyncode("Monday()") , #dyncode("Tuesday()") , #dyncode("Wednesday()") , #dyncode("Thursday()") , #dyncode("Friday()")
のどれが1つにマッチするはずです。\

")#comment("para")
")

</sect1><!--id="enumerative_datatypes"-->

#comment(" ****** ****** ")

<sect1
id="recursive_datatypes">
#langeng("
<title>Recursively Defined Datatypes</title>
")
#langja("
<title>再帰的に定義されたデータ型</title>
")

#langeng("
#para("\

A recursively defined datatype (or recursive datatype for short) is one
such that its associated constructors may form values by applying to values
of the datatype itself. For instance, the following declared datatype
#stacode("charlst") is recursive:

#sats2xhtml("\
datatype charlst =
  | charlst_nil of () | charlst_cons of (char, charlst)
// end of [charlst]
")

When applied to a character and a value of the type #stacode("charlst"),
the constructor #dyncode("charlst_cons") forms a value of the type
#stacode("charlst"). As an example, the following value represents a
character list consisting of 'a', 'b' and 'c':

#atscode("\
charlst_cons('a', charlst_cons('b', charlst_cons('c', charlst_nil())))
")

We can define a function #dyncode("charlst_length") as follows to compute
the length of a given character list:

#dats2xhtml("\
fun
charlst_length
  (cs: charlst): int = case cs of
  | charlst_cons (_, cs) => 1 + charlst_length (cs)
  | charlst_nil () => 0
// end of [charlst_length]
")

Note that this implementation is recursive but not tail-recursive. By
relying on the commutativity and associativity of integer addition, we can
give the following implementation of #dyncode("charlst_length") that is
tail-recursive:

#dats2xhtml("\
fun
charlst_length
  (cs: charlst): int = let
//
fun loop
  (cs: charlst, n: int): int = case cs of
  | charlst_cons (_, cs) => loop (cs, n+1) | charlst_nil () => n
// end of [loop]
//
in
  loop (cs, 0)
end // end of [charlst_length]
")

Note that the naming convention I follow closely in this book (and
elsewhere) mandates that only a tail-recursive function be given a name
indicative of its being a loop. A non-tail-recursive function is not called
a loop because it cannot be translated directly to a loop in an imperative
programming language like C.

")#comment("para")
")
#langja("
#para("\

再帰的に定義されたデータ型 (もしくは再帰的データ型と略します) とは、そのコンストラクタがそのデータ型自身の値に適用するような値を作ることです。
例えば次に宣言するデータ型 #stacode("charlst") は再帰的です:

#atscode("\
datatype charlst =
  | charlst_nil of () | charlst_cons of (char, charlst)
// end of [charlst]
")

文字と #stacode("charlst") の型の値に適用されると、
#dyncode("charlst_cons") コンストラクタは #stacode("charlst") 型の値を作ります。
例として、次の値は 'a', 'b', 'c' から成る文字のリストを表現しています:

#atscode("\
charlst_cons('a', charlst_cons('b', charlst_cons('c', charlst_nil())))
")

与えられたリストの長さを算出する関数 #dyncode("charlst_length") を次のように定義できます:

#atscode("\
fun charlst_length
  (cs: charlst): int = case cs of
  | charlst_cons (_, cs) => 1 + charlst_length (cs)
  | charlst_nil () => 0
// end of [charlst_length]
")

この実装は再帰ですが、末尾再帰ではないことに注意してください。
整数の加法の交換法則と結合法則を使って、
#dyncode("charlst_length") を次のように末尾再帰で実装することができます:

#atscode("\
fun charlst_length
  (cs: charlst): int = let
//
fun loop
  (cs: charlst, n: int): int = case cs of
  | charlst_cons (_, cs) => loop (cs, n+1) | charlst_nil () => n
// end of [loop]
//
in
  loop (cs, 0)
end // end of [charlst_length]
")

この本では命名規約として、
末尾再帰関数にのみ loop という名前を割り当てることに注意してください。
C言語のような命令型プログラミング言語のループに変換することができないので、
末尾再帰でない関数は loop と呼ぶことはできません。

")#comment("para")
")

</sect1><!--id="recursive_datatypes"-->

#comment(" ****** ****** ")

<sect1
id="exhaustiveness_of_pattern-matching">
#langeng("
<title>Exhaustiveness of Pattern-Matching</title>
")
#langja("
<title>網羅的なパターンマッチ</title>
")

#langeng("
#para("\

Given a type T and a set of patterns, if for any given value of the type T
there is always at least one pattern in the set such that the value matches
the pattern, then pattern-matching values of the type T against the set of
patterns is exhaustive.  Given a case-expression of the form
(#dyncode("case") exp0 #dyncode("of") clseq), where exp0 is assumed to be of
some type T, if pattern-matching values of the type T against the guards of
the matching clauses in clseq is exhaustive, then the case-expression is
said to be pattern-matching-exhaustive.\

")#comment("para")
")
#langja("
#para("\

T 型と複数のパターンが与えられた時、どのような T 型の値に対しても必ず一つ以上のパターンがマッチするなら、このパターン群を使った T 型の値のパターンマッチは網羅的です。
exp0 が型 T で、ケース式 (#dyncode("case") exp0 #dyncode("of") clseq) が与えらた時、clseq 中のマッチ節のガードに対して型 T の値のパターンマッチが網羅的であるなら、このケース式は網羅的なパターンマッチであると呼ばれます。\

")#comment("para")
")

#langeng("
#para("\
The following code implements a function that finds the last character
in a non-empty character list:

#dats2xhtml("\
fun
charlst_last
  (cs: charlst): char =
(
  case cs of
  | charlst_cons (c, charlst_nil ()) => c
  | charlst_cons (_, cs1) => charlst_last (cs1)
)
// end of [charlst_last]
")

The body of #dyncode("charlst_last") is a case-expression, which is not
pattern-matching-exhaustive: If #dyncode("cs") is bound to the value
#dyncode("charlst_nil()"), that is, the empty character list, than none of
the matching clauses in the case-expression can be chosen. When the code is
typechecked by atsopt, a warning message is issued to indicate the
case-expression being non-pattern-matching-exhaustive. If the programmer
wants an error message instead, the keyword #dyncode("case") should be
replaced with #dyncode("case+").  If the programmer wants to suppress the
warning message, the keyword #dyncode("case") should be replaced with
#dyncode("case-"). I myself mostly use #dyncode("case+") when coding in
ATS.\

")#comment("para")
")
#langja("
#para("\
次のコードは空でない文字リストの最後の文字を見つけるような関数の実装です:

#atscode("\
fun charlst_last
  (cs: charlst): char =
(
  case cs of
  | charlst_cons (c, charlst_nil ()) => c
  | charlst_cons (_, cs1) => charlst_last (cs1)
)
// end of [charlst_last]
")

#dyncode("charlst_last") の本体は網羅的なパターンマッチではないケース式です:
#dyncode("cs") が値 #dyncode("charlst_nil()") つまり空の文字リストに束縛されている場合、
ケース式のどのマッチ節も選択されません。
このコードが atsopt に型検査されると、ケース式が網羅的なパターンマッチではないことを示す警告メッセージが出力されます。
もし代わりにエラーメッセージとしてプログラマが扱いたい場合、#dyncode("case") キーワードを #dyncode("case+") で置き換えるべきです。
もしこの警告メッセージをプログラマが抑制したい場合、#dyncode("case") キーワードを #dyncode("case-") で置き換えるべきです。
私自身が ATS でコーディングする場合 #dyncode("case+") をほとんど使います。\

")#comment("para")
")

#langeng("
#para("\

The function #dyncode("charlst_last") can also be implemented as follows:

#dats2xhtml("\
fun
charlst_last
  (cs: charlst): char =
(
  case cs of
  | charlst_cons (c, cs1) =>
    (
      case+ cs1 of
      | charlst_nil () => c | charlst_cons _ => charlst_last (cs1)
    ) // end of [charlst_cons]
) // end of [charlst_last]
")

In this implementation, the outer case-expression is not
pattern-matching-exhaustive while the inner one is. Note that the pattern
#dyncode("charlst_cons _") is just a shorthand for
#dyncode("charlst_cons(_, _)"). In general, a pattern of the form
#dyncode("C _"), where C is a constructor (associated with some datatype),
can be matched by any value that is constructed by applying C to some
values. For instance, the pattern #dyncode("charlst_nil()") can also be
written as #dyncode("charlst_nil _").\

")#comment("para")
")
#langja("
#para("\

関数 #dyncode("charlst_last") はまた次のように実装することもできます:

#atscode("\
fun charlst_last
  (cs: charlst): char =
(
  case cs of
  | charlst_cons (c, cs1) =>
    (
      case+ cs1 of
      | charlst_nil () => c | charlst_cons _ => charlst_last (cs1)
    ) // end of [charlst_cons]
) // end of [charlst_last]
")

この実装では、内側のケース式は網羅的なパターンマッチですが、外側のケース式はそうではありません。
パターン #dyncode("charlst_cons _") は #dyncode("charlst_cons(_, _)") の略記であることに注意してください。
一般的に、C がなんらかのデータ型に対応するコンストラクタである時、#dyncode("C _")
パターンは C をなんらかの値に適用してコンストラクトされたどのような値にもマッチします。
例えば、パターン #dyncode("charlst_nil()") は #dyncode("charlst_nil _") と書くこともできます。\

")#comment("para")
")

#langeng("
#para("\

Suppose we have a case-expression containing only one matching clause, that
is, the case-expression is of the form [#dyncode("case") exp0
#dyncode("of") pat #dyncode("=>") exp].  Then we can also write this
case-expression as a let-expression: (#dyncode("let") #dyncode("val") pat
#dyncode("=") exp0 #dyncode("in") exp #dyncode("end")). For instance, we
give another implementation of the function #dyncode("charlst_last") as
follows:

#dats2xhtml("\
fun
charlst_last
  (cs: charlst): char = let
  val charlst_cons (c, cs1) = cs in case+ cs1 of
  | charlst_nil () => c | charlst_cons _ => charlst_last (cs1)
end // end of [charlst_last]
")

When this implementation is typechecked by atsopt, a warning message is
issued to indicate the val-declaration being
non-pattern-matching-exhaustive. If the programmer wants an error message
instead, the keyword #dyncode("val") should be replaced with
#dyncode("val+").  If the programmer wants to suppress the warning message,
the keyword #dyncode("val") should be replaced with #dyncode("val-").\

")#comment("para")
")
#langja("
#para("\

たった1つだけマッチ節を持つケース式、つまり [#dyncode("case") exp0 #dyncode("of") pat #dyncode("=>") exp] という形のケース式を考えましょう。
するとこのケース式は
(#dyncode("let") #dyncode("val") pat #dyncode("=") exp0 #dyncode("in") exp #dyncode("end"))
のように let 式で書くこともできます:
例えば、関数 #dyncode("charlst_last") は次のような別の実装をすることができます:

#atscode("\
fun charlst_last
  (cs: charlst): char = let
  val charlst_cons (c, cs1) = cs in case+ cs1 of
  | charlst_nil () => c | charlst_cons _ => charlst_last (cs1)
end // end of [charlst_last]
")

この実装が atsopt で型検査されると、val
宣言が網羅的なパターンマッチでないことを示す警告メッセージが出力されます。
もし代わりにエラーメッセージとしてプログラマが扱いたい場合、#dyncode("val") キーワードを
#dyncode("val+") で置き換えるべきです。
もしこの警告メッセージをプログラマが抑制したい場合、#dyncode("val")
キーワードを #dyncode("val-") で置き換えるべきです。\

")#comment("para")
")

#langeng("
#para("\

As values formed by the constructors #dyncode("charlst_nil") and
#dyncode("charlst_cons") are assigned the same type #stacode("charlst"), it
is impossible to rely on typechecking to prevent the function
#dyncode("charlst_last") from being applied to an empty character list.
This is a serious limitation.  With dependent types, which allow data to be
described much more precisely, we can ensure at the level of types that a
function finding the last element of a list can only be applied to a
non-empty list.\

")
")
#langja("
#para("\

コンストラクタ #dyncode("charlst_nil") と #dyncode("charlst_cons") で作られる値が同じ型 #stacode("charlst")
を持つ時、関数
#dyncode("charlst_last") が空の文字リストに適用されてしまうことを型検査で防止することは不可能です。
これは深刻な制限です。
データをより正確に表現できる依存型を使えば、リストの最後の要素を見つける関数を空でないリストにのみ適用することを、型のレベルで保証できるようになります。\

")
")

</sect1><!--id="exhaustiveness_of_pattern-matching"-->

#comment(" ****** ****** ")

<sect1
id="example_binary_search_tree">
#langeng("
<title>Example: Binary Search Tree</title>
")
#langja("
<title>例: 2分探索木</title>
")

#langeng("
#para("\

A binary search tree is a binary tree satisfying the following property:
for each node in the tree, the key stored in the node is greater than or
equal to every key stored in the left child of the node and less than or
equal to every key stored in the right child of the node. In other words, a
binary tree is a binary search tree if a pre-order traversal encounters a
sequence of keys ordered ascendingly (according to some ordering on keys). In
practice, binary search trees are commonly employed to represent sets and
maps.

")
")
#langja("
#para("\

2分探索木は次の性質を満たすような二分木です:
ツリーのそれぞれのノードについて、ノードの中に保存されているそれぞれのキーは、そのノードの左の子に保存されている全てのキー以上で、そのノードの右の子に保存されている全てのキー以下です。
別の言い方をすると、深さ優先探索で走査すると昇順のキーの列が得られるような二分木は2分探索木です。
実際には、2分探索木は集合や写像を表現する際によく使われます。

")
")

#langeng("
#para("\

The following declaration introduces a datatype #stacode("bstree") for
binary search trees in which the stored keys are strings:

")
")
#langja("
#para("\

次のコードは、保存されたキーが文字列である2分探索木を表わすデータ型 #stacode("bstree") を宣言しています:

")
")

#sats2xhtml("\
datatype bstree =
  | E of () | B of (bstree, string, bstree)
// end of [bstree]
")

#langeng("
#para("\

It should be noted that not every value of the type #stacode("bstree")
represents a valid binary search tree as it is certainly possible to
construct a value representing a binary tree but not a binary search tree.

")
")
#langja("
#para("\

#stacode("bstree") 型の全ての値が有効な2分探索木を表現していないことに注意すべきです。
2分探索木ではない二分木を表現する値をコンストラクトする可能性があります。

")
")

#langeng("
#para("\

The following function [bstree_inord] does a in-order traversal of a
given binary tree:

")
")
#langja("
#para("\

次の関数 [bstree_inord] は与えられた二分木を間順走査します:

")
")

#dats2xhtml("\
fun
bstree_inord
(
  t0: bstree, fwork: string -<cloref1> void
) : void =
(
case+ t0 of
| E () => ()
| B (t1, k, t2) =>
  {
    val () = bstree_inord (t1, fwork)
    val () = fwork (k)
    val () = bstree_inord (t2, fwork)
  }
) (* end of [bstree_inord] *)
")

#langeng("
#para("\

If [t0] is a binary search tree, then the sequence of
keys processed by [fwork] are ordered ascendingly.

")
")
#langja("
#para("\

[t0] が2分探索木であるなら、 [fwork] によって作られるキーの列は昇順になります。

")
")

#langeng("
#para("\

Given a binary search tree and a key, the following function
[bstree_search] checks whether the key is stored inside the tree:

")
")
#langja("
#para("\

2分探索木とキーが与えられると、次の関数 [bstree_search]
はそのキーがその探査木の中に保存されているかどうか調べます:

")
")

#dats2xhtml("\
fun
bstree_search
(
  t0: bstree, k0: string
) : bool =
(
//
case+ t0 of
| E () => false
| B (t1, k, t2) => let
    val sgn = compare (k0, k)
  in
    case+ 0 of
    | _ when sgn < 0 => bstree_search (t1, k0)
    | _ when sgn > 0 => bstree_search (t2, k0)
    | _ (*k0 = k*) => true
  end // end of [B]
//
) (* end of [bstree_search] *)
")

#langeng("
#para("\

Note that [bstree_search] returns true if the given key is
found. Otherwise, it returns false.

")
")
#langja("
#para("\

与えられたキーが見つかれば [bstree_search] は true を返し、見つからなければ false を返します。

")
")

#langeng("
#para("\

Given a binary search tree and a key, the following function
[bstree_insert] inserts the key into the tree:

")
")
#langja("
#para("\

2分探索木とキーが与えられると、次の関数 [bstree_insert] はその探索木にそのキーを挿入します:

")
")

#dats2xhtml("\
fun
bstree_insert
(
  t0: bstree, k0: string
) : bstree =
(
//
case+ t0 of
| E () => B (E, k0, E)
| B (t1, k, t2) => let
    val sgn = compare (k0, k)
  in
    case+ 0 of
    | _ when sgn < 0 => B (bstree_insert (t1, k0), k, t2)
    | _ when sgn > 0 => B (t1, k, bstree_insert (t2, k0))
    | _ (*k0 = k*) => t0 // [k0] found and no actual insertion
  end // end of [B]
//
) (* end of [bstree_insert] *)
")

#langeng("
#para("\

Note that [bstree_insert] inserts the key only if it is not already stored
inside the given tree. Also, if inserted, the key is always stored in a newly
created leaf node.

")
")
#langja("
#para("\

キーが与えられた探索木の中に含まれていない時のみ、[bstree_insert] はキーを挿入することに注意してください。
もし挿入する場合、そのキーを新しく作った葉ノードに格納します。

")
")

#langeng("
#para("\

Please find
#mycodelink("CHAP_DATATYPE/bstree.dats", "on-line")
the entirety of the code in this section plus some additional code for
testing.\

")
")
#langja("
#para("\

この章で紹介したコード全体と追加のテストコードは
#mycodelink("CHAP_DATATYPE/bstree.dats", "オンライン")
から入手できます。
(訳注: このコードを atscc でコンパイルする際には -DATS_MEMALLOC_LIBC オプションが必要です。)\

")
")

</sect1><!--id="example_binary_search_tree"-->

#comment(" ****** ****** ")

<sect1
id="example_evaluating_integer_expressions">
#langeng("
<title>Example: Evaluating Integer Expressions</title>
")
#langja("
<title>例: 整数式の評価</title>
")

#langeng("
#para("\

For representing integer expressions, we declare a datatype
#stacode("IEXP") as follows:

#sats2xhtml("\
datatype IEXP =
  | IEXPcst of int // constants
  | IEXPneg of (IEXP) // negative
  | IEXPadd of (IEXP, IEXP) // addition
  | IEXPsub of (IEXP, IEXP) // subtraction
  | IEXPmul of (IEXP, IEXP) // multiplication
  | IEXPdiv of (IEXP, IEXP) // division
// end of [IEXP]
")

The meaning of the constructors associated with #stacode("IEXP") should be
obvious. A value of the type #stacode("IEXP") is often referred to as an
abstract syntax tree. For instance, the abstract syntax tree for the
expression (~1+(2-3)*4) is the following one:

#atscode("\
IEXPadd(IEXPneg(IEXPcst(1)), IEXPmul(IEXPsub(IEXPcst(2), IEXPcst(3)), IEXPcst(4)))
")

Translating an integer expression written in some string form into an
abstract syntax tree is called parsing, which we will not do here. The
following defined function #dyncode("eval_iexp") takes the abstract syntax
tree of an integer expression and returns an integer that is the value of
the expression:

#dats2xhtml("\
fun
eval_iexp
  (e0: IEXP): int =
(
case+ e0 of
| IEXPcst (n) => n
| IEXPneg (e) => ~eval_iexp (e)
| IEXPadd (e1, e2) => eval_iexp (e1) + eval_iexp (e2)
| IEXPsub (e1, e2) => eval_iexp (e1) - eval_iexp (e2)
| IEXPmul (e1, e2) => eval_iexp (e1) * eval_iexp (e2)
| IEXPdiv (e1, e2) => eval_iexp (e1) / eval_iexp (e1)
) (* end of [eval_iexp] *)
")
")#comment("para")
")
#langja("
#para("\

整数式を表現するために、次のようなデータ型 #stacode("IEXP") を宣言しましょう:

#atscode("\
datatype IEXP =
  | IEXPcst of int // constants
  | IEXPneg of (IEXP) // negative
  | IEXPadd of (IEXP, IEXP) // addition
  | IEXPsub of (IEXP, IEXP) // subtraction
  | IEXPmul of (IEXP, IEXP) // multiplication
  | IEXPdiv of (IEXP, IEXP) // division
// end of [IEXP]
")

#stacode("IEXP") に関連するコンストラクタの意味は明確です。
#stacode("IEXP") 型の値はしばしば抽象構文木と呼ばれます。
例えば、式 (~1+(2-3)*4) の抽象構文木は次のようになります:

#atscode("\
IEXPadd(IEXPneg(IEXPcst(1)), IEXPmul(IEXPsub(IEXPcst(2), IEXPcst(3)), IEXPcst(4)))
")

文字列で書かれた整数式を抽象構文木へ変換することを構文解析と呼びますが、ここでは取り扱いません。
次に定義する関数 #dyncode("eval_iexp") は整数式の抽象構文木を取り、式の値である整数を返します:

#atscode("\
fun eval_iexp (e0: IEXP): int = case+ e0 of
  | IEXPcst (n) => n
  | IEXPneg (e) => ~eval_iexp (e)
  | IEXPadd (e1, e2) => eval_iexp (e1) + eval_iexp (e2)
  | IEXPsub (e1, e2) => eval_iexp (e1) - eval_iexp (e2)
  | IEXPmul (e1, e2) => eval_iexp (e1) * eval_iexp (e2)
  | IEXPdiv (e1, e2) => eval_iexp (e1) / eval_iexp (e1)
// end of [eval_iexp]
")
")#comment("para")
")

#langeng("
#para("\

Suppose we also allow the construct if-then-else to be use in forming
integer expressions. For instance, we may write an integer expression like
(if 1+2 <= 3*4 then 5+6 else 7-8). Note that the test (1+2 <= 3*4) is a
boolean expression rather than an integer expression. This indicates that
we also need to declare a datatype #stacode("BEXP") for representing
boolean expressions. Furthermore, #stacode("IEXP") and #stacode("BEXP")
should be defined mutually recursively as follows:

#sats2xhtml("\
datatype IEXP =
  | IEXPcst of int // integer constants
  | IEXPneg of (IEXP) // negative
  | IEXPadd of (IEXP, IEXP) // addition
  | IEXPsub of (IEXP, IEXP) // subtraction
  | IEXPmul of (IEXP, IEXP) // multiplication
  | IEXPdiv of (IEXP, IEXP) // division
  | IEXPif of (BEXP(*test*), IEXP(*then*), IEXP(*else*))
// end of [IEXP]

and BEXP = // [and] for combining datatype declarations
  | BEXPcst of bool // boolean constants
  | BEXPneg of BEXP // negation
  | BEXPconj of (BEXP, BEXP) // conjunction
  | BEXPdisj of (BEXP, BEXP) // disjunction
  | BEXPeq of (IEXP, IEXP) // equal-to
  | BEXPneq of (IEXP, IEXP) // not-equal-to
  | BEXPlt of (IEXP, IEXP) // less-than
  | BEXPlte of (IEXP, IEXP) // less-than-equal-to
  | BEXPgt of (IEXP, IEXP) // greater-than
  | BEXPgte of (IEXP, IEXP) // greater-than-equal-to
// end of [BEXP]
")

Evidently, we also need to evaluate boolean expressions when evaluating
integer expressions. The following two functions #dyncode("eval_iexp") and
#dyncode("eval_bexp") for evaluating integer and boolean expressions,
respectively, are defined mutually recursively as can be expected:

#dats2xhtml("\
fun
eval_iexp
(
  e0: IEXP
) : int = (
//
case+ e0 of
| IEXPcst n => n
| IEXPneg (e) => ~eval_iexp (e)
| IEXPadd (e1, e2) => eval_iexp (e1) + eval_iexp (e2)
| IEXPsub (e1, e2) => eval_iexp (e1) - eval_iexp (e2)
| IEXPmul (e1, e2) => eval_iexp (e1) * eval_iexp (e2)
| IEXPdiv (e1, e2) => eval_iexp (e1) / eval_iexp (e1)
| IEXPif
  (
    e_test, e_then, e_else
  ) =>
  (
    eval_iexp (if eval_bexp (e_test) then e_then else e_else)
  ) // end of [IEXPif]
//
) (* end of [eval_iexp] *)

and
eval_bexp
(
  e0: BEXP
) : bool = (
//
case+ e0 of
| BEXPcst b => b
| BEXPneg (e) => ~eval_bexp (e)
| BEXPconj (e1, e2) =>
    if eval_bexp (e1) then eval_bexp (e2) else false
| BEXPdisj (e1, e2) =>
    if eval_bexp (e1) then true else eval_bexp (e2)
| BEXPeq (e1, e2) => eval_iexp (e1) = eval_iexp (e2)
| BEXPneq (e1, e2) => eval_iexp (e1) != eval_iexp (e2)
| BEXPlt (e1, e2) => eval_iexp (e1) < eval_iexp (e2)
| BEXPlte (e1, e2) => eval_iexp (e1) <= eval_iexp (e2)
| BEXPgt (e1, e2) => eval_iexp (e1) > eval_iexp (e2)
| BEXPgte (e1, e2) => eval_iexp (e1) >= eval_iexp (e2)
//
) (* end of [eval_bexp] *)
")
")#comment("para")
")
#langja("
#para("\

整数式を成すのに if-then-else もコンストラクトできると考えてみましょう。
例えば (if 1+2 <= 3*4 then 5+6 else 7-8) のような整数式を書けるとします。
(1+2 <= 3*4) の判定は整数式ではなくブール式であることに注意してください。
これは、ブール式を表現するデータ型 #stacode("BEXP") も宣言する必要があることを示しています。
その上 #stacode("IEXP") と #stacode("BEXP") は次のように相互再帰的に宣言されるべきです:

#atscode("\
datatype IEXP =
  | IEXPcst of int // integer constants
  | IEXPneg of (IEXP) // negative
  | IEXPadd of (IEXP, IEXP) // addition
  | IEXPsub of (IEXP, IEXP) // subtraction
  | IEXPmul of (IEXP, IEXP) // multiplication
  | IEXPdiv of (IEXP, IEXP) // division
  | IEXPif of (BEXP(*test*), IEXP(*then*), IEXP(*else*))
// end of [IEXP]

and BEXP = // [and] for combining datatype declarations
  | BEXPcst of bool // boolean constants
  | BEXPneg of BEXP // negation
  | BEXPconj of (BEXP, BEXP) // conjunction
  | BEXPdisj of (BEXP, BEXP) // disjunction
  | BEXPeq of (IEXP, IEXP) // equal-to
  | BEXPneq of (IEXP, IEXP) // not-equal-to
  | BEXPlt of (IEXP, IEXP) // less-than
  | BEXPlte of (IEXP, IEXP) // less-than-equal-to
  | BEXPgt of (IEXP, IEXP) // greater-than
  | BEXPgte of (IEXP, IEXP) // greater-than-equal-to
// end of [BEXP]
")

明らかに、整数式を評価する時にはブール式も評価する必要があります。
次の2つの関数 #dyncode("eval_iexp") と #dyncode("eval_bexp") はそれぞれ整数式とブール式の評価のための関数で、予想される通りですが相互再帰で定義されています:

#atscode("\
fun eval_iexp
  (e0: IEXP): int =
(
case+ e0 of
| IEXPcst n => n
| IEXPneg (e) => ~eval_iexp (e)
| IEXPadd (e1, e2) => eval_iexp (e1) + eval_iexp (e2)
| IEXPsub (e1, e2) => eval_iexp (e1) - eval_iexp (e2)
| IEXPmul (e1, e2) => eval_iexp (e1) * eval_iexp (e2)
| IEXPdiv (e1, e2) => eval_iexp (e1) / eval_iexp (e1)
| IEXPif
  (
    e_test, e_then, e_else
  ) =>
  (
    eval_iexp (if eval_bexp (e_test) then e_then else e_else)
  ) // end of [IEXPif]
) (* end of [eval_iexp] *)

and eval_bexp
  (e0: BEXP): bool =
(
case+ e0 of
| BEXPcst b => b
| BEXPneg (e) => ~eval_bexp (e)
| BEXPconj (e1, e2) =>
    if eval_bexp (e1) then eval_bexp (e2) else false
| BEXPdisj (e1, e2) =>
    if eval_bexp (e1) then true else eval_bexp (e2)
| BEXPeq (e1, e2) => eval_iexp (e1) = eval_iexp (e2)
| BEXPneq (e1, e2) => eval_iexp (e1) != eval_iexp (e2)
| BEXPlt (e1, e2) => eval_iexp (e1) < eval_iexp (e2)
| BEXPlte (e1, e2) => eval_iexp (e1) <= eval_iexp (e2)
| BEXPgt (e1, e2) => eval_iexp (e1) > eval_iexp (e2)
| BEXPgte (e1, e2) => eval_iexp (e1) >= eval_iexp (e2)
) (* end of [eval_bexp] *)
")
")#comment("para")
")

#langeng("
#para("\

The integer and boolean expressions used in this example are all constant
expressions containing no variables. Therefore, there is no need for an
environment to evaluate them. I will present a more advanced example
elsewhere to demonstrate how an evaluator for a simple call-by-value
functional programming language like the core of ATS can be implemented.\

")
")
#langja("
#para("\

この例における整数式とブール式は全て変数を含まない定数式です。
そのため、これらの式の評価に環境は必要ありませんでした。
ATS のコアのような簡単な値渡し (call-by-value) の関数型プログラミング言語の評価器をどのように実装するのか示すために、より進んだ例を別の章で紹介します。\

")
")

#langeng("
#para("\

Please find
#mycodelink("CHAP_DATATYPE/intexp.dats", "on-line")
the entirety of the code in this section plus some additional code for
testing.\

")
")
#langja("
#para("\

この章のコード全体と追加のテストコードは
#mycodelink("CHAP_DATATYPE/intexp.dats", "オンライン")
から入手できます。
(訳注: このコードを atscc でコンパイルする際には -DATS_MEMALLOC_LIBC オプションが必要です。)\

")
")

</sect1><!--id="example_evaluating_integer_expressions"-->

#comment(" ****** ****** ")

</chapter><!--id="datatypes"-->

#comment(" ****** ****** ")
#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
