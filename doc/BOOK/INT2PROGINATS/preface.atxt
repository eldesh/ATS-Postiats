%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./ATEXT/int2proginats.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<preface>
#langeng("
#title("Preface")
")
#langchin("
#title("序言")
")
#langja("
#title("前書き")
")

#langeng("
#para('\

<ulink url="http://www.ats-lang.org">ATS</ulink> is a statically
typed programming language that unifies implementation with formal
specification. Within ATS, there are two sublanguages: one for
specification and the other for implementation, and there is also a
theorem-proving subsystem for verifying whether an implementation indeed
implements according to its specification.  If I could associate only one
single word with ATS, I would choose the word
<emphasis>precision</emphasis>.  Programming in ATS is about being precise
and being able to effectively enforce precision. This point will be
demonstrated concretely and repeatedly in this book.\

')
")
#langja("
#para('\

<ulink url="http://www.ats-lang.org">ATS</ulink>
は静的型のプログラミング言語で、形式的な仕様で統一されています。
ATS には2つのサブ言語があります。
1つ目は仕様記述のためのもので、2つ目は実装を記述するためのものです。
さらに、実装がその仕様に一致しているか証明するための定理証明サブシステムもあります。
もし ATS についてたった一つだけ単語を持ち出すとすれば、
それは <emphasis>精密(precision)</emphasis> でしょう。
ATS でのプログラミングとは明確であろうとすることであり、
そして可能なかぎり精密さを強制することです。
このテーマはこの本の中で何度も具体的に説明します。\

')
")

#langeng("
#para('\

In order to be precise in building software systems, we need to specify
what such a system is expected to accomplish. In the current day and age,
software specification, which is used in a rather loose sense here, is
often done in forms of varying degrees of formalism, ranging from verbal
discussions to pencil/paper drawings to diagrammatic depictions in modeling
languages such as UML to text descriptions in formal specification
languages such as VDM and Z. Often the main purpose of software
specification is to establish some mutual understanding among a team of
developers.  After the specification for a software system is done, either
formally or informally, we need to implement the specification in a
programming language.  In general, it is exceedingly difficult to be
reasonably certain whether an implementation actually meets its
specification. Even if the implementation coheres well with its
specification initially, it nearly inevitably diverges from the
specification as the software system evolves. The dreadful consequences of
such a divergence are all too familiar; the specification becomes less and
less reliable for understanding the behavior of the software system while
the implementation gradually turns into its own specification; for the
developers, it becomes increasingly difficult and risky to maintain and
extend the software system; for the users, it requires increased amount of
time and effort to learn and use the software system.\

')
")
#langja("
#para('\

ソフトウェアを明確に作成するためには、
そのソフトウェアがどのような動作を期待されているのか明記しなければなりません。
今日において、ソフトウェアの仕様 (ここでの用法はあいまいですが)
はしばしば形式主義の一種として扱われています。
その形式主義は、UML のようなモデリング言語の図表を使った議論を通じた表現から、VDM や Z
のような形式的仕様を記述する文字列による表現まで幅があります。
しばしばソフトウェアの仕様の主な目的とは、チーム中の開発者間で相互理解を得ることです。
ソフトウェアの仕様を得た後、プログラミング言語によって仕様を実装する必要があります。
一般的に、実装が現実的にその仕様を満たしているかどうか合理的に信頼するのは非常に難しいものです。
当初は実装が仕様と首尾一貫している場合でさえ、
ソフトウェアが進化するにつれて仕様との乖離はほぼ不可避です。
このような乖離よるひどい結果はとてもなじみ深いものでしょう。
実装が徐々にそれ自身の仕様に変貌していく中でソフトウェアの振舞いを理解しなければならないために、
仕様に対する信頼は損なわれます。
開発者にとっては、ソフトウェアを保守/拡張することはより危険で困難になります。
ユーザにとっては、
ソフトウェアを使ったり学習したりすることに時間と労力が要求されるようになります。\

')
")

#langeng("
#para("\

Largely inspired by Martin-L&oe;f's constructive type theory, which was
originally developed for the purpose of establishing a foundation for
mathematics, I designed ATS in an attempt to combine specification and
implementation into a single programming language. There are a static
component (statics) and a dynamic component (dynamics) in ATS. Intuitively,
the statics and dynamics are each for handling types and programs,
respectively. In particular, specification is done in the statics. Given a
specification, how can we then effectively ensure that an implementation of
the specification (type) indeed implements according to the specification?
We request that the programmer who does the implementation also construct a
proof in the theorem-proving subsystem of ATS to demonstrate it.  This is a
style of program verification that puts the programmer at the center, and
thus we refer to it as a programmer-centric approach to program
verification.\

")
")
#langja("
#para("\

もともとは数学的な土台として Martin-L&oe;f によって作られた型理論を参考に、
仕様と実装を一つのプログラミング言語として結びつける試みとして、私は ATS をデザインしました。
ATS には静的な要素と動的な要素があります。
直観的に、静的な要素と動的な要素はそれぞれ型とプログラムを扱います。
特に仕様は静的な要素です。
ある仕様が与えれたとき、
どうやってその仕様 (型) に一致した実装になっているかを確認すれば良いのでしょうか？
その立証のために、私達は実装を行なうプログラマに ATS
の定理証明サブシステムを使った証明も行なうことを要請します。
これはプログラマを中心にすえたプログラムの検証方法です。
強調すると、私達はプログラムの検証にプログラマ中心のアプローチをしています。\

")
")

#langeng("
#para('\

As a programming language, ATS is both syntax-rich and feature-rich. It can
support a variety of programming paradigms, including functional
programming, imperative programming, object-oriented programming,
concurrent programming, modular programming, etc. However, the core of ATS,
which is based on a call-by-value functional language, is surprisingly
simple, and this is where the journey of programming in ATS starts. In this
book, I will demonstrate primarily through examples how various programming
features in ATS can be employed effectively to facilitate the construction
of high-quality programs. I will focus on programming practice instead of
programming theory.  If you are primarily interested in the
type-theoretical foundation of ATS, then you have to find it elsewhere.\

')#comment("para")
")
#langja("
#para('\

プログラミング言語としての ATS は豊かな構文と高機能を両立しています。
ATS は多様なプログラミングパラダイムをサポートしています。
関数型プログラミング、命令型プログラミング、並列プログラミング、モジュラープログラミング、などです。
けれども ATS のコアは値渡し (call-by-value) の関数型言語に基づいていて、驚くほど単純です。
そしてこの本が ATS プログラミングへの旅のスタートです。
この本では主に高品質なプログラムを作成することを容易にする ATS における多様なプログラミングの機能について、
例を通して使い方を説明します。
またプログラミングの理論よりもプログラミングのやり方に焦点をあてます。
もしあなたが主に ATS の型理論の基礎に興味があるのであれば、
他の文献をおすすめします。\

')#comment("para")
")

#langeng("
#para('\

If you can implement, then you are a good programmer.  In order to be a
better programmer, you should also be able to explain what you implement.
If you can guarantee what is implemented matches what is specified, then
you are surely the best programmer.  Hopefully, learning ATS will put you
on a wonderful exploring journey to become the best programmer. Let that
journey start now!

')
")
#langja("
#para('\

実装ができるのであれば、あなたは "良いプログラマ" です。
"より良いプログラマ" であるためには、あなたの実装について説明できるべきです。
もしあなたがあなたの実装が仕様に一致するか保証できるなら、
あなたは間違いなく "もっとも良いプログラマ" でしょう。
ATS の学習があなたを "もっとも良いプログラマ" になるための素晴しい探検の旅につれていくことを願っています。
さあ、旅をはじめましょう!

')
")

</preface>

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "preface_atxt.txt")
%}

