%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/int2proginats.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
id="Cinteraction">
#langeng("
#title("Interaction with C")
")
#langja("
#title("C言語との相互呼び出し")
")

#langeng("
#para('\

ATS and C share precisely the same native/flat/unboxed data representation.
As a consequence, there is no need for wrapping/unwrapping or
boxing/unboxing when calling from C a function implemented in ATS or vice
versa, and there is also no run-time overhead for doing so. To a large
extent, ATS can be considered a front-end to C that is equipped with a
highly expressive type system (for specifying program invariants) and a
highly adaptable template system (for facilitating code reuse). In
particular, ATS can often be effectively employed to turn a large task into
subtasks of coherent interfaces, which can be implemented in ATS, C or some
other langauges and then assembled together to form a solution to the orginal
task.\

')
")
#langja("
#para('\

ATSとC言語は全く同じネイティブ/フラット/アンボックスなデータ表現を共有しています。
結果的に、ATSで実装された関数をC言語から呼び出す際にラップ/アンラップやボックス化/アンボックス化したりする必要はありません。
逆もまた同様です。
さらにその際の実行時オーバーヘッドもありません。
おおざっぱにATSはC言語のフロントエンドと考えることができます。
このフロントエンドは(プログラムの不変条件を記述するための)表現力豊かな型システムと
(コードの再利用を楽にしてくれる)柔軟なテンプレートシステムを備えているのです。
とりわけATSは大きな一つのタスクを一貫したインターフェイスのサブタスク群に分解するのにしばしば有効です。
それらのサブタスクはATSで実装することもできますし、C言語や他の言語で実装することもできます。
そうしてそれらを一緒に汲み上げることで元のタスクを構築できるのです。\

')
")

#langeng("
#para('\

As can be expected, C code that appears directly in ATS does not go
through the kind of rigorous typechecking like ATS code should. So it is
recommended that the programmer be extra cautious when making direct use of
C code inside ATS code. In practice, my own experience clearly indicates
that the portion of C code inside my ATS code is highly likely to be the
culprit for most of encountered bugs.

')
")
#langja("
#para('\

期待される通りですが、
ATSコード中に直接記述されたC言語コードはATSコードに対して行なわれるような厳格な型検査を通りません。
そのため慎重にATSコードの中にC言語コードを埋め込むことがプログラマに要求されます。
私個人の経験からは実際のところATSコード中におけるC言語コードがバグの犯人である可能性が非常に高いです。

')
")

#langeng("
#para("\

The code employed for illustration in this chapter plus some additional
code for testing is available #mycodelink("CHAP_CINTERACT/", "on-line").\

")
")
#langja("
#para("\

この章に出てくるコードとテストのための追加コードは
#mycodelink("CHAP_CINTERACT/", "オンライン")
から得られます。\

")
")

<!-- ****** ****** -->

<sect1
id="external_name">
#langeng("
#title("External Global Names")
")
#langja("
#title("外部のグローバル名")
")


#langeng("
#para("\

A function declared in ATS can be given a global name of C-style so as to
allow the function to appear in both ATS code and C code.  In particular,
the function can be implemented in ATS and called in C or vice versa.\

")
")
#langja("
#para("\

ATSで宣言された関数にはC言語スタイルのグローバル名が与えれらます。
その関数はATSコードからもC言語コードからも呼び出すことができます。
つまり、関数はATSで実装してC言語から呼び出すことができ、その逆もまた可能なのです。\

")
")

#langeng("
#para("\

In the following code, we see that two functions are declared:

#atscode('\
extern
fun fact (n: int): int
extern
fun fact2 (n: int, res: int): int = "ext\#fact2_in_c"
')

The first function #dyncode("fact") does not have a global name while the
second function #dyncode("fact2") is assigned a global name
#dyncode("fact2_in_c").  The symbol #keycode("ext\#") indicates that
#dyncode("fact2_in_c") is treated as a global function in C and its
prototype needs to be declared (via the #dyncode("extern") keyword) before
it can be called. If #keycode("ext\#") is written in place of
#keycode("ext\#fact2_in_c") in the above declaration, then the global name
for the function #dyncode("fact2") in ATS is assumed to be same as the name
of the function in ATS. In other words, writing #keycode("ext\#") in the
above declaration is equivalent to writing #keycode("ext\#fact2").

")
")
#langja("
#para("\

次のコードでは2つの関数を宣言しています:

#atscode('\
extern
fun fact (n: int): int
extern
fun fact2 (n: int, res: int): int = "ext\#fact2_in_c"
')

最初の関数 #dyncode("fact") はグローバル名を持たないのに対し、
二番目の関数 #dyncode("fact2") にはグローバル名 #dyncode("fact2_in_c") が割り当てられます。
#keycode("ext\#") シンボルは #dyncode("fact2_in_c") をC言語のグローバル関数のように扱います。
そして #dyncode("extern") キーワードによるプロトタイプ宣言が呼び出される前に必要です。
もし先の宣言 #keycode("ext\#fact2_in_c") の代わりに #keycode("ext\#") が使われた場合、
ATSの #dyncode("fact2") 関数へのグローバル名はATSの関数名と同じになります。
言いかえれば、先の例で #keycode("ext\#") という宣言を書くことは、
#keycode("ext\#fact2") と書くことと同じです。

")
")

#langeng("
#para("\

Let us assume that #dyncode("fact") can be implemented as follows:

#atscode('\
implement fact (n) = fact2 (n, 1)
')

When compiling this implementation, the ATS compiler needs to form function
names in the generated C code to refer to #dyncode("fact") and
#dyncode("fact2").  For the former, the function name in the C code is
determined by a set of rules (which take into account the issue of
namespace).  For the latter, the function name is simply chosen to be the
assigned global name #dyncode("fact2_in_c"). As is suggested by the name of
#dyncode("fact2_in_c"), this function can be directly implemented in C as
follows:

<informalexample><programlisting>
<![CDATA[int
fact2_in_c (int n, int res)
{
  while (n > 0) { res *= n ; n -= 1 ; } ; return res ;
}
]]></programlisting></informalexample>

It is also allowed to implement #dyncode("fact2") in ATS
directly as is shown below:

#atscode('\
implement
fact2 (n, res) = if n > 0 then fact2 (n-1, n*res) else res
')

This implementation of #dyncode("fact2") can be called in C
through the name #dyncode("fact2_in_c").\

")
")
#langja("
#para("\

次のように #dyncode("fact") の実装が与えられたとしましょう:

#atscode('\
implement fact (n) = fact2 (n, 1)
')

この実装をコンパイルするには #dyncode("fact") と #dyncode("fact2") を参照する関数名を、
ATSコンパイラは生成するC言語コード中に作らなければなりません。
前者のC言語での関数名はあるルール(名前空間の問題を考慮します)によって決定されます。
後者の関数名は単純に #dyncode("fact2_in_c") グローバル名が割り当てられます。
#dyncode("fact2_in_c") という名前の通り、この関数は次のように直接C言語で実装されていることでしょう:

<informalexample><programlisting>
<![CDATA[int
fact2_in_c (int n, int res)
{
  while (n > 0) { res *= n ; n -= 1 ; } ; return res ;
}
]]></programlisting></informalexample>

そして次のような #dyncode("fact2") をATSで直接実装することもできます:

#atscode('\
implement
fact2 (n, res) = if n > 0 then fact2 (n-1, n*res) else res
')

この #dyncode("fact2") の実装は #dyncode("fact2_in_c") という名前を通してC言語から呼び出すことができます。\

")
")

#langeng("
#para('\

If both #dyncode("fact2") and #dyncode("fact2_in_c") are implemented (the
former in ATS and the latter in C), then a link-time error is to be
issued to indicate that #dyncode("fact2_in_c") is implemented repeatedly.\

')
")
#langja("
#para('\

もし #dyncode("fact2") と #dyncode("fact2_in_c") が両方とも実装されていたら
(前者はATSで後者はC言語で実装しました)、
#dyncode("fact2_in_c") が二重に実装されていることを示すリンク時エラーが発生するでしょう。\

')
")

#langeng("
#para('\

One can also declare #dyncode("fact2") as follows:

#atscode('\
extern
fun fact2 (n: int, res: int): int = "mac\#fact2_in_c"
')

The symbol #keycode("mac\#") indicates that #dyncode("fact2_in_c") is
treated like a macro in C. In particular, #dyncode("fact2_in_c") can be
called without its prototype being declared first. As a matter of fact, it
may not even have a prototype. This style of declaration naturally expects
#dyncode("fact2_in_c") to be implemented in C directly.\

')
")
#langja("
#para('\

また #dyncode("fact2") を次のように宣言することもできます:

#atscode('\
extern
fun fact2 (n: int, res: int): int = "mac\#fact2_in_c"
')

#keycode("mac\#") シンボルは #dyncode("fact2_in_c") をC言語のマクロのように扱うことを示しています。
特に #dyncode("fact2_in_c") はそのプロトタイプ宣言を最初に宣言しなくても呼び出すことができます。
実際のところ、プロトタイプ宣言がなくても問題ありません。
このスタイルの宣言は当然 #dyncode("fact2_in_c") がC言語で直接実装されることを期待しています。\

')
")

#langeng("
#para('\

It is also allowed to use #keycode("sta\#") in place of #keycode("mac\#"):

#atscode('\
extern
fun fact2 (n: int, res: int): int = "sta\#fact2_in_c"
')

If declared in this style, which only occurs rarely in practice,
then #dyncode("fact2_in_c") is treated like a static function in C.\

')
")
#langja("
#para('\

また #keycode("mac\#") のかわりに #keycode("sta\#") を使うこともできます:

#atscode('\
extern
fun fact2 (n: int, res: int): int = "sta\#fact2_in_c"
')

このスタイルの宣言すると #dyncode("fact2_in_c") がC言語のstatic関数のように扱われます。
しかし実際にはあまり使うことはないでしょう。\

')
")

#langeng("
#para('\

For the sake of completeness, I mention as follows another way of declaring
a static function:

#atscode('\
static fun fact2 (n: int, res: int): int
')

This style of declaration is automatically translated into the following one:

#atscode('\
extern fun fact2 (n: int, res: int): int = "sta\#"
')

where the use of #keycode("sta\#") means that the name referring to #dyncode("fact2")
in C is simply #dyncode("fact2").\

')
")
#langja("
#para('\

完全を期すために、static関数を宣言する他の方法を紹介します:

#atscode('\
static fun fact2 (n: int, res: int): int
')

このスタイルの宣言は自動的に次のように変換されます:

#atscode('\
extern fun fact2 (n: int, res: int): int = "sta\#"
')

#keycode("sta\#") のように使うと、C言語における #dyncode("fact2") という名前が単純に
#dyncode("fact2") を意味するようになります。\

')
")

</sect1><!--id="external_global_names"-->

<!-- ****** ****** -->

<sect1
id="external_types_and_values">
#langeng("
#title("External Types and Values in ATS")
")
#langja("
#title("ATSにおける外部の型と値")
")

#langeng("
#para("\

External types and values can be readily formed in ATS to refer to types
and values declared in C.

")
")
#langja("
#para("\

外部の型や値を簡単にATS言語に取り込むことができます。
また、それはC言語で宣言された型や値に関連付けさせることができます。

")
")

#langeng("
#para("\

Suppose that there is a type in C of the name #stacode("some_type_in_c"),
then this type can be referred to in ATS as
#stacode('$extype"some_type_in_c"'). For instance, type definitions are
introduced in the following code for some external types in C:

#atscode('\
typedef Cint = $extype"int"
typedef Clint = $extype"long int"
typedef Cllint = $extype"long long int"
typedef Cint2 = $extype"struct{ int x; int y; }"
')

Suppose that there is a value in C of the name #dyncode("some_value_in_c"),
then this value can be referred to in ATS as #dyncode('$extval(#stacode('T'), "some_value_in_c")'),
where T is a type in ATS assigned to this value.  For instance, macro
definitions are introduced in the following code for some external values
in C:

#atscode('\
macdef NULL = $extval(ptr, "0")
macdef stdin_ref = $extval(FILEref, "stdin")
macdef stdout_ref = $extval(FILEref, "stdout")
')

External values can also be formed to refer to functions in C as done
in the following code:

#atscode('\
macdef atoi = $extval(string -> int, "atoi")
macdef atol = $extval(string -> lint, "atol")
macdef atof = $extval(string -> double, "atof")
')

Note that there are other ways in ATS that are often more approriate for
directly referring to functions in C.  Typically, the primary purpose of
forming an external value in ATS is to allow a constant declared in C to be
directly referred to in ATS code.

")
")
#langja("
#para("\

#stacode("some_type_in_c") とう名前でC言語の型が定義されていると想像してください。
この型は #stacode('$extype"some_type_in_c"') のようにATS言語から参照することができます。
例えば次のコードのように、C言語でのいくつかの型をATS言語に取り込んで型定義できます:

#atscode('\
typedef Cint = $extype"int"
typedef Clint = $extype"long int"
typedef Cllint = $extype"long long int"
typedef Cint2 = $extype"struct{ int x; int y; }"
')

#dyncode("some_value_in_c") という名前のC言語の値があった場合、
この値を #dyncode('$extval(#stacode('T'), "some_value_in_c")') のようにATSから参照することができます。
この T はこの値に割り当てるATSの型です。
例えば次のコードのように、C言語でのいくつかの外部定義の値をATS言語に取り込んでマクロ定義できます:

#atscode('\
macdef NULL = $extype(ptr, "0")
macdef stdin_ref = $extype(FILEref, "stdin")
macdef stdout_ref = $extype(FILEref, "stdout")
')

また次のコードのように、C言語の関数を参照する外部定義の値を作ることができます:

#atscode('\
macdef atoi = $extype(string -> int, "atoi")
macdef atol = $extype(string -> lint, "atol")
macdef atof = $extype(string -> double, "atof")
')

C言語の関数を直接参照するために、より適切な方法がATSにはあることに注意してください。
一般に、ATSで外部定義の値を使う主な用途は、C言語の定数宣言を直接ATSコードに関連付けることです。

")
")

</sect1><!--id="external_types_and_values"-->

<!-- ****** ****** -->

<sect1
id="inclusion_of_external_code">
#langeng("
#title("Inclusion of External Code in ATS")
")
#langja("
#title("ATSに外部コードを含める")
")

#langeng("
#para('\

Just like including assembly code inside C code, it is straightforward to
include C code inside ATS code. For instance, the example appearing at the
beginning of this chapter can be written as follows in a single file:

#atscode('\
extern
fun fact (n: int): int
extern
fun fact2 (n: int, res: int): int = "ext\#fact2_in_c"

implement fact (n) = fact2 (n, 1)

%{
int
fact2_in_c (int n, int res)
{
  while (n > 0) { res *= n ; n -= 1 ; } ; return res ;
}
%}
')#comment("atscode")

For C code to appear inside ATS code, it needs to enclosed by the symbols
#keycode("%{") (opening) and #keycode("%}") (closing). Essentially,
whatever code appearing between these two symbols is pasted into the
generated C code at an unspecified position. If the enclosed code is
intended to be put at the beginning of the generated C code, then the
symbol #keycode("%{^") should be used in place of #keycode("%{").  If the
enclosed code is intended to be put at the bottom of the generated C code,
then the symbol #keycode("%{$") should be used in place of #keycode("%{").

')
")
#langja("
#para('\

C言語コード中にアセンブラコードを埋め込むのと同様に、
ATSコード中にC言語コードを埋め込むことも簡単です。
例えば、この章の最初で示した例は、次のような一つのファイルに書くことができます:

#atscode('\
extern
fun fact (n: int): int
extern
fun fact2 (n: int, res: int): int = "ext\#fact2_in_c"

implement fact (n) = fact2 (n, 1)

%{
int
fact2_in_c (int n, int res)
{
  while (n > 0) { res *= n ; n -= 1 ; } ; return res ;
}
%}
')#comment("atscode")

ATSコード中にC言語コードを書くためには、
#keycode("%{") と #keycode("%}") のシンボルで囲まなければなりません。
本質的には、これら2つのシンボルの間にあるコードは、生成されるC言語コードの不定の位置に配置されます。
もし囲まれたコードを生成されるC言語コードの先頭に配置したいのであれば、
#keycode("%{") シンボルの代わりに #keycode("%{^") シンボルを使うべきです。
もし囲まれたコードを生成されるC言語コードの末尾に配置したいのであれば、
#keycode("%{") シンボルの代わりに #keycode("%{$") シンボルを使うべきです。

')
")

#langeng("
#para('\

It is also allowed to put C code between the symbols
#keycode("%{#") and #keycode("%}"). Suppose that there is a file of the
name #filename("foo.sats") that contains C code included in this manner.
If #filename("foo.sats") is staloaded in another file of the name
#filename("foo.dats"), then the lines between #keycode("%{#") and
#keycode("%}") in #filename("foo.sats") are pasted into the C code
generated from compiling #filename("foo.dats").

')
")
#langja("
#para('\

#keycode("%{#") と #keycode("%}") シンボルの間にC言語コードを配置することもできます。
#filename("foo.sats") という名前のファイルがこの方法でC言語コードを含んでいる場合を考えてみましょう。
もし #filename("foo.sats") が #filename("foo.dats") という名前の別のファイルに staload されると、
#filename("foo.sats") の #keycode("%{#") と #keycode("%}") の間のコードは
#filename("foo.dats") をコンパイルして生成されたC言語コード中に配置されます。

')
")

</sect1><!--id="inclusion_of_external_code"-->

<!-- ****** ****** -->

<sect1
id="calling_external_functions">
#langeng("
#title("Calling External Functions in ATS")
")
#langja("
#title("ATSにおける外部関数呼び出し")
")

#langeng("
#para('\

It is straightforward to make calls to external functions in ATS.
For instance, the following code demonstrates a typical way to do so:

#atscode('\
local
extern
fun __fprintf
  : (FILEref, string(*fmt*), int, int) -> int = "mac\#fprintf"
in (* in of [local] *)
//
val N = 12
val _ = __fprintf (stdout_ref, "fact(%i) = %i\\\\n", N, fact(N))
//
end // end of [local]
')

where the function #dyncode("fprintf") (declared in #filename("stdio.h"))
is given a (local) name #dyncode("__fprintf") and an interface appropriate
for the call to be made.

')
")
#langja("
#para('\

ATSから外部関数を呼び出すことは簡単です。
例えば、次のコードはその典型的な例です:

#atscode('\
local
extern
fun __fprintf
  : (FILEref, string(*fmt*), int, int) -> int = "mac\#fprintf"
in (* in of [local] *)
//
val N = 12
val _ = __fprintf (stdout_ref, "fact(%i) = %i\\\\n", N, fact(N))
//
end // end of [local]
')

この #dyncode("fprintf") 関数は #filename("stdio.h") で宣言されており
#dyncode("__fprintf") というローカルな名前が与えられています。
また外部関数呼び出しにふさわしいインターフェイスになっています。

')
")

#langeng("
#para('\

There is also built-in support for calling external functions in ATS directly.
For instance, the following code does essentially the same as the code
presented above:

#atscode('\
val N = 12
val _ = $extfcall(int, "fprintf", stdout_ref, "fact(%i) = %i\\\\n", N, fact(N))
')

When #dyncode("$extfcall") is employed to make an external function call,
its first argument is the return type of the call, and its second argument
is the name of the called function (represented as a string), and its rest
of arguments are the arguments of the called function.

')
")
#langja("
#para('\

またATSから外部関数を直接呼び出すビルトインのしくみもあります。
例えば、次のコードは上記で示したコードと本質的に同じです:

#atscode('\
val N = 12
val _ = $extfcall(int, "fprintf", stdout_ref, "fact(%i) = %i\\\\n", N, fact(N))
')

#dyncode("$extfcall") は外部関数呼び出しを作るために使われます。
その最初の引数は関数呼び出しの返値の型です。
2番目の引数には呼び出す関数の名前を文字列で指定します。
残りの引数群は呼び出す関数への引数群になります。

')
")

</sect1><!--id="calling_external_functions"-->

<!-- ****** ****** -->

<sect1
id="unsafe_c-style_programming_in_ats">
#langeng("
#title("Unsafe C-style Programming in ATS")
")
#langja("
#title("安全ではないC言語スタイルのATSプログラミング")
")

#langeng("
#para("\

ATS is probably not a programming language easy for one to write code in.
While ATS provides many features to support safe (low-level) programming,
it may take a long time and some great efforts for a programmer to learn
and then master these features before he or she can make effective use of
them.  In this section, I would like to present some ATS code written in
C-style that makes typical use of certan unsafe programming features in
ATS. This is a programming style that should be familiar to any programmer
who can write C code competently.

")
")
#langja("
#para("\

おそらく、ATSはコードを書き下すことが簡単なプログラミング言語ではないでしょう。
ATSは安全な低レイヤープログラミングをサポートするために多くの機能を提供しています。
プログラマがそれらの機能を学習して使いこなせるようになるまでに、
長い時間とある程度の努力を費やす必要があるかもしれません。
この章では、C言語スタイルで書かれたATSコードをいくつか紹介します。
これは、ATSプログラミングにおける安全ではない機能の典型的な使い方で、
C言語コードを書き慣れたプログラマにとってなじみ深いプログラミングスタイルです。

")
")

#langeng("
#para("\

There are always occasions where one may find it sensible to program in
unsafe C-style. Sometimes, one just wants to get a running implementation
and then relies on testing to detect and fix bugs. Sometimes, one simply
does not know enough of ATS needed to implement a function in a safe
programming manner. This list of occasions can be readily extended as one
wishes. I myself do unsafe C-style programming in ATS frequently, and I see
it as a necessary skill for anyone who not just only wants to be able to
write code in ATS but also wants to do it highly productively. Let us now
see a concrete example of unsafe C-style programming in ATS.

")
")
#langja("
#para("\

安全でないC言語スタイルプログラミングが懸命である場合があります。
ときには単に実行できる実装を手に入れて、バグを見つけて修正するためにテストを信頼しようとするかもしれません。
ときには安全に関数を実装するATSプログラミングの作法を、熟知していない場合もあるでしょう。
またそれは単に個人の要望であるかもしれません。
私自身しばしば安全ではないC言語スタイルのATSプログラミングをすることがありますし、
ただATSでコードを書きたいのではなく高い生産性が欲しい人にとって、
それが必要なスキルであることも理解できます。
安全ではないC言語スタイルのATSプログラミングの具体例を見てみましょう。

")
")

#langeng("
#para("\

Suppose that we want to implement a function for comparing two given
strings according to the standard lexicographic ordering. Let us name
the function #dyncode("strcmp") and give it the following interface:

#atscode('\
fun strcmp (str1: string, str2: string): int
')

Given two strings #dyncode("str1") and #dyncode("str2"),
#dyncode("strcmp(str1, str2)") is expected to return 1, -1, and 0 if
#dyncode("str1") is greater than, less than, and equal to #dyncode("str2"),
respectively. An implementation of #dyncode("strcmp") is given as follows:

#atscode('\

staload
UN = "prelude/SATS/unsafe.sats"

(* ****** ****** *)

implement
strcmp (str1, str2) = let
//
fun loop
  (p1: ptr, p2: ptr): int = let
//
val c1 = $UN.ptr0_get<uchar> (p1)
val c2 = $UN.ptr0_get<uchar> (p2)
//
in
  case+ 0 of
  | _ when c1 > c2 =>  1
  | _ when c1 < c2 => ~1
  | _ (* c1 = c2 *) =>
    (
      if $UN.cast{int}(c1) = 0
        then 0 else loop (ptr0_succ<uchar> (p1), ptr0_succ<uchar> (p2))
      // end of [if]
    )
end (* end of [loop] *)
//
in
  loop (string2ptr(str1), string2ptr(str2))
end (* end of [strcmp] *)
')

For a programmer familar with C, the above implementation of
#dyncode("strcmp") should be easily accessible.  There are a variety of
unsafe functions declared in #myatscodelink("prelude/SATS/unsafe.sats",
"unsafe.sats"). Given a type T and a pointer p, #dyncode("ptr0_get&lt;T&gt;
(p)") fetches the value of the type T stored at the location to which p
points.  Note that #dyncode("ptr0_get") is inherently unsafe as there is
simply no guarantee that p actually points to a valid memory location where
a value of the type T is stored.  The function #dyncode("cast"), which is
also inherently unsafe, casts the type of a given value into any chosen
type.  The function template #dyncode("ptr0_succ"), which is declared in
#myatscodelink("prelude/SATS/pointer.sats", "pointer.sats"), is
type-safe. Given a type T, #dyncode("ptr0_succ&lt;T&gt; (p)") returns the
pointer that is n bytes after p, where n equals the size of T.

")
")
#langja("
#para("\

2つの文字列を標準辞書式順序によって比較する関数を実装したくなったとします。
その関数に #dyncode("strcmp") という名前を付けて、次のようなインターフェイスを与えましょう:

#atscode('\
fun strcmp (str1: string, str2: string): int
')

2つの文字列 #dyncode("str1") と #dyncode("str2") が与えられると、
#dyncode("strcmp(str1, str2)") は 1, -1, 0 のいずれかを返します。
それぞれ #dyncode("str1") が #dyncode("str2") と比較して、
より大きいか、より小さいか、等しいことを表わしています。
#dyncode("strcmp") の実装は次のようになるでしょう:

#atscode('\

staload
UN = "prelude/SATS/unsafe.sats"

(* ****** ****** *)

implement
strcmp (str1, str2) = let
//
fun loop
  (p1: ptr, p2: ptr): int = let
//
val c1 = $UN.ptr0_get<uchar> (p1)
val c2 = $UN.ptr0_get<uchar> (p2)
//
in
  case+ 0 of
  | _ when c1 > c2 =>  1
  | _ when c1 < c2 => ~1
  | _ (* c1 = c2 *) =>
    (
      if $UN.cast{int}(c1) = 0
        then 0 else loop (ptr0_succ<uchar> (p1), ptr0_succ<uchar> (p2))
      // end of [if]
    )
end (* end of [loop] *)
//
in
  loop (string2ptr(str1), string2ptr(str2))
end (* end of [strcmp] *)
')

C言語になじみのあるプログラマにとって、
上記の #dyncode("strcmp") の実装は理解しやすいでしょう。
#myatscodelink("prelude/SATS/unsafe.sats", "unsafe.sats")
には安全でない関数群が各種宣言されています。
型Tとポインタpが与えられた時、 #dyncode("ptr0_get&lt;T&gt; (p)")
はpが指し示す位置に配置されたT型の値を取得します。
#dyncode("ptr0_get") は本質的に安全ではないことに注意してください。
実際にpが型Tの値が配置されたメモリ領域を指し示しているかどうか、なんの保証もないのです。
#dyncode("cast") 関数は与えられた値の型を指定した型でキャストします。
この関数もまた本質的に安全ではありません。
#myatscodelink("prelude/SATS/pointer.sats", "pointer.sats")
で宣言されている #dyncode("ptr0_succ") 関数テンプレートは型安全です。
型Tが与えられた時、pよりも型Tのサイズだけ後ろのポインタを返します。

")
")

#langeng("
#para("\

Please find the entire code for this example
#mycodelink("CHAP_CINTERACT/strcmp.dats", "on-line").

")
")
#langja("
#para("\

この例の完全なコードは #mycodelink("CHAP_CINTERACT/strcmp.dats", "オンライン") にあります。

")
")

#langeng("
#para("\

For a function like #dyncode("strcmp"), one can readily implement it in C
directly. For instance, an implementation of #dyncode("strcmp") in C, which
is essentially a translation of the above implementation of #dyncode("strcmp")
in ATS, is given as follows:

#atscode('\
int strcmp (char *p1, char *p2)
{
  int res ;
  unsigned char c1, c2;
  while (1)
  {
    c1 = *p1; c2 = *p2;
    if (c1 > c2) { res =  1; break; } ;
    if (c1 < c2) { res = -1; break; } ;
    if ((int)c1==0) { res = 0 ; break ; } else { p1++; p2++; } ;
  }
  return res ;
}
')

However, writing ATS code in C-style can often have advantages over writing
C code directly. For instance, there is direct support in ATS but not in C
for implementing function templates.  In C, one is essentially forced to
rely on rather involved use of macros to implement function templates,
which makes the code not only difficult to follow but also notoriously
error-prone. Let us now see as follows a function template implementation
in ATS that is partly type-unsafe.

")
")
#langja("
#para("\

#dyncode("strcmp") のような関数を、
人によってはC言語で直接実装するかもしれません。
例えば、上記のATSによる #dyncode("strcmp") 実装を翻訳すると、
#dyncode("strcmp") のC言語による実装は次のようになるでしょう:

#atscode('\
int strcmp (char *p1, char *p2)
{
  int res ;
  unsigned char c1, c2;
  while (1)
  {
    c1 = *p1; c2 = *p2;
    if (c1 > c2) { res =  1; break; } ;
    if (c1 < c2) { res = -1; break; } ;
    if ((int)c1==0) { res = 0 ; break ; } else { p1++; p2++; } ;
  }
  return res ;
}
')

けれども、C言語スタイルのATSコードは、直接C言語を書くよりもしばしば利点があります。
例えば、C言語にはサポートがありませんが、ATSは関数テンプレートを直接サポートしています。
C言語では、複雑なマクロを使った関数テンプレート実装を信頼するしかありません。
そのようなコードは理解することが困難であるだけでなく周知の通りエラーを誘発します。
次にATSにおける関数テンプレートの実装を見てみましょう。
これは部分的には型安全ではありません。

")
")

#langeng("
#para("\

Suppose we want a function for copying into a given array the elements
stored in a list. Let us name the function #dyncode("array_copy_from_list")
and give it the following interface:

#atscode('\
fun{a:t@ype}
array_copy_from_list (A: array0(a), xs: list0(a)): void
')

Given a type T, #stacode("array0(T)") is for an array0-value containing a
pointer p and a size n such that p points to a C-style array storing n
elements of the type T.

")
")
#langja("
#para("\

リストに保存されている要素群を与えられた配列の中にコピーするような関数を作りたいとしましょう。
その関数に #dyncode("array_copy_from_list") という名前を付けて、
次のようなインターフェイスを与えます:

#atscode('\
fun{a:t@ype}
array_copy_from_list (A: array0(a), xs: list0(a)): void
')

型Tが与えられた時、 #stacode("array0(T)") はポインタpとサイズnを内包するarray0の値を作り、
そのpは型Tの要素をn個保持するC言語スタイルの配列を指し示します。

")
")

#para("\

差し当り、 #dyncode("array_copy_from_list(A, xs)") が呼び出されたら、
リストxsの長さに等しい配列Aのサイズを要求しましょう。
ATSにおける #dyncode("array_copy_from_list") の実装を次に示します。
この関数は、 #myatscodelink("prelude/SATS/unsafe.sats", "unsafe.sats")
で宣言されている安全でない関数 #dyncode("ptr0_set") を使っています:

#atscode('\
staload
UN = "prelude/SATS/unsafe.sats"

(* ****** ****** *)

implement{a}
array_copy_from_list (A, xs) = let
//
fun loop
(
  p: ptr, xs: list0 (a)
) : void =
(
case+ xs of
| list0_nil () => ()
| list0_cons (x, xs) => let
    val () = $UN.ptr0_set<a> (p, x) in loop (ptr0_succ<a> (p), xs)
  end // end of [list0_cons]
) (* end of [loop] *)
//
in
  loop (array0_get_ref(A), xs)
end // end of [array_copy_from_list]
')

型Tとポインタp、そして型Tの値xが与えられた時、
#dyncode("ptr0_set&lt;T&gt; (p, x)") は値xをpによって指し示された位置に保存します。
#dyncode("ptr0_get") と同様に #dyncode("ptr0_set") は本質的に安全ではありません。
実際にpが型Tの値が配置されたメモリ領域を指し示しているかどうか、
なんの保証もありません。
#myatscodelink("libats/ML/SATS/array0.sats", "array0.sats")
で宣言されている #dyncode("array0_get_ref")
関数は与えられたarray0値と関連付けられたC言語スタイルの配列のポインタを返します。

")

#langeng("
#para("\

Please find the entire code for this example
#mycodelink("CHAP_CINTERACT/ArrayCopyFromList.dats", "on-line").

")
")
#langja("
#para("\

この例の完全なコードは #mycodelink("CHAP_CINTERACT/ArrayCopyFromList.dats", "オンライン")
にあります。

")
")

</sect1><!--id="unsafe_c-style_programming_in_ats"-->

<!-- ****** ****** -->

<sect1
id="exporting_types_and_values">
#langeng("
#title("Exporting Types in ATS for Use in C")
")
#langja("
#title("ATSの型をエクスポートしてC言語から使う")
")

#langeng("
#para("\

There is also support in ATS for exporting types to make them available for
use in C directly. In the following example, a typedef of the name
#stacode("int_and_string") is expected to be declared in the generated C
code for values that are assigned the type #stacode("(int, string)") in ATS:

#atscode('\
extern
typedef
"int_and_string" = (int, string)
')

Essentially, #stacode("int_and_string") is defined in C as follows:

#atscode('\
typedef
struct {
  int atslab__0; void *atslab__1; 
} int_and_string ;
')

")
")
#langja("
#para("\

ATSでは、ATSの型をエクスポートしてC言語から直接使うこともできます。
次の例では、ATSの #stacode("(int, string)") 型が割り当てられた値のために、
生成されたC言語コード中で #stacode("int_and_string")
の名前のtypedefが宣言されることを期待しています:

#atscode('\
extern
typedef
"int_and_string" = (int, string)
')

本質的に #stacode("int_and_string") はC言語の中で次のように定義されます:

#atscode('\
typedef
struct {
  int atslab__0; void *atslab__1; 
} int_and_string ;
')

")
")

#langeng("
#para('\

Sometimes, we want to construct in C values of a datatype declared in ATS.
For instance, let us try to construct a value of the form
#dyncode("cons2(i, d)") in C for an integer i and a double d, where
#dyncode("cons2") is a data constructor associated with the following
declared datatype #stacode("abc"):

#atscode('\
datatype abc =
  | cons1 of int | cons2 of (int, double)
')

Whenever a data constructor is declared, a corresponding (linear) type
constructor is created whose name equals the concatenation of the name of
the data constructor and the string "_pstruct". So in the case of the above
declared datatype #stacode("abc"), the type constructors
#stacode("cons1_pstruct") and #stacode("cons2_pstruct") are created, and
these type constructors can be used to form types for boxed values
constructed with the data constructors #dyncode("cons1") and #dyncode("cons2").

')
")
#langja("
#para('\

ときどき、ATSにおけるdatatype宣言の値をC言語でコンストラクトしたいことがあります。
例えば、iが整数でdが倍精度実浮動小数点数であるような
#dyncode("cons2(i, d)") の値をC言語でコンストラクトしてみましょう。
#dyncode("cons2") は次で宣言されたdatatype #stacode("abc") に関連したデータコンストラクタです:

#atscode('\
datatype abc =
  | cons1 of int | cons2 of (int, double)
')

データコンストラクタを宣言すると必ず対応する(線形の)型コンストラクタが作られます。
そのコンストラクタには元のデータコンストラクタの名前と文字列
"_pstruct" を連結した名前が付けられます。
そのため上記で宣言したdatatype #stacode("abc") の場合は、
型コンストラクタ #stacode("cons1_pstruct") と #stacode("cons2_pstruct") が作られます。
これらの型コンストラクタはデータコンストラクタ #dyncode("cons1") と #dyncode("cons2")
でコンストラクトされるボックス化された値の型を形成するために使われます。

')
")

#langeng("
#para('\

In the following declaration,
the type #stacode("cons2_pstruct(int, double)") in ATS
is exported to C under the name #stacode("cons2_node"):

#atscode('\
extern
vtypedef "cons2_node" = cons2_pstruct(int, double)
')

Implicitly, a typedef in C of the name #stacode("cons2_node_") is also
introduced for the unboxed portion of a value constructed with the data
constructor #dyncode("cons2"). Essentially, we have the following generated
code in C:

#atscode('\
typedef
struct {
int contag ; // constructor tag
int atslab__0; double atslab__1; 
} cons2_node_ ;
typedef cons2_node_ *cons2_node ;
')

It is now straightforward to create a value of the form #dyncode("cons2(i,d)") in C directly:

#atscode('\
cons2_node
cons2_make
(
  int i, double d
) {
  cons2_node p ;
  p = ATS_MALLOC(sizeof(cons2_node_)) ;
  p->contag = 1 ;
  p->atslab__0 = i ;
  p->atslab__1 = d ;
  return p ;
} /* end of [cons2_make] */
')

Note that the tags for #dyncode("cons1") and #dyncode("cons2") are 0 and 1,
respectively, as #dyncode("cons1") and #dyncode("cons2") are the first and
second constructors associated with the datatype #stacode("abc").

')
")
#langja("
#para('\

次の宣言でATSの #stacode("cons2_pstruct(int, double)") 型が
#stacode("cons2_node") の名前でC言語にエクスポートされます:

#atscode('\
extern
vtypedef "cons2_node" = cons2_pstruct(int, double)
')

また #dyncode("cons2") データコンストラクタによってコンストラクトされる値のアンボックス部分のために、
#stacode("cons2_node_") という名前でC言語のtypedefが暗黙のうちに導入されます。
結果として次のようなC言語コードが生成されるでしょう:

#atscode('\
typedef
struct {
int contag ; // constructor tag
int atslab__0; double atslab__1; 
} cons2_node_ ;
typedef cons2_node_ *cons2_node ;
')

これでC言語中で直接 #dyncode("cons2(i,d)") の値を作るのは簡単でしょう:

#atscode('\
cons2_node
cons2_make
(
  int i, double d
) {
  cons2_node p ;
  p = ATS_MALLOC(sizeof(cons2_node_)) ;
  p->contag = 1 ;
  p->atslab__0 = i ;
  p->atslab__1 = d ;
  return p ;
} /* end of [cons2_make] */
')

#dyncode("cons1") と #dyncode("cons2") のconstructor tagはそれぞれ0と1であることに注意してください。
#dyncode("cons1") と #dyncode("cons2") は datatype #stacode("abc")
に関連した1番目と2番目のコンストラクタであることがその理由です。

')
")

#langeng("
#para('\

By assigning an interface to #dyncode("cons2_make") in ATS, we can readily
check whether #dyncode("cons2_make") behaves as expected:

#atscode('\
extern
fun cons2_make (int, double): abc = "mac#"
val-cons2 (1, 2.34) = cons2_make (1, 2.34)
')

')
")
#langja("
#para('\

ATS側で #dyncode("cons2_make") にインターフェイスを割り当てることで、
#dyncode("cons2_make") の挙動が意図したものかどうかチェックできます:

#atscode('\
extern
fun cons2_make (int, double): abc = "mac#"
val-cons2 (1, 2.34) = cons2_make (1, 2.34)
')

')
")

#langeng("
#para('\

In general, it is essential for a pragrammer to acquire a solid
understanding of low-level data representation of a programming language in
order to use that language in low-level systems programming. The low-level
data representation of ATS can be readily explained in terms of types in C,
making it straightforward, if needed, to construct and manipulate
ATS-values in C directly.

')
")
#langja("
#para('\

一般に、低レイヤーのシステムプログラミングにおいてプログラミング言語を使うために、
その言語の低レベルのデータ表現をしっかり理解することはプログラマにとって不可欠です。
ATSの低レベルデータ表現はC言語の型の項を使って簡単に解釈できます。
そのため必要であればC言語の中でATSの値を直接コンストラクトし操作することは容易なのです。

')
")

</sect1><!--id="exporting_ats_types_and_values"-->

<!-- ****** ****** -->

<sect1
id="example-constructing_a_statically_allocated_list">
#langeng("
#title("Example: Constructing a Statically Allocated List")
")
#langja("
#title("例: 静的に確保されたリストをコンストラクトする")
")

#langeng("
#para('\

In embedded programming, static memory allocation is often preferred
due to dynamic memory allocation being less predictable.  I present as
follows an example in which a list is constructed with statically allocated
memory. This example also strongly attests to ATS and C being intimately
related.

')
")
#langja("
#para('\

組み込みプログラミングにおいて、
静的なメモリ確保は挙動を予測しにくい動的なメモリ確保よりもしばしば好まれます。
静的に確保されたメモリにコンストラクトされたリストの例を次に示します。
この例はまた、ATSとC言語の親和性を実証しています。

')
")

#langeng("
#para('\

In order to statically allocate memory for list-nodes, we need to first
form a type for list-nodes so that we can inform the C compiler how
much memory is needed for each list-node. In the following code, the type
#stacode("list_node") in ATS is for boxed list-nodes, and this type is
exported to C under the same name:

#atscode('\
//
vtypedef
list_node = list_cons_pstruct(int,ptr) // [list_node] for boxed nodes
//
extern vtypedef "list_node" = list_node // exporting [list_node] to C
//
')

Exporting #stacode("list_node") to C also introduces (implicitly) a
typedef #stacode("list_node_") in C for unboxed list-nodes. So the
following type #stacode("list_node_") in ATS is precisely what we want
(for unboxed list-nodes):

#atscode('\
typedef list_node_ = $extype"list_node_" // [list_node_] for unboxed nodes
')#comment("atscode")

')
")
#langja("
#para('\

リストの要素のメモリを静的に確保するためには、
それぞれのリストの要素にどれぐらいのメモリサイズが必要になるのかC言語コンパイラに報せるために、
リストの要素の型をまず始めに作る必要があります。
次のコードでは、ATSにおける #stacode("list_node") 型がボックス化リスト要素であり、
この型はC言語へ同じ名前でエクスポートされています:

#atscode('\
//
vtypedef
list_node = list_cons_pstruct(int,ptr) // [list_node] for boxed nodes
//
extern vtypedef "list_node" = list_node // exporting [list_node] to C
//
')

#stacode("list_node") をC言語へエクスポートすると、アンボックス化リスト要素のための
typedef #stacode("list_node_") が暗黙的にC言語へ導入されます。
そのため、ATSにおける次の型 #stacode("list_node_") は、
アンボックス化リスト要素のために私達が望んだものでしょう:

#atscode('\
typedef list_node_ = $extype"list_node_" // [list_node_] for unboxed nodes
')#comment("atscode")

')
")

#langeng("
#para('\

The following code statically allocates an array of list-nodes and then
initialize these nodes, turning the array into a list:

#atscode('\
local

\#define N 10

(*
** static allocation
*)
var nodes = @[list_node_][N]()

fun loop
(
  p: ptr, i: int
) : void = let
in
//
if i < N then let
  val res =
  $UN.castvwtp0{list_node}(p)
  val+list_cons (x, xs) = res
  val (
  ) = x := i*i
  val p = ptr_succ<list_node_> (p)
  val i = i + 1
  val () = (
    if i < N then xs := p else xs := the_null_ptr
  ) : void // end of [val]
  val _(*ptr*) = $UN.castvwtp0{ptr}((view@x, view@xs | res))
in
  loop (p, i)
end else ((*void*)) // end of [if]
//
end // end of [loop]

in (* in of [local] *)

val () = loop (addr@nodes, 0)
val xs_static = $UN.castvwtp0{list(int,N)}((view@nodes|addr@nodes))
val () = println! ("xs_static = ", xs_static) // 0, 1, 4, 9, 16, ...

end // end of [local]
')#comment("atscode")

The implementation of #dyncode("loop") makes extensive use of
unsafe C-style programming in ATS. For someone familiar with C, it
should be straightforward to visualize the C code that corresponds to
this implementation directly.\

')
")
#langja("
#para('\

次のコードはリスト要素の配列を静的に確保した後、
それらの要素を初期化して、その配列をリストに変換します:

#atscode('\
local

\#define N 10

(*
** static allocation
*)
var nodes = @[list_node_][N]()

fun loop
(
  p: ptr, i: int
) : void = let
in
//
if i < N then let
  val res =
  $UN.castvwtp0{list_node}(p)
  val+list_cons (x, xs) = res
  val (
  ) = x := i*i
  val p = ptr_succ<list_node_> (p)
  val i = i + 1
  val () = (
    if i < N then xs := p else xs := the_null_ptr
  ) : void // end of [val]
  val _(*ptr*) = $UN.castvwtp0{ptr}((view@x, view@xs | res))
in
  loop (p, i)
end else ((*void*)) // end of [if]
//
end // end of [loop]

in (* in of [local] *)

val () = loop (addr@nodes, 0)
val xs_static = $UN.castvwtp0{list(int,N)}((view@nodes|addr@nodes))
val () = println! ("xs_static = ", xs_static) // 0, 1, 4, 9, 16, ...

end // end of [local]
')#comment("atscode")

#dyncode("loop") の実装は、ATSにおける安全でないC言語スタイルプログラミングを多用しています。
C言語に馴染んだプログラマであれば、この実装に対応するC言語コードが想像できると思います。\

')
")

#langeng("
#para("\

Please find the entire code for this example
#mycodelink("CHAP_CINTERACT/StaticAllocList.dats", "on-line").

")
")
#langja("
#para("\

この例の完全なコードは #mycodelink("CHAP_CINTERACT/StaticAllocList.dats", "オンライン") にあります。

")
")

</sect1><!--id="example-constructing_a_statically_allocated_list"-->

<!-- ****** ****** -->

</chapter>

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
