#
# Implementing an Untyped Functional PL
#

######

This project is mostly for the purpose of teaching.

######

The parser of UTFPL is a bit peculiar:
It translates ATS level-2 syntax trees into UTFPL syntax trees.

######

parsing: code for parsing from JSONized ATS to UTFPL
evaluating: code for evaluating UTFPL abstract syntax trees

######

How to test:

make utfpleval # generating the evaluator for UTFPL
make -C TEST all # generating some examples for testing

./utfpleval TEST/test01_utfpl.json # evaluating TEST/test01.dats // factorial
./utfpleval TEST/test02_utfpl.json # evaluating TEST/test02.dats // Ackermann
./utfpleval TEST/test03_utfpl.json # evaluating TEST/test03.dats // fast power
./utfpleval TEST/test04_utfpl.json # evaluating TEST/test04.dats // isevn&isodd
./utfpleval TEST/test05_utfpl.json # evaluating TEST/test05.dats // Fibonacci
./utfpleval TEST/test06_utfpl.json # evaluating TEST/test06.dats // file-copying
./utfpleval TEST/queens_utfpl.json # evaluating TEST/queens.dats // 8-queens puzzle

make cleanall # cleaning up everything generated

######

###### end of [README] ######
