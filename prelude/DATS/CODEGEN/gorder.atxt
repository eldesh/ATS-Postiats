%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"gorder.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/gorder.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("March, 2013")

#atscode_separator()

implement{a}
glt_val_val (x, y) = gcompare_val_val<a> (x, y) < 0
implement{a}
glte_val_val (x, y) = gcompare_val_val<a> (x, y) <= 0
implement{a}
ggt_val_val (x, y) = gcompare_val_val<a> (x, y) > 0
implement{a}
ggte_val_val (x, y) = gcompare_val_val<a> (x, y) >= 0

#atscode_separator()

implement{a}
glt_val_int (x, y) = glt_val_val<a> (x, gnumber_int<a>(y))
implement{a}
glte_val_int (x, y) = glte_val_val<a> (x, gnumber_int<a>(y))
implement{a}
ggt_val_int (x, y) = ggt_val_val<a> (x, gnumber_int<a>(y))
implement{a}
ggte_val_int (x, y) = ggte_val_val<a> (x, gnumber_int<a>(y))

#atscode_separator()

implement{a}
geq_val_val (x, y) = gcompare_val_val<a> (x, y) = 0
implement{a}
gneq_val_val (x, y) = gcompare_val_val<a> (x, y) != 0

#atscode_separator()

implement{a}
geq_val_int (x, y) = geq_val_val<a> (x, gnumber_int<a>(y))
implement{a}
gneq_val_int (x, y) = gneq_val_val<a> (x, gnumber_int<a>(y))

#atscode_separator()

implement{a}
gisltz_val (x) = glt_val_int<a> (x, 0)
implement{a}
gisltez_val (x) = glte_val_int<a> (x, 0)
implement{a}
gisgtz_val (x) = ggt_val_int<a> (x, 0)
implement{a}
gisgtez_val (x) = ggte_val_int<a> (x, 0)

#atscode_separator()

implement{a}
giseqz_val (x) = geq_val_int<a> (x, 0)
implement{a}
gisneqz_val (x) = gneq_val_int<a> (x, 0)

#atscode_separator()

implement{a}
glt_ref_ref (x, y) = gcompare_ref_ref<a> (x, y) < 0
implement{a}
glte_ref_ref (x, y) = gcompare_ref_ref<a> (x, y) <= 0
implement{a}
ggt_ref_ref (x, y) = gcompare_ref_ref<a> (x, y) > 0
implement{a}
ggte_ref_ref (x, y) = gcompare_ref_ref<a> (x, y) >= 0

#atscode_separator()

implement{a}
geq_ref_ref (x, y) = gcompare_ref_ref<a> (x, y) = 0
implement{a}
gneq_ref_ref (x, y) = gcompare_ref_ref<a> (x, y) != 0

#atscode_separator()

implement(a:t0p)
gcompare_ref_ref<a> (x, y) = gcompare_val_val<a> (x, y)

#atscode_separator()

implement{a}
gabs_val (x) =
  if gisgtez_val (x) then x else gneg_val<a> (x)
// end of [gabs_val]

#atscode_separator()

implement{a}
gmax_val_val (x, y) = if ggte_val_val (x, y) then x else y
implement{a}
gmin_val_val (x, y) = if glte_val_val (x, y) then x else y

#atscode_separator()

\#include "./SHARE/gorder_int.dats"
\#include "./SHARE/gorder_uint.dats"

#atscode_separator()

\#include "./SHARE/gorder_bool.dats"
\#include "./SHARE/gorder_char.dats"

#atscode_separator()

\#include "./SHARE/gorder_float.dats"

#atscode_separator()

\#include "./SHARE/gorder_string.dats"

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "gorder_atxt.txt")
%}\
