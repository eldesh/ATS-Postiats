%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"option.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/option.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("Feburary, 2012")

#atscode_separator()

implement{a} option_some (x) = Some (x)
implement{a} option_none ( ) = None ( )

#atscode_separator()

implement{}
option_is_some (opt) =
  case+ opt of Some _ => true | None _ => false
// end of [option_is_some]

implement{}
option_is_none (opt) =
  case+ opt of Some _ => false | None _ => true
// end of [option_is_none]

#atscode_separator()

implement{a}
option_unsome
  (opt) = x where { val+Some (x) = opt }
// end of [option_unsome]

implement{a}
option_unsome_exn
  (opt) = (
  case+ opt of
  | Some x => x | None _ => $raise NotSomeExn()
) // end of [option_unsome_exn]

#atscode_separator()

implement{a}
fprint_option
  (out, opt) = let
in
//
case+ opt of
| Some (x) => {
    val (
    ) = fprint_string (out, "Some(")
    val () = fprint_val<a> (out, x)
    val () = fprint_string (out, ")")
  } (* end of [Some] *)
| None () => fprint_string (out, "None()")
//
end // end of [fprint_option]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "option_atxt.txt")
%}\
