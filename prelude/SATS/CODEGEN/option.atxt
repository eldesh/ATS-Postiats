%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT=="txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"option.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/option.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

sortdef t0p = t@ype

#atscode_separator()

\#if(0)
//
// HX: these decls are available in [basic_dyn.sats]
//
stadef option = option_t0ype_bool_type
typedef Option (a:t0p) = [b:bool] option (a, b)
\#endif

#atscode_separator()

exception NotSomeExn of ()
(*
fun NotSomeExn ():<> exn = "mac\#%NotSomeExn_make"
fun isNotSomeExn (x: !exn):<> bool = "mac\#%isNotSomeExn"
macdef
ifNotSomeExn
  {tres}(exn, body) =
(
let val x = ,(exn) in
(
if isNotSomeExn(x)
  then
    let prval () = __vfree_exn (x) in ,(body) end
  else $raise (x)
) : tres // end of [if]
end (* end of [let] *)
) // end of [ifNotSomeExn]
*)

#atscode_separator()
//
castfn
option_cast
  {a:t0p}{b:bool}
  (opt: option (INV(a), b)):<> option (a, b)
//
(* ****** ****** *)
//
castfn
option_vt2t
  {a:t0p}{b:bool}
  (opt: option_vt (INV(a), b)):<> option (a, b)
castfn
option_of_option_vt
  {a:t0p}{b:bool}
  (opt: option_vt (INV(a), b)):<> option (a, b)
//
#atscode_separator()

fun{a:t0p}
option_some (x: a):<> option (a, true)
fun{a:t0p}
option_none ((*void*)):<> option (a, false)

#atscode_separator()

#atscode_decl_strcst('\
fun{}
option_is_some{a:t0p}
  {b:bool} (opt: option (a, b)):<> bool (b)
// end of [option_is_some]
')\

#atscode_decl_strcst('\
fun{}
option_is_none{a:t0p}
  {b:bool} (opt: option (a, b)):<> bool (~b)
// end of [option_is_none]
')\

#atscode_separator()

fun{a:t0p}
option_unsome (opt: option (INV(a), true)):<> a

fun{a:t0p}
option_unsome_exn (opt: Option (INV(a))):<!exn> a

#atscode_separator()
//
fun{a:t0p}
fprint_option
  (out: FILEref, opt: Option (INV(a))): void
//
overload fprint with fprint_option
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "option_atxt.txt")
%}\
